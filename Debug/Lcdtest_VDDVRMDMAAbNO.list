
Lcdtest_VDDVRMDMAAbNO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076dc  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  08007794  08007794  00017794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078f0  080078f0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080078f0  080078f0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080078f0  080078f0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078f0  080078f0  000178f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080078f4  080078f4  000178f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080078f8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006e0  20000070  08007968  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000750  08007968  00020750  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ce96  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023c4  00000000  00000000  0002cf71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e10  00000000  00000000  0002f338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ae8  00000000  00000000  00030148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016785  00000000  00000000  00030c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001079f  00000000  00000000  000473b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008eec8  00000000  00000000  00057b54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003b94  00000000  00000000  000e6a1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000ea5b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000070 	.word	0x20000070
 80000d8:	00000000 	.word	0x00000000
 80000dc:	0800777c 	.word	0x0800777c

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000074 	.word	0x20000074
 80000fc:	0800777c 	.word	0x0800777c

08000100 <__gnu_thumb1_case_shi>:
 8000100:	b403      	push	{r0, r1}
 8000102:	4671      	mov	r1, lr
 8000104:	0849      	lsrs	r1, r1, #1
 8000106:	0040      	lsls	r0, r0, #1
 8000108:	0049      	lsls	r1, r1, #1
 800010a:	5e09      	ldrsh	r1, [r1, r0]
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	448e      	add	lr, r1
 8000110:	bc03      	pop	{r0, r1}
 8000112:	4770      	bx	lr

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	; 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f806 	bl	8000228 <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__aeabi_idiv0>:
 8000228:	4770      	bx	lr
 800022a:	46c0      	nop			; (mov r8, r8)

0800022c <__aeabi_cdrcmple>:
 800022c:	4684      	mov	ip, r0
 800022e:	0010      	movs	r0, r2
 8000230:	4662      	mov	r2, ip
 8000232:	468c      	mov	ip, r1
 8000234:	0019      	movs	r1, r3
 8000236:	4663      	mov	r3, ip
 8000238:	e000      	b.n	800023c <__aeabi_cdcmpeq>
 800023a:	46c0      	nop			; (mov r8, r8)

0800023c <__aeabi_cdcmpeq>:
 800023c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800023e:	f001 fced 	bl	8001c1c <__ledf2>
 8000242:	2800      	cmp	r0, #0
 8000244:	d401      	bmi.n	800024a <__aeabi_cdcmpeq+0xe>
 8000246:	2100      	movs	r1, #0
 8000248:	42c8      	cmn	r0, r1
 800024a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800024c <__aeabi_dcmpeq>:
 800024c:	b510      	push	{r4, lr}
 800024e:	f001 fc3d 	bl	8001acc <__eqdf2>
 8000252:	4240      	negs	r0, r0
 8000254:	3001      	adds	r0, #1
 8000256:	bd10      	pop	{r4, pc}

08000258 <__aeabi_dcmplt>:
 8000258:	b510      	push	{r4, lr}
 800025a:	f001 fcdf 	bl	8001c1c <__ledf2>
 800025e:	2800      	cmp	r0, #0
 8000260:	db01      	blt.n	8000266 <__aeabi_dcmplt+0xe>
 8000262:	2000      	movs	r0, #0
 8000264:	bd10      	pop	{r4, pc}
 8000266:	2001      	movs	r0, #1
 8000268:	bd10      	pop	{r4, pc}
 800026a:	46c0      	nop			; (mov r8, r8)

0800026c <__aeabi_dcmple>:
 800026c:	b510      	push	{r4, lr}
 800026e:	f001 fcd5 	bl	8001c1c <__ledf2>
 8000272:	2800      	cmp	r0, #0
 8000274:	dd01      	ble.n	800027a <__aeabi_dcmple+0xe>
 8000276:	2000      	movs	r0, #0
 8000278:	bd10      	pop	{r4, pc}
 800027a:	2001      	movs	r0, #1
 800027c:	bd10      	pop	{r4, pc}
 800027e:	46c0      	nop			; (mov r8, r8)

08000280 <__aeabi_dcmpgt>:
 8000280:	b510      	push	{r4, lr}
 8000282:	f001 fc65 	bl	8001b50 <__gedf2>
 8000286:	2800      	cmp	r0, #0
 8000288:	dc01      	bgt.n	800028e <__aeabi_dcmpgt+0xe>
 800028a:	2000      	movs	r0, #0
 800028c:	bd10      	pop	{r4, pc}
 800028e:	2001      	movs	r0, #1
 8000290:	bd10      	pop	{r4, pc}
 8000292:	46c0      	nop			; (mov r8, r8)

08000294 <__aeabi_dcmpge>:
 8000294:	b510      	push	{r4, lr}
 8000296:	f001 fc5b 	bl	8001b50 <__gedf2>
 800029a:	2800      	cmp	r0, #0
 800029c:	da01      	bge.n	80002a2 <__aeabi_dcmpge+0xe>
 800029e:	2000      	movs	r0, #0
 80002a0:	bd10      	pop	{r4, pc}
 80002a2:	2001      	movs	r0, #1
 80002a4:	bd10      	pop	{r4, pc}
 80002a6:	46c0      	nop			; (mov r8, r8)

080002a8 <__aeabi_cfrcmple>:
 80002a8:	4684      	mov	ip, r0
 80002aa:	0008      	movs	r0, r1
 80002ac:	4661      	mov	r1, ip
 80002ae:	e7ff      	b.n	80002b0 <__aeabi_cfcmpeq>

080002b0 <__aeabi_cfcmpeq>:
 80002b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80002b2:	f000 f9d1 	bl	8000658 <__lesf2>
 80002b6:	2800      	cmp	r0, #0
 80002b8:	d401      	bmi.n	80002be <__aeabi_cfcmpeq+0xe>
 80002ba:	2100      	movs	r1, #0
 80002bc:	42c8      	cmn	r0, r1
 80002be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080002c0 <__aeabi_fcmpeq>:
 80002c0:	b510      	push	{r4, lr}
 80002c2:	f000 f95d 	bl	8000580 <__eqsf2>
 80002c6:	4240      	negs	r0, r0
 80002c8:	3001      	adds	r0, #1
 80002ca:	bd10      	pop	{r4, pc}

080002cc <__aeabi_fcmplt>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	f000 f9c3 	bl	8000658 <__lesf2>
 80002d2:	2800      	cmp	r0, #0
 80002d4:	db01      	blt.n	80002da <__aeabi_fcmplt+0xe>
 80002d6:	2000      	movs	r0, #0
 80002d8:	bd10      	pop	{r4, pc}
 80002da:	2001      	movs	r0, #1
 80002dc:	bd10      	pop	{r4, pc}
 80002de:	46c0      	nop			; (mov r8, r8)

080002e0 <__aeabi_fcmple>:
 80002e0:	b510      	push	{r4, lr}
 80002e2:	f000 f9b9 	bl	8000658 <__lesf2>
 80002e6:	2800      	cmp	r0, #0
 80002e8:	dd01      	ble.n	80002ee <__aeabi_fcmple+0xe>
 80002ea:	2000      	movs	r0, #0
 80002ec:	bd10      	pop	{r4, pc}
 80002ee:	2001      	movs	r0, #1
 80002f0:	bd10      	pop	{r4, pc}
 80002f2:	46c0      	nop			; (mov r8, r8)

080002f4 <__aeabi_fcmpgt>:
 80002f4:	b510      	push	{r4, lr}
 80002f6:	f000 f969 	bl	80005cc <__gesf2>
 80002fa:	2800      	cmp	r0, #0
 80002fc:	dc01      	bgt.n	8000302 <__aeabi_fcmpgt+0xe>
 80002fe:	2000      	movs	r0, #0
 8000300:	bd10      	pop	{r4, pc}
 8000302:	2001      	movs	r0, #1
 8000304:	bd10      	pop	{r4, pc}
 8000306:	46c0      	nop			; (mov r8, r8)

08000308 <__aeabi_fcmpge>:
 8000308:	b510      	push	{r4, lr}
 800030a:	f000 f95f 	bl	80005cc <__gesf2>
 800030e:	2800      	cmp	r0, #0
 8000310:	da01      	bge.n	8000316 <__aeabi_fcmpge+0xe>
 8000312:	2000      	movs	r0, #0
 8000314:	bd10      	pop	{r4, pc}
 8000316:	2001      	movs	r0, #1
 8000318:	bd10      	pop	{r4, pc}
 800031a:	46c0      	nop			; (mov r8, r8)

0800031c <__aeabi_f2uiz>:
 800031c:	219e      	movs	r1, #158	; 0x9e
 800031e:	b510      	push	{r4, lr}
 8000320:	05c9      	lsls	r1, r1, #23
 8000322:	1c04      	adds	r4, r0, #0
 8000324:	f7ff fff0 	bl	8000308 <__aeabi_fcmpge>
 8000328:	2800      	cmp	r0, #0
 800032a:	d103      	bne.n	8000334 <__aeabi_f2uiz+0x18>
 800032c:	1c20      	adds	r0, r4, #0
 800032e:	f000 fcc5 	bl	8000cbc <__aeabi_f2iz>
 8000332:	bd10      	pop	{r4, pc}
 8000334:	219e      	movs	r1, #158	; 0x9e
 8000336:	1c20      	adds	r0, r4, #0
 8000338:	05c9      	lsls	r1, r1, #23
 800033a:	f000 fb1f 	bl	800097c <__aeabi_fsub>
 800033e:	f000 fcbd 	bl	8000cbc <__aeabi_f2iz>
 8000342:	2380      	movs	r3, #128	; 0x80
 8000344:	061b      	lsls	r3, r3, #24
 8000346:	469c      	mov	ip, r3
 8000348:	4460      	add	r0, ip
 800034a:	e7f2      	b.n	8000332 <__aeabi_f2uiz+0x16>

0800034c <__aeabi_fdiv>:
 800034c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800034e:	464f      	mov	r7, r9
 8000350:	4646      	mov	r6, r8
 8000352:	46d6      	mov	lr, sl
 8000354:	0245      	lsls	r5, r0, #9
 8000356:	b5c0      	push	{r6, r7, lr}
 8000358:	0047      	lsls	r7, r0, #1
 800035a:	1c0c      	adds	r4, r1, #0
 800035c:	0a6d      	lsrs	r5, r5, #9
 800035e:	0e3f      	lsrs	r7, r7, #24
 8000360:	0fc6      	lsrs	r6, r0, #31
 8000362:	2f00      	cmp	r7, #0
 8000364:	d100      	bne.n	8000368 <__aeabi_fdiv+0x1c>
 8000366:	e06f      	b.n	8000448 <__aeabi_fdiv+0xfc>
 8000368:	2fff      	cmp	r7, #255	; 0xff
 800036a:	d100      	bne.n	800036e <__aeabi_fdiv+0x22>
 800036c:	e074      	b.n	8000458 <__aeabi_fdiv+0x10c>
 800036e:	2300      	movs	r3, #0
 8000370:	2280      	movs	r2, #128	; 0x80
 8000372:	4699      	mov	r9, r3
 8000374:	469a      	mov	sl, r3
 8000376:	00ed      	lsls	r5, r5, #3
 8000378:	04d2      	lsls	r2, r2, #19
 800037a:	4315      	orrs	r5, r2
 800037c:	3f7f      	subs	r7, #127	; 0x7f
 800037e:	0263      	lsls	r3, r4, #9
 8000380:	0a5b      	lsrs	r3, r3, #9
 8000382:	4698      	mov	r8, r3
 8000384:	0063      	lsls	r3, r4, #1
 8000386:	0e1b      	lsrs	r3, r3, #24
 8000388:	0fe4      	lsrs	r4, r4, #31
 800038a:	2b00      	cmp	r3, #0
 800038c:	d04d      	beq.n	800042a <__aeabi_fdiv+0xde>
 800038e:	2bff      	cmp	r3, #255	; 0xff
 8000390:	d045      	beq.n	800041e <__aeabi_fdiv+0xd2>
 8000392:	4642      	mov	r2, r8
 8000394:	2180      	movs	r1, #128	; 0x80
 8000396:	00d2      	lsls	r2, r2, #3
 8000398:	04c9      	lsls	r1, r1, #19
 800039a:	4311      	orrs	r1, r2
 800039c:	4688      	mov	r8, r1
 800039e:	2200      	movs	r2, #0
 80003a0:	3b7f      	subs	r3, #127	; 0x7f
 80003a2:	0031      	movs	r1, r6
 80003a4:	1aff      	subs	r7, r7, r3
 80003a6:	464b      	mov	r3, r9
 80003a8:	4061      	eors	r1, r4
 80003aa:	b2c9      	uxtb	r1, r1
 80003ac:	2b0f      	cmp	r3, #15
 80003ae:	d900      	bls.n	80003b2 <__aeabi_fdiv+0x66>
 80003b0:	e0b8      	b.n	8000524 <__aeabi_fdiv+0x1d8>
 80003b2:	4870      	ldr	r0, [pc, #448]	; (8000574 <__aeabi_fdiv+0x228>)
 80003b4:	009b      	lsls	r3, r3, #2
 80003b6:	58c3      	ldr	r3, [r0, r3]
 80003b8:	469f      	mov	pc, r3
 80003ba:	2300      	movs	r3, #0
 80003bc:	4698      	mov	r8, r3
 80003be:	0026      	movs	r6, r4
 80003c0:	4645      	mov	r5, r8
 80003c2:	4692      	mov	sl, r2
 80003c4:	4653      	mov	r3, sl
 80003c6:	2b02      	cmp	r3, #2
 80003c8:	d100      	bne.n	80003cc <__aeabi_fdiv+0x80>
 80003ca:	e08d      	b.n	80004e8 <__aeabi_fdiv+0x19c>
 80003cc:	2b03      	cmp	r3, #3
 80003ce:	d100      	bne.n	80003d2 <__aeabi_fdiv+0x86>
 80003d0:	e0a1      	b.n	8000516 <__aeabi_fdiv+0x1ca>
 80003d2:	2b01      	cmp	r3, #1
 80003d4:	d018      	beq.n	8000408 <__aeabi_fdiv+0xbc>
 80003d6:	003b      	movs	r3, r7
 80003d8:	337f      	adds	r3, #127	; 0x7f
 80003da:	2b00      	cmp	r3, #0
 80003dc:	dd6d      	ble.n	80004ba <__aeabi_fdiv+0x16e>
 80003de:	076a      	lsls	r2, r5, #29
 80003e0:	d004      	beq.n	80003ec <__aeabi_fdiv+0xa0>
 80003e2:	220f      	movs	r2, #15
 80003e4:	402a      	ands	r2, r5
 80003e6:	2a04      	cmp	r2, #4
 80003e8:	d000      	beq.n	80003ec <__aeabi_fdiv+0xa0>
 80003ea:	3504      	adds	r5, #4
 80003ec:	012a      	lsls	r2, r5, #4
 80003ee:	d503      	bpl.n	80003f8 <__aeabi_fdiv+0xac>
 80003f0:	4b61      	ldr	r3, [pc, #388]	; (8000578 <__aeabi_fdiv+0x22c>)
 80003f2:	401d      	ands	r5, r3
 80003f4:	003b      	movs	r3, r7
 80003f6:	3380      	adds	r3, #128	; 0x80
 80003f8:	2bfe      	cmp	r3, #254	; 0xfe
 80003fa:	dd00      	ble.n	80003fe <__aeabi_fdiv+0xb2>
 80003fc:	e074      	b.n	80004e8 <__aeabi_fdiv+0x19c>
 80003fe:	01aa      	lsls	r2, r5, #6
 8000400:	0a52      	lsrs	r2, r2, #9
 8000402:	b2d8      	uxtb	r0, r3
 8000404:	e002      	b.n	800040c <__aeabi_fdiv+0xc0>
 8000406:	000e      	movs	r6, r1
 8000408:	2000      	movs	r0, #0
 800040a:	2200      	movs	r2, #0
 800040c:	05c0      	lsls	r0, r0, #23
 800040e:	07f6      	lsls	r6, r6, #31
 8000410:	4310      	orrs	r0, r2
 8000412:	4330      	orrs	r0, r6
 8000414:	bce0      	pop	{r5, r6, r7}
 8000416:	46ba      	mov	sl, r7
 8000418:	46b1      	mov	r9, r6
 800041a:	46a8      	mov	r8, r5
 800041c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800041e:	4643      	mov	r3, r8
 8000420:	2b00      	cmp	r3, #0
 8000422:	d13f      	bne.n	80004a4 <__aeabi_fdiv+0x158>
 8000424:	2202      	movs	r2, #2
 8000426:	3fff      	subs	r7, #255	; 0xff
 8000428:	e003      	b.n	8000432 <__aeabi_fdiv+0xe6>
 800042a:	4643      	mov	r3, r8
 800042c:	2b00      	cmp	r3, #0
 800042e:	d12d      	bne.n	800048c <__aeabi_fdiv+0x140>
 8000430:	2201      	movs	r2, #1
 8000432:	0031      	movs	r1, r6
 8000434:	464b      	mov	r3, r9
 8000436:	4061      	eors	r1, r4
 8000438:	b2c9      	uxtb	r1, r1
 800043a:	4313      	orrs	r3, r2
 800043c:	2b0f      	cmp	r3, #15
 800043e:	d838      	bhi.n	80004b2 <__aeabi_fdiv+0x166>
 8000440:	484e      	ldr	r0, [pc, #312]	; (800057c <__aeabi_fdiv+0x230>)
 8000442:	009b      	lsls	r3, r3, #2
 8000444:	58c3      	ldr	r3, [r0, r3]
 8000446:	469f      	mov	pc, r3
 8000448:	2d00      	cmp	r5, #0
 800044a:	d113      	bne.n	8000474 <__aeabi_fdiv+0x128>
 800044c:	2304      	movs	r3, #4
 800044e:	4699      	mov	r9, r3
 8000450:	3b03      	subs	r3, #3
 8000452:	2700      	movs	r7, #0
 8000454:	469a      	mov	sl, r3
 8000456:	e792      	b.n	800037e <__aeabi_fdiv+0x32>
 8000458:	2d00      	cmp	r5, #0
 800045a:	d105      	bne.n	8000468 <__aeabi_fdiv+0x11c>
 800045c:	2308      	movs	r3, #8
 800045e:	4699      	mov	r9, r3
 8000460:	3b06      	subs	r3, #6
 8000462:	27ff      	movs	r7, #255	; 0xff
 8000464:	469a      	mov	sl, r3
 8000466:	e78a      	b.n	800037e <__aeabi_fdiv+0x32>
 8000468:	230c      	movs	r3, #12
 800046a:	4699      	mov	r9, r3
 800046c:	3b09      	subs	r3, #9
 800046e:	27ff      	movs	r7, #255	; 0xff
 8000470:	469a      	mov	sl, r3
 8000472:	e784      	b.n	800037e <__aeabi_fdiv+0x32>
 8000474:	0028      	movs	r0, r5
 8000476:	f002 fb95 	bl	8002ba4 <__clzsi2>
 800047a:	2776      	movs	r7, #118	; 0x76
 800047c:	1f43      	subs	r3, r0, #5
 800047e:	409d      	lsls	r5, r3
 8000480:	2300      	movs	r3, #0
 8000482:	427f      	negs	r7, r7
 8000484:	4699      	mov	r9, r3
 8000486:	469a      	mov	sl, r3
 8000488:	1a3f      	subs	r7, r7, r0
 800048a:	e778      	b.n	800037e <__aeabi_fdiv+0x32>
 800048c:	4640      	mov	r0, r8
 800048e:	f002 fb89 	bl	8002ba4 <__clzsi2>
 8000492:	4642      	mov	r2, r8
 8000494:	1f43      	subs	r3, r0, #5
 8000496:	409a      	lsls	r2, r3
 8000498:	2376      	movs	r3, #118	; 0x76
 800049a:	425b      	negs	r3, r3
 800049c:	4690      	mov	r8, r2
 800049e:	1a1b      	subs	r3, r3, r0
 80004a0:	2200      	movs	r2, #0
 80004a2:	e77e      	b.n	80003a2 <__aeabi_fdiv+0x56>
 80004a4:	2303      	movs	r3, #3
 80004a6:	464a      	mov	r2, r9
 80004a8:	431a      	orrs	r2, r3
 80004aa:	4691      	mov	r9, r2
 80004ac:	33fc      	adds	r3, #252	; 0xfc
 80004ae:	2203      	movs	r2, #3
 80004b0:	e777      	b.n	80003a2 <__aeabi_fdiv+0x56>
 80004b2:	000e      	movs	r6, r1
 80004b4:	20ff      	movs	r0, #255	; 0xff
 80004b6:	2200      	movs	r2, #0
 80004b8:	e7a8      	b.n	800040c <__aeabi_fdiv+0xc0>
 80004ba:	2201      	movs	r2, #1
 80004bc:	1ad3      	subs	r3, r2, r3
 80004be:	2b1b      	cmp	r3, #27
 80004c0:	dca2      	bgt.n	8000408 <__aeabi_fdiv+0xbc>
 80004c2:	379e      	adds	r7, #158	; 0x9e
 80004c4:	002a      	movs	r2, r5
 80004c6:	40bd      	lsls	r5, r7
 80004c8:	40da      	lsrs	r2, r3
 80004ca:	1e6b      	subs	r3, r5, #1
 80004cc:	419d      	sbcs	r5, r3
 80004ce:	4315      	orrs	r5, r2
 80004d0:	076a      	lsls	r2, r5, #29
 80004d2:	d004      	beq.n	80004de <__aeabi_fdiv+0x192>
 80004d4:	220f      	movs	r2, #15
 80004d6:	402a      	ands	r2, r5
 80004d8:	2a04      	cmp	r2, #4
 80004da:	d000      	beq.n	80004de <__aeabi_fdiv+0x192>
 80004dc:	3504      	adds	r5, #4
 80004de:	016a      	lsls	r2, r5, #5
 80004e0:	d544      	bpl.n	800056c <__aeabi_fdiv+0x220>
 80004e2:	2001      	movs	r0, #1
 80004e4:	2200      	movs	r2, #0
 80004e6:	e791      	b.n	800040c <__aeabi_fdiv+0xc0>
 80004e8:	20ff      	movs	r0, #255	; 0xff
 80004ea:	2200      	movs	r2, #0
 80004ec:	e78e      	b.n	800040c <__aeabi_fdiv+0xc0>
 80004ee:	2280      	movs	r2, #128	; 0x80
 80004f0:	2600      	movs	r6, #0
 80004f2:	20ff      	movs	r0, #255	; 0xff
 80004f4:	03d2      	lsls	r2, r2, #15
 80004f6:	e789      	b.n	800040c <__aeabi_fdiv+0xc0>
 80004f8:	2300      	movs	r3, #0
 80004fa:	4698      	mov	r8, r3
 80004fc:	2280      	movs	r2, #128	; 0x80
 80004fe:	03d2      	lsls	r2, r2, #15
 8000500:	4215      	tst	r5, r2
 8000502:	d008      	beq.n	8000516 <__aeabi_fdiv+0x1ca>
 8000504:	4643      	mov	r3, r8
 8000506:	4213      	tst	r3, r2
 8000508:	d105      	bne.n	8000516 <__aeabi_fdiv+0x1ca>
 800050a:	431a      	orrs	r2, r3
 800050c:	0252      	lsls	r2, r2, #9
 800050e:	0026      	movs	r6, r4
 8000510:	20ff      	movs	r0, #255	; 0xff
 8000512:	0a52      	lsrs	r2, r2, #9
 8000514:	e77a      	b.n	800040c <__aeabi_fdiv+0xc0>
 8000516:	2280      	movs	r2, #128	; 0x80
 8000518:	03d2      	lsls	r2, r2, #15
 800051a:	432a      	orrs	r2, r5
 800051c:	0252      	lsls	r2, r2, #9
 800051e:	20ff      	movs	r0, #255	; 0xff
 8000520:	0a52      	lsrs	r2, r2, #9
 8000522:	e773      	b.n	800040c <__aeabi_fdiv+0xc0>
 8000524:	4642      	mov	r2, r8
 8000526:	016b      	lsls	r3, r5, #5
 8000528:	0155      	lsls	r5, r2, #5
 800052a:	42ab      	cmp	r3, r5
 800052c:	d21a      	bcs.n	8000564 <__aeabi_fdiv+0x218>
 800052e:	201b      	movs	r0, #27
 8000530:	2200      	movs	r2, #0
 8000532:	3f01      	subs	r7, #1
 8000534:	2601      	movs	r6, #1
 8000536:	001c      	movs	r4, r3
 8000538:	0052      	lsls	r2, r2, #1
 800053a:	005b      	lsls	r3, r3, #1
 800053c:	2c00      	cmp	r4, #0
 800053e:	db01      	blt.n	8000544 <__aeabi_fdiv+0x1f8>
 8000540:	429d      	cmp	r5, r3
 8000542:	d801      	bhi.n	8000548 <__aeabi_fdiv+0x1fc>
 8000544:	1b5b      	subs	r3, r3, r5
 8000546:	4332      	orrs	r2, r6
 8000548:	3801      	subs	r0, #1
 800054a:	2800      	cmp	r0, #0
 800054c:	d1f3      	bne.n	8000536 <__aeabi_fdiv+0x1ea>
 800054e:	1e58      	subs	r0, r3, #1
 8000550:	4183      	sbcs	r3, r0
 8000552:	4313      	orrs	r3, r2
 8000554:	001d      	movs	r5, r3
 8000556:	003b      	movs	r3, r7
 8000558:	337f      	adds	r3, #127	; 0x7f
 800055a:	000e      	movs	r6, r1
 800055c:	2b00      	cmp	r3, #0
 800055e:	dd00      	ble.n	8000562 <__aeabi_fdiv+0x216>
 8000560:	e73d      	b.n	80003de <__aeabi_fdiv+0x92>
 8000562:	e7aa      	b.n	80004ba <__aeabi_fdiv+0x16e>
 8000564:	201a      	movs	r0, #26
 8000566:	2201      	movs	r2, #1
 8000568:	1b5b      	subs	r3, r3, r5
 800056a:	e7e3      	b.n	8000534 <__aeabi_fdiv+0x1e8>
 800056c:	01aa      	lsls	r2, r5, #6
 800056e:	2000      	movs	r0, #0
 8000570:	0a52      	lsrs	r2, r2, #9
 8000572:	e74b      	b.n	800040c <__aeabi_fdiv+0xc0>
 8000574:	080077bc 	.word	0x080077bc
 8000578:	f7ffffff 	.word	0xf7ffffff
 800057c:	080077fc 	.word	0x080077fc

08000580 <__eqsf2>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	0042      	lsls	r2, r0, #1
 8000584:	0245      	lsls	r5, r0, #9
 8000586:	024e      	lsls	r6, r1, #9
 8000588:	004c      	lsls	r4, r1, #1
 800058a:	0fc3      	lsrs	r3, r0, #31
 800058c:	0a6d      	lsrs	r5, r5, #9
 800058e:	2001      	movs	r0, #1
 8000590:	0e12      	lsrs	r2, r2, #24
 8000592:	0a76      	lsrs	r6, r6, #9
 8000594:	0e24      	lsrs	r4, r4, #24
 8000596:	0fc9      	lsrs	r1, r1, #31
 8000598:	2aff      	cmp	r2, #255	; 0xff
 800059a:	d006      	beq.n	80005aa <__eqsf2+0x2a>
 800059c:	2cff      	cmp	r4, #255	; 0xff
 800059e:	d003      	beq.n	80005a8 <__eqsf2+0x28>
 80005a0:	42a2      	cmp	r2, r4
 80005a2:	d101      	bne.n	80005a8 <__eqsf2+0x28>
 80005a4:	42b5      	cmp	r5, r6
 80005a6:	d006      	beq.n	80005b6 <__eqsf2+0x36>
 80005a8:	bd70      	pop	{r4, r5, r6, pc}
 80005aa:	2d00      	cmp	r5, #0
 80005ac:	d1fc      	bne.n	80005a8 <__eqsf2+0x28>
 80005ae:	2cff      	cmp	r4, #255	; 0xff
 80005b0:	d1fa      	bne.n	80005a8 <__eqsf2+0x28>
 80005b2:	2e00      	cmp	r6, #0
 80005b4:	d1f8      	bne.n	80005a8 <__eqsf2+0x28>
 80005b6:	428b      	cmp	r3, r1
 80005b8:	d006      	beq.n	80005c8 <__eqsf2+0x48>
 80005ba:	2001      	movs	r0, #1
 80005bc:	2a00      	cmp	r2, #0
 80005be:	d1f3      	bne.n	80005a8 <__eqsf2+0x28>
 80005c0:	0028      	movs	r0, r5
 80005c2:	1e43      	subs	r3, r0, #1
 80005c4:	4198      	sbcs	r0, r3
 80005c6:	e7ef      	b.n	80005a8 <__eqsf2+0x28>
 80005c8:	2000      	movs	r0, #0
 80005ca:	e7ed      	b.n	80005a8 <__eqsf2+0x28>

080005cc <__gesf2>:
 80005cc:	b570      	push	{r4, r5, r6, lr}
 80005ce:	0042      	lsls	r2, r0, #1
 80005d0:	0245      	lsls	r5, r0, #9
 80005d2:	024e      	lsls	r6, r1, #9
 80005d4:	004c      	lsls	r4, r1, #1
 80005d6:	0fc3      	lsrs	r3, r0, #31
 80005d8:	0a6d      	lsrs	r5, r5, #9
 80005da:	0e12      	lsrs	r2, r2, #24
 80005dc:	0a76      	lsrs	r6, r6, #9
 80005de:	0e24      	lsrs	r4, r4, #24
 80005e0:	0fc8      	lsrs	r0, r1, #31
 80005e2:	2aff      	cmp	r2, #255	; 0xff
 80005e4:	d01b      	beq.n	800061e <__gesf2+0x52>
 80005e6:	2cff      	cmp	r4, #255	; 0xff
 80005e8:	d00e      	beq.n	8000608 <__gesf2+0x3c>
 80005ea:	2a00      	cmp	r2, #0
 80005ec:	d11b      	bne.n	8000626 <__gesf2+0x5a>
 80005ee:	2c00      	cmp	r4, #0
 80005f0:	d101      	bne.n	80005f6 <__gesf2+0x2a>
 80005f2:	2e00      	cmp	r6, #0
 80005f4:	d01c      	beq.n	8000630 <__gesf2+0x64>
 80005f6:	2d00      	cmp	r5, #0
 80005f8:	d00c      	beq.n	8000614 <__gesf2+0x48>
 80005fa:	4283      	cmp	r3, r0
 80005fc:	d01c      	beq.n	8000638 <__gesf2+0x6c>
 80005fe:	2102      	movs	r1, #2
 8000600:	1e58      	subs	r0, r3, #1
 8000602:	4008      	ands	r0, r1
 8000604:	3801      	subs	r0, #1
 8000606:	bd70      	pop	{r4, r5, r6, pc}
 8000608:	2e00      	cmp	r6, #0
 800060a:	d122      	bne.n	8000652 <__gesf2+0x86>
 800060c:	2a00      	cmp	r2, #0
 800060e:	d1f4      	bne.n	80005fa <__gesf2+0x2e>
 8000610:	2d00      	cmp	r5, #0
 8000612:	d1f2      	bne.n	80005fa <__gesf2+0x2e>
 8000614:	2800      	cmp	r0, #0
 8000616:	d1f6      	bne.n	8000606 <__gesf2+0x3a>
 8000618:	2001      	movs	r0, #1
 800061a:	4240      	negs	r0, r0
 800061c:	e7f3      	b.n	8000606 <__gesf2+0x3a>
 800061e:	2d00      	cmp	r5, #0
 8000620:	d117      	bne.n	8000652 <__gesf2+0x86>
 8000622:	2cff      	cmp	r4, #255	; 0xff
 8000624:	d0f0      	beq.n	8000608 <__gesf2+0x3c>
 8000626:	2c00      	cmp	r4, #0
 8000628:	d1e7      	bne.n	80005fa <__gesf2+0x2e>
 800062a:	2e00      	cmp	r6, #0
 800062c:	d1e5      	bne.n	80005fa <__gesf2+0x2e>
 800062e:	e7e6      	b.n	80005fe <__gesf2+0x32>
 8000630:	2000      	movs	r0, #0
 8000632:	2d00      	cmp	r5, #0
 8000634:	d0e7      	beq.n	8000606 <__gesf2+0x3a>
 8000636:	e7e2      	b.n	80005fe <__gesf2+0x32>
 8000638:	42a2      	cmp	r2, r4
 800063a:	dc05      	bgt.n	8000648 <__gesf2+0x7c>
 800063c:	dbea      	blt.n	8000614 <__gesf2+0x48>
 800063e:	42b5      	cmp	r5, r6
 8000640:	d802      	bhi.n	8000648 <__gesf2+0x7c>
 8000642:	d3e7      	bcc.n	8000614 <__gesf2+0x48>
 8000644:	2000      	movs	r0, #0
 8000646:	e7de      	b.n	8000606 <__gesf2+0x3a>
 8000648:	4243      	negs	r3, r0
 800064a:	4158      	adcs	r0, r3
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	3801      	subs	r0, #1
 8000650:	e7d9      	b.n	8000606 <__gesf2+0x3a>
 8000652:	2002      	movs	r0, #2
 8000654:	4240      	negs	r0, r0
 8000656:	e7d6      	b.n	8000606 <__gesf2+0x3a>

08000658 <__lesf2>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	0042      	lsls	r2, r0, #1
 800065c:	0245      	lsls	r5, r0, #9
 800065e:	024e      	lsls	r6, r1, #9
 8000660:	004c      	lsls	r4, r1, #1
 8000662:	0fc3      	lsrs	r3, r0, #31
 8000664:	0a6d      	lsrs	r5, r5, #9
 8000666:	0e12      	lsrs	r2, r2, #24
 8000668:	0a76      	lsrs	r6, r6, #9
 800066a:	0e24      	lsrs	r4, r4, #24
 800066c:	0fc8      	lsrs	r0, r1, #31
 800066e:	2aff      	cmp	r2, #255	; 0xff
 8000670:	d00b      	beq.n	800068a <__lesf2+0x32>
 8000672:	2cff      	cmp	r4, #255	; 0xff
 8000674:	d00d      	beq.n	8000692 <__lesf2+0x3a>
 8000676:	2a00      	cmp	r2, #0
 8000678:	d11f      	bne.n	80006ba <__lesf2+0x62>
 800067a:	2c00      	cmp	r4, #0
 800067c:	d116      	bne.n	80006ac <__lesf2+0x54>
 800067e:	2e00      	cmp	r6, #0
 8000680:	d114      	bne.n	80006ac <__lesf2+0x54>
 8000682:	2000      	movs	r0, #0
 8000684:	2d00      	cmp	r5, #0
 8000686:	d010      	beq.n	80006aa <__lesf2+0x52>
 8000688:	e009      	b.n	800069e <__lesf2+0x46>
 800068a:	2d00      	cmp	r5, #0
 800068c:	d10c      	bne.n	80006a8 <__lesf2+0x50>
 800068e:	2cff      	cmp	r4, #255	; 0xff
 8000690:	d113      	bne.n	80006ba <__lesf2+0x62>
 8000692:	2e00      	cmp	r6, #0
 8000694:	d108      	bne.n	80006a8 <__lesf2+0x50>
 8000696:	2a00      	cmp	r2, #0
 8000698:	d008      	beq.n	80006ac <__lesf2+0x54>
 800069a:	4283      	cmp	r3, r0
 800069c:	d012      	beq.n	80006c4 <__lesf2+0x6c>
 800069e:	2102      	movs	r1, #2
 80006a0:	1e58      	subs	r0, r3, #1
 80006a2:	4008      	ands	r0, r1
 80006a4:	3801      	subs	r0, #1
 80006a6:	e000      	b.n	80006aa <__lesf2+0x52>
 80006a8:	2002      	movs	r0, #2
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	2d00      	cmp	r5, #0
 80006ae:	d1f4      	bne.n	800069a <__lesf2+0x42>
 80006b0:	2800      	cmp	r0, #0
 80006b2:	d1fa      	bne.n	80006aa <__lesf2+0x52>
 80006b4:	2001      	movs	r0, #1
 80006b6:	4240      	negs	r0, r0
 80006b8:	e7f7      	b.n	80006aa <__lesf2+0x52>
 80006ba:	2c00      	cmp	r4, #0
 80006bc:	d1ed      	bne.n	800069a <__lesf2+0x42>
 80006be:	2e00      	cmp	r6, #0
 80006c0:	d1eb      	bne.n	800069a <__lesf2+0x42>
 80006c2:	e7ec      	b.n	800069e <__lesf2+0x46>
 80006c4:	42a2      	cmp	r2, r4
 80006c6:	dc05      	bgt.n	80006d4 <__lesf2+0x7c>
 80006c8:	dbf2      	blt.n	80006b0 <__lesf2+0x58>
 80006ca:	42b5      	cmp	r5, r6
 80006cc:	d802      	bhi.n	80006d4 <__lesf2+0x7c>
 80006ce:	d3ef      	bcc.n	80006b0 <__lesf2+0x58>
 80006d0:	2000      	movs	r0, #0
 80006d2:	e7ea      	b.n	80006aa <__lesf2+0x52>
 80006d4:	4243      	negs	r3, r0
 80006d6:	4158      	adcs	r0, r3
 80006d8:	0040      	lsls	r0, r0, #1
 80006da:	3801      	subs	r0, #1
 80006dc:	e7e5      	b.n	80006aa <__lesf2+0x52>
 80006de:	46c0      	nop			; (mov r8, r8)

080006e0 <__aeabi_fmul>:
 80006e0:	0243      	lsls	r3, r0, #9
 80006e2:	0a5b      	lsrs	r3, r3, #9
 80006e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006e6:	464f      	mov	r7, r9
 80006e8:	4646      	mov	r6, r8
 80006ea:	4699      	mov	r9, r3
 80006ec:	46d6      	mov	lr, sl
 80006ee:	0fc3      	lsrs	r3, r0, #31
 80006f0:	0045      	lsls	r5, r0, #1
 80006f2:	4698      	mov	r8, r3
 80006f4:	b5c0      	push	{r6, r7, lr}
 80006f6:	464b      	mov	r3, r9
 80006f8:	1c0f      	adds	r7, r1, #0
 80006fa:	0e2d      	lsrs	r5, r5, #24
 80006fc:	d100      	bne.n	8000700 <__aeabi_fmul+0x20>
 80006fe:	e0cb      	b.n	8000898 <__aeabi_fmul+0x1b8>
 8000700:	2dff      	cmp	r5, #255	; 0xff
 8000702:	d100      	bne.n	8000706 <__aeabi_fmul+0x26>
 8000704:	e0cf      	b.n	80008a6 <__aeabi_fmul+0x1c6>
 8000706:	2280      	movs	r2, #128	; 0x80
 8000708:	00db      	lsls	r3, r3, #3
 800070a:	04d2      	lsls	r2, r2, #19
 800070c:	431a      	orrs	r2, r3
 800070e:	2300      	movs	r3, #0
 8000710:	4691      	mov	r9, r2
 8000712:	2600      	movs	r6, #0
 8000714:	469a      	mov	sl, r3
 8000716:	3d7f      	subs	r5, #127	; 0x7f
 8000718:	027c      	lsls	r4, r7, #9
 800071a:	007b      	lsls	r3, r7, #1
 800071c:	0a64      	lsrs	r4, r4, #9
 800071e:	0e1b      	lsrs	r3, r3, #24
 8000720:	0fff      	lsrs	r7, r7, #31
 8000722:	2b00      	cmp	r3, #0
 8000724:	d100      	bne.n	8000728 <__aeabi_fmul+0x48>
 8000726:	e0a9      	b.n	800087c <__aeabi_fmul+0x19c>
 8000728:	2bff      	cmp	r3, #255	; 0xff
 800072a:	d011      	beq.n	8000750 <__aeabi_fmul+0x70>
 800072c:	2280      	movs	r2, #128	; 0x80
 800072e:	00e4      	lsls	r4, r4, #3
 8000730:	04d2      	lsls	r2, r2, #19
 8000732:	4314      	orrs	r4, r2
 8000734:	4642      	mov	r2, r8
 8000736:	3b7f      	subs	r3, #127	; 0x7f
 8000738:	195b      	adds	r3, r3, r5
 800073a:	407a      	eors	r2, r7
 800073c:	2000      	movs	r0, #0
 800073e:	b2d2      	uxtb	r2, r2
 8000740:	1c5d      	adds	r5, r3, #1
 8000742:	2e0a      	cmp	r6, #10
 8000744:	dd13      	ble.n	800076e <__aeabi_fmul+0x8e>
 8000746:	003a      	movs	r2, r7
 8000748:	2e0b      	cmp	r6, #11
 800074a:	d047      	beq.n	80007dc <__aeabi_fmul+0xfc>
 800074c:	4647      	mov	r7, r8
 800074e:	e03f      	b.n	80007d0 <__aeabi_fmul+0xf0>
 8000750:	002b      	movs	r3, r5
 8000752:	33ff      	adds	r3, #255	; 0xff
 8000754:	2c00      	cmp	r4, #0
 8000756:	d11e      	bne.n	8000796 <__aeabi_fmul+0xb6>
 8000758:	2202      	movs	r2, #2
 800075a:	4316      	orrs	r6, r2
 800075c:	4642      	mov	r2, r8
 800075e:	3501      	adds	r5, #1
 8000760:	407a      	eors	r2, r7
 8000762:	b2d2      	uxtb	r2, r2
 8000764:	35ff      	adds	r5, #255	; 0xff
 8000766:	2e0a      	cmp	r6, #10
 8000768:	dd00      	ble.n	800076c <__aeabi_fmul+0x8c>
 800076a:	e0e4      	b.n	8000936 <__aeabi_fmul+0x256>
 800076c:	2002      	movs	r0, #2
 800076e:	2e02      	cmp	r6, #2
 8000770:	dc1c      	bgt.n	80007ac <__aeabi_fmul+0xcc>
 8000772:	3e01      	subs	r6, #1
 8000774:	2e01      	cmp	r6, #1
 8000776:	d842      	bhi.n	80007fe <__aeabi_fmul+0x11e>
 8000778:	2802      	cmp	r0, #2
 800077a:	d03d      	beq.n	80007f8 <__aeabi_fmul+0x118>
 800077c:	2801      	cmp	r0, #1
 800077e:	d166      	bne.n	800084e <__aeabi_fmul+0x16e>
 8000780:	2000      	movs	r0, #0
 8000782:	2100      	movs	r1, #0
 8000784:	05c0      	lsls	r0, r0, #23
 8000786:	4308      	orrs	r0, r1
 8000788:	07d2      	lsls	r2, r2, #31
 800078a:	4310      	orrs	r0, r2
 800078c:	bce0      	pop	{r5, r6, r7}
 800078e:	46ba      	mov	sl, r7
 8000790:	46b1      	mov	r9, r6
 8000792:	46a8      	mov	r8, r5
 8000794:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000796:	2203      	movs	r2, #3
 8000798:	4316      	orrs	r6, r2
 800079a:	4642      	mov	r2, r8
 800079c:	3501      	adds	r5, #1
 800079e:	407a      	eors	r2, r7
 80007a0:	b2d2      	uxtb	r2, r2
 80007a2:	35ff      	adds	r5, #255	; 0xff
 80007a4:	2e0a      	cmp	r6, #10
 80007a6:	dd00      	ble.n	80007aa <__aeabi_fmul+0xca>
 80007a8:	e0e4      	b.n	8000974 <__aeabi_fmul+0x294>
 80007aa:	2003      	movs	r0, #3
 80007ac:	2101      	movs	r1, #1
 80007ae:	40b1      	lsls	r1, r6
 80007b0:	26a6      	movs	r6, #166	; 0xa6
 80007b2:	00f6      	lsls	r6, r6, #3
 80007b4:	4231      	tst	r1, r6
 80007b6:	d10a      	bne.n	80007ce <__aeabi_fmul+0xee>
 80007b8:	2690      	movs	r6, #144	; 0x90
 80007ba:	00b6      	lsls	r6, r6, #2
 80007bc:	4231      	tst	r1, r6
 80007be:	d116      	bne.n	80007ee <__aeabi_fmul+0x10e>
 80007c0:	3eb9      	subs	r6, #185	; 0xb9
 80007c2:	3eff      	subs	r6, #255	; 0xff
 80007c4:	420e      	tst	r6, r1
 80007c6:	d01a      	beq.n	80007fe <__aeabi_fmul+0x11e>
 80007c8:	46a1      	mov	r9, r4
 80007ca:	4682      	mov	sl, r0
 80007cc:	e000      	b.n	80007d0 <__aeabi_fmul+0xf0>
 80007ce:	0017      	movs	r7, r2
 80007d0:	4653      	mov	r3, sl
 80007d2:	003a      	movs	r2, r7
 80007d4:	2b02      	cmp	r3, #2
 80007d6:	d00f      	beq.n	80007f8 <__aeabi_fmul+0x118>
 80007d8:	464c      	mov	r4, r9
 80007da:	4650      	mov	r0, sl
 80007dc:	2803      	cmp	r0, #3
 80007de:	d1cd      	bne.n	800077c <__aeabi_fmul+0x9c>
 80007e0:	2180      	movs	r1, #128	; 0x80
 80007e2:	03c9      	lsls	r1, r1, #15
 80007e4:	4321      	orrs	r1, r4
 80007e6:	0249      	lsls	r1, r1, #9
 80007e8:	20ff      	movs	r0, #255	; 0xff
 80007ea:	0a49      	lsrs	r1, r1, #9
 80007ec:	e7ca      	b.n	8000784 <__aeabi_fmul+0xa4>
 80007ee:	2180      	movs	r1, #128	; 0x80
 80007f0:	2200      	movs	r2, #0
 80007f2:	20ff      	movs	r0, #255	; 0xff
 80007f4:	03c9      	lsls	r1, r1, #15
 80007f6:	e7c5      	b.n	8000784 <__aeabi_fmul+0xa4>
 80007f8:	20ff      	movs	r0, #255	; 0xff
 80007fa:	2100      	movs	r1, #0
 80007fc:	e7c2      	b.n	8000784 <__aeabi_fmul+0xa4>
 80007fe:	0c20      	lsrs	r0, r4, #16
 8000800:	4649      	mov	r1, r9
 8000802:	0424      	lsls	r4, r4, #16
 8000804:	0c24      	lsrs	r4, r4, #16
 8000806:	0027      	movs	r7, r4
 8000808:	0c0e      	lsrs	r6, r1, #16
 800080a:	0409      	lsls	r1, r1, #16
 800080c:	0c09      	lsrs	r1, r1, #16
 800080e:	4374      	muls	r4, r6
 8000810:	434f      	muls	r7, r1
 8000812:	4346      	muls	r6, r0
 8000814:	4348      	muls	r0, r1
 8000816:	0c39      	lsrs	r1, r7, #16
 8000818:	1900      	adds	r0, r0, r4
 800081a:	1809      	adds	r1, r1, r0
 800081c:	428c      	cmp	r4, r1
 800081e:	d903      	bls.n	8000828 <__aeabi_fmul+0x148>
 8000820:	2080      	movs	r0, #128	; 0x80
 8000822:	0240      	lsls	r0, r0, #9
 8000824:	4684      	mov	ip, r0
 8000826:	4466      	add	r6, ip
 8000828:	043f      	lsls	r7, r7, #16
 800082a:	0408      	lsls	r0, r1, #16
 800082c:	0c3f      	lsrs	r7, r7, #16
 800082e:	19c0      	adds	r0, r0, r7
 8000830:	0184      	lsls	r4, r0, #6
 8000832:	1e67      	subs	r7, r4, #1
 8000834:	41bc      	sbcs	r4, r7
 8000836:	0c09      	lsrs	r1, r1, #16
 8000838:	0e80      	lsrs	r0, r0, #26
 800083a:	1989      	adds	r1, r1, r6
 800083c:	4304      	orrs	r4, r0
 800083e:	0189      	lsls	r1, r1, #6
 8000840:	430c      	orrs	r4, r1
 8000842:	0109      	lsls	r1, r1, #4
 8000844:	d571      	bpl.n	800092a <__aeabi_fmul+0x24a>
 8000846:	2301      	movs	r3, #1
 8000848:	0861      	lsrs	r1, r4, #1
 800084a:	401c      	ands	r4, r3
 800084c:	430c      	orrs	r4, r1
 800084e:	002b      	movs	r3, r5
 8000850:	337f      	adds	r3, #127	; 0x7f
 8000852:	2b00      	cmp	r3, #0
 8000854:	dd51      	ble.n	80008fa <__aeabi_fmul+0x21a>
 8000856:	0761      	lsls	r1, r4, #29
 8000858:	d004      	beq.n	8000864 <__aeabi_fmul+0x184>
 800085a:	210f      	movs	r1, #15
 800085c:	4021      	ands	r1, r4
 800085e:	2904      	cmp	r1, #4
 8000860:	d000      	beq.n	8000864 <__aeabi_fmul+0x184>
 8000862:	3404      	adds	r4, #4
 8000864:	0121      	lsls	r1, r4, #4
 8000866:	d503      	bpl.n	8000870 <__aeabi_fmul+0x190>
 8000868:	4b43      	ldr	r3, [pc, #268]	; (8000978 <__aeabi_fmul+0x298>)
 800086a:	401c      	ands	r4, r3
 800086c:	002b      	movs	r3, r5
 800086e:	3380      	adds	r3, #128	; 0x80
 8000870:	2bfe      	cmp	r3, #254	; 0xfe
 8000872:	dcc1      	bgt.n	80007f8 <__aeabi_fmul+0x118>
 8000874:	01a1      	lsls	r1, r4, #6
 8000876:	0a49      	lsrs	r1, r1, #9
 8000878:	b2d8      	uxtb	r0, r3
 800087a:	e783      	b.n	8000784 <__aeabi_fmul+0xa4>
 800087c:	2c00      	cmp	r4, #0
 800087e:	d12c      	bne.n	80008da <__aeabi_fmul+0x1fa>
 8000880:	2301      	movs	r3, #1
 8000882:	4642      	mov	r2, r8
 8000884:	431e      	orrs	r6, r3
 8000886:	002b      	movs	r3, r5
 8000888:	407a      	eors	r2, r7
 800088a:	2001      	movs	r0, #1
 800088c:	b2d2      	uxtb	r2, r2
 800088e:	1c5d      	adds	r5, r3, #1
 8000890:	2e0a      	cmp	r6, #10
 8000892:	dd00      	ble.n	8000896 <__aeabi_fmul+0x1b6>
 8000894:	e757      	b.n	8000746 <__aeabi_fmul+0x66>
 8000896:	e76a      	b.n	800076e <__aeabi_fmul+0x8e>
 8000898:	2b00      	cmp	r3, #0
 800089a:	d110      	bne.n	80008be <__aeabi_fmul+0x1de>
 800089c:	2301      	movs	r3, #1
 800089e:	2604      	movs	r6, #4
 80008a0:	2500      	movs	r5, #0
 80008a2:	469a      	mov	sl, r3
 80008a4:	e738      	b.n	8000718 <__aeabi_fmul+0x38>
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d104      	bne.n	80008b4 <__aeabi_fmul+0x1d4>
 80008aa:	2302      	movs	r3, #2
 80008ac:	2608      	movs	r6, #8
 80008ae:	25ff      	movs	r5, #255	; 0xff
 80008b0:	469a      	mov	sl, r3
 80008b2:	e731      	b.n	8000718 <__aeabi_fmul+0x38>
 80008b4:	2303      	movs	r3, #3
 80008b6:	260c      	movs	r6, #12
 80008b8:	25ff      	movs	r5, #255	; 0xff
 80008ba:	469a      	mov	sl, r3
 80008bc:	e72c      	b.n	8000718 <__aeabi_fmul+0x38>
 80008be:	4648      	mov	r0, r9
 80008c0:	f002 f970 	bl	8002ba4 <__clzsi2>
 80008c4:	464a      	mov	r2, r9
 80008c6:	1f43      	subs	r3, r0, #5
 80008c8:	2576      	movs	r5, #118	; 0x76
 80008ca:	409a      	lsls	r2, r3
 80008cc:	2300      	movs	r3, #0
 80008ce:	426d      	negs	r5, r5
 80008d0:	4691      	mov	r9, r2
 80008d2:	2600      	movs	r6, #0
 80008d4:	469a      	mov	sl, r3
 80008d6:	1a2d      	subs	r5, r5, r0
 80008d8:	e71e      	b.n	8000718 <__aeabi_fmul+0x38>
 80008da:	0020      	movs	r0, r4
 80008dc:	f002 f962 	bl	8002ba4 <__clzsi2>
 80008e0:	4642      	mov	r2, r8
 80008e2:	1f43      	subs	r3, r0, #5
 80008e4:	409c      	lsls	r4, r3
 80008e6:	1a2b      	subs	r3, r5, r0
 80008e8:	3b76      	subs	r3, #118	; 0x76
 80008ea:	407a      	eors	r2, r7
 80008ec:	2000      	movs	r0, #0
 80008ee:	b2d2      	uxtb	r2, r2
 80008f0:	1c5d      	adds	r5, r3, #1
 80008f2:	2e0a      	cmp	r6, #10
 80008f4:	dd00      	ble.n	80008f8 <__aeabi_fmul+0x218>
 80008f6:	e726      	b.n	8000746 <__aeabi_fmul+0x66>
 80008f8:	e739      	b.n	800076e <__aeabi_fmul+0x8e>
 80008fa:	2101      	movs	r1, #1
 80008fc:	1acb      	subs	r3, r1, r3
 80008fe:	2b1b      	cmp	r3, #27
 8000900:	dd00      	ble.n	8000904 <__aeabi_fmul+0x224>
 8000902:	e73d      	b.n	8000780 <__aeabi_fmul+0xa0>
 8000904:	359e      	adds	r5, #158	; 0x9e
 8000906:	0021      	movs	r1, r4
 8000908:	40ac      	lsls	r4, r5
 800090a:	40d9      	lsrs	r1, r3
 800090c:	1e63      	subs	r3, r4, #1
 800090e:	419c      	sbcs	r4, r3
 8000910:	4321      	orrs	r1, r4
 8000912:	074b      	lsls	r3, r1, #29
 8000914:	d004      	beq.n	8000920 <__aeabi_fmul+0x240>
 8000916:	230f      	movs	r3, #15
 8000918:	400b      	ands	r3, r1
 800091a:	2b04      	cmp	r3, #4
 800091c:	d000      	beq.n	8000920 <__aeabi_fmul+0x240>
 800091e:	3104      	adds	r1, #4
 8000920:	014b      	lsls	r3, r1, #5
 8000922:	d504      	bpl.n	800092e <__aeabi_fmul+0x24e>
 8000924:	2001      	movs	r0, #1
 8000926:	2100      	movs	r1, #0
 8000928:	e72c      	b.n	8000784 <__aeabi_fmul+0xa4>
 800092a:	001d      	movs	r5, r3
 800092c:	e78f      	b.n	800084e <__aeabi_fmul+0x16e>
 800092e:	0189      	lsls	r1, r1, #6
 8000930:	2000      	movs	r0, #0
 8000932:	0a49      	lsrs	r1, r1, #9
 8000934:	e726      	b.n	8000784 <__aeabi_fmul+0xa4>
 8000936:	2302      	movs	r3, #2
 8000938:	2e0f      	cmp	r6, #15
 800093a:	d10c      	bne.n	8000956 <__aeabi_fmul+0x276>
 800093c:	2180      	movs	r1, #128	; 0x80
 800093e:	464b      	mov	r3, r9
 8000940:	03c9      	lsls	r1, r1, #15
 8000942:	420b      	tst	r3, r1
 8000944:	d00d      	beq.n	8000962 <__aeabi_fmul+0x282>
 8000946:	420c      	tst	r4, r1
 8000948:	d10b      	bne.n	8000962 <__aeabi_fmul+0x282>
 800094a:	4321      	orrs	r1, r4
 800094c:	0249      	lsls	r1, r1, #9
 800094e:	003a      	movs	r2, r7
 8000950:	20ff      	movs	r0, #255	; 0xff
 8000952:	0a49      	lsrs	r1, r1, #9
 8000954:	e716      	b.n	8000784 <__aeabi_fmul+0xa4>
 8000956:	2e0b      	cmp	r6, #11
 8000958:	d000      	beq.n	800095c <__aeabi_fmul+0x27c>
 800095a:	e6f7      	b.n	800074c <__aeabi_fmul+0x6c>
 800095c:	46a1      	mov	r9, r4
 800095e:	469a      	mov	sl, r3
 8000960:	e736      	b.n	80007d0 <__aeabi_fmul+0xf0>
 8000962:	2180      	movs	r1, #128	; 0x80
 8000964:	464b      	mov	r3, r9
 8000966:	03c9      	lsls	r1, r1, #15
 8000968:	4319      	orrs	r1, r3
 800096a:	0249      	lsls	r1, r1, #9
 800096c:	4642      	mov	r2, r8
 800096e:	20ff      	movs	r0, #255	; 0xff
 8000970:	0a49      	lsrs	r1, r1, #9
 8000972:	e707      	b.n	8000784 <__aeabi_fmul+0xa4>
 8000974:	2303      	movs	r3, #3
 8000976:	e7df      	b.n	8000938 <__aeabi_fmul+0x258>
 8000978:	f7ffffff 	.word	0xf7ffffff

0800097c <__aeabi_fsub>:
 800097c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800097e:	46c6      	mov	lr, r8
 8000980:	0243      	lsls	r3, r0, #9
 8000982:	0a5b      	lsrs	r3, r3, #9
 8000984:	0045      	lsls	r5, r0, #1
 8000986:	00da      	lsls	r2, r3, #3
 8000988:	0fc4      	lsrs	r4, r0, #31
 800098a:	0248      	lsls	r0, r1, #9
 800098c:	004f      	lsls	r7, r1, #1
 800098e:	4694      	mov	ip, r2
 8000990:	0a42      	lsrs	r2, r0, #9
 8000992:	001e      	movs	r6, r3
 8000994:	4690      	mov	r8, r2
 8000996:	b500      	push	{lr}
 8000998:	0e2d      	lsrs	r5, r5, #24
 800099a:	0e3f      	lsrs	r7, r7, #24
 800099c:	0fc9      	lsrs	r1, r1, #31
 800099e:	0980      	lsrs	r0, r0, #6
 80009a0:	2fff      	cmp	r7, #255	; 0xff
 80009a2:	d059      	beq.n	8000a58 <__aeabi_fsub+0xdc>
 80009a4:	2201      	movs	r2, #1
 80009a6:	4051      	eors	r1, r2
 80009a8:	428c      	cmp	r4, r1
 80009aa:	d039      	beq.n	8000a20 <__aeabi_fsub+0xa4>
 80009ac:	1bea      	subs	r2, r5, r7
 80009ae:	2a00      	cmp	r2, #0
 80009b0:	dd58      	ble.n	8000a64 <__aeabi_fsub+0xe8>
 80009b2:	2f00      	cmp	r7, #0
 80009b4:	d068      	beq.n	8000a88 <__aeabi_fsub+0x10c>
 80009b6:	2dff      	cmp	r5, #255	; 0xff
 80009b8:	d100      	bne.n	80009bc <__aeabi_fsub+0x40>
 80009ba:	e0d1      	b.n	8000b60 <__aeabi_fsub+0x1e4>
 80009bc:	2380      	movs	r3, #128	; 0x80
 80009be:	04db      	lsls	r3, r3, #19
 80009c0:	4318      	orrs	r0, r3
 80009c2:	2a1b      	cmp	r2, #27
 80009c4:	dc00      	bgt.n	80009c8 <__aeabi_fsub+0x4c>
 80009c6:	e0e3      	b.n	8000b90 <__aeabi_fsub+0x214>
 80009c8:	2301      	movs	r3, #1
 80009ca:	4662      	mov	r2, ip
 80009cc:	1ad3      	subs	r3, r2, r3
 80009ce:	015a      	lsls	r2, r3, #5
 80009d0:	d400      	bmi.n	80009d4 <__aeabi_fsub+0x58>
 80009d2:	e0ac      	b.n	8000b2e <__aeabi_fsub+0x1b2>
 80009d4:	019b      	lsls	r3, r3, #6
 80009d6:	099e      	lsrs	r6, r3, #6
 80009d8:	0030      	movs	r0, r6
 80009da:	f002 f8e3 	bl	8002ba4 <__clzsi2>
 80009de:	0033      	movs	r3, r6
 80009e0:	3805      	subs	r0, #5
 80009e2:	4083      	lsls	r3, r0
 80009e4:	4285      	cmp	r5, r0
 80009e6:	dc00      	bgt.n	80009ea <__aeabi_fsub+0x6e>
 80009e8:	e0c6      	b.n	8000b78 <__aeabi_fsub+0x1fc>
 80009ea:	4ab2      	ldr	r2, [pc, #712]	; (8000cb4 <__aeabi_fsub+0x338>)
 80009ec:	1a2d      	subs	r5, r5, r0
 80009ee:	4013      	ands	r3, r2
 80009f0:	075a      	lsls	r2, r3, #29
 80009f2:	d004      	beq.n	80009fe <__aeabi_fsub+0x82>
 80009f4:	220f      	movs	r2, #15
 80009f6:	401a      	ands	r2, r3
 80009f8:	2a04      	cmp	r2, #4
 80009fa:	d000      	beq.n	80009fe <__aeabi_fsub+0x82>
 80009fc:	3304      	adds	r3, #4
 80009fe:	015a      	lsls	r2, r3, #5
 8000a00:	d400      	bmi.n	8000a04 <__aeabi_fsub+0x88>
 8000a02:	e097      	b.n	8000b34 <__aeabi_fsub+0x1b8>
 8000a04:	1c6a      	adds	r2, r5, #1
 8000a06:	2dfe      	cmp	r5, #254	; 0xfe
 8000a08:	d100      	bne.n	8000a0c <__aeabi_fsub+0x90>
 8000a0a:	e084      	b.n	8000b16 <__aeabi_fsub+0x19a>
 8000a0c:	019b      	lsls	r3, r3, #6
 8000a0e:	0a5e      	lsrs	r6, r3, #9
 8000a10:	b2d2      	uxtb	r2, r2
 8000a12:	05d0      	lsls	r0, r2, #23
 8000a14:	4330      	orrs	r0, r6
 8000a16:	07e4      	lsls	r4, r4, #31
 8000a18:	4320      	orrs	r0, r4
 8000a1a:	bc80      	pop	{r7}
 8000a1c:	46b8      	mov	r8, r7
 8000a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a20:	1bea      	subs	r2, r5, r7
 8000a22:	2a00      	cmp	r2, #0
 8000a24:	dd41      	ble.n	8000aaa <__aeabi_fsub+0x12e>
 8000a26:	2f00      	cmp	r7, #0
 8000a28:	d06b      	beq.n	8000b02 <__aeabi_fsub+0x186>
 8000a2a:	2dff      	cmp	r5, #255	; 0xff
 8000a2c:	d100      	bne.n	8000a30 <__aeabi_fsub+0xb4>
 8000a2e:	e097      	b.n	8000b60 <__aeabi_fsub+0x1e4>
 8000a30:	2380      	movs	r3, #128	; 0x80
 8000a32:	04db      	lsls	r3, r3, #19
 8000a34:	4318      	orrs	r0, r3
 8000a36:	2a1b      	cmp	r2, #27
 8000a38:	dc00      	bgt.n	8000a3c <__aeabi_fsub+0xc0>
 8000a3a:	e0cc      	b.n	8000bd6 <__aeabi_fsub+0x25a>
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	4463      	add	r3, ip
 8000a40:	015a      	lsls	r2, r3, #5
 8000a42:	d574      	bpl.n	8000b2e <__aeabi_fsub+0x1b2>
 8000a44:	3501      	adds	r5, #1
 8000a46:	2dff      	cmp	r5, #255	; 0xff
 8000a48:	d065      	beq.n	8000b16 <__aeabi_fsub+0x19a>
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	499a      	ldr	r1, [pc, #616]	; (8000cb8 <__aeabi_fsub+0x33c>)
 8000a4e:	401a      	ands	r2, r3
 8000a50:	085b      	lsrs	r3, r3, #1
 8000a52:	400b      	ands	r3, r1
 8000a54:	4313      	orrs	r3, r2
 8000a56:	e7cb      	b.n	80009f0 <__aeabi_fsub+0x74>
 8000a58:	2800      	cmp	r0, #0
 8000a5a:	d01f      	beq.n	8000a9c <__aeabi_fsub+0x120>
 8000a5c:	428c      	cmp	r4, r1
 8000a5e:	d022      	beq.n	8000aa6 <__aeabi_fsub+0x12a>
 8000a60:	002a      	movs	r2, r5
 8000a62:	3aff      	subs	r2, #255	; 0xff
 8000a64:	2a00      	cmp	r2, #0
 8000a66:	d035      	beq.n	8000ad4 <__aeabi_fsub+0x158>
 8000a68:	1b7a      	subs	r2, r7, r5
 8000a6a:	2d00      	cmp	r5, #0
 8000a6c:	d000      	beq.n	8000a70 <__aeabi_fsub+0xf4>
 8000a6e:	e099      	b.n	8000ba4 <__aeabi_fsub+0x228>
 8000a70:	4663      	mov	r3, ip
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d100      	bne.n	8000a78 <__aeabi_fsub+0xfc>
 8000a76:	e0dd      	b.n	8000c34 <__aeabi_fsub+0x2b8>
 8000a78:	1e53      	subs	r3, r2, #1
 8000a7a:	2a01      	cmp	r2, #1
 8000a7c:	d100      	bne.n	8000a80 <__aeabi_fsub+0x104>
 8000a7e:	e105      	b.n	8000c8c <__aeabi_fsub+0x310>
 8000a80:	2aff      	cmp	r2, #255	; 0xff
 8000a82:	d06b      	beq.n	8000b5c <__aeabi_fsub+0x1e0>
 8000a84:	001a      	movs	r2, r3
 8000a86:	e094      	b.n	8000bb2 <__aeabi_fsub+0x236>
 8000a88:	2800      	cmp	r0, #0
 8000a8a:	d073      	beq.n	8000b74 <__aeabi_fsub+0x1f8>
 8000a8c:	1e51      	subs	r1, r2, #1
 8000a8e:	2a01      	cmp	r2, #1
 8000a90:	d100      	bne.n	8000a94 <__aeabi_fsub+0x118>
 8000a92:	e0df      	b.n	8000c54 <__aeabi_fsub+0x2d8>
 8000a94:	2aff      	cmp	r2, #255	; 0xff
 8000a96:	d063      	beq.n	8000b60 <__aeabi_fsub+0x1e4>
 8000a98:	000a      	movs	r2, r1
 8000a9a:	e792      	b.n	80009c2 <__aeabi_fsub+0x46>
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	4051      	eors	r1, r2
 8000aa0:	42a1      	cmp	r1, r4
 8000aa2:	d000      	beq.n	8000aa6 <__aeabi_fsub+0x12a>
 8000aa4:	e782      	b.n	80009ac <__aeabi_fsub+0x30>
 8000aa6:	002a      	movs	r2, r5
 8000aa8:	3aff      	subs	r2, #255	; 0xff
 8000aaa:	2a00      	cmp	r2, #0
 8000aac:	d036      	beq.n	8000b1c <__aeabi_fsub+0x1a0>
 8000aae:	1b7a      	subs	r2, r7, r5
 8000ab0:	2d00      	cmp	r5, #0
 8000ab2:	d100      	bne.n	8000ab6 <__aeabi_fsub+0x13a>
 8000ab4:	e0aa      	b.n	8000c0c <__aeabi_fsub+0x290>
 8000ab6:	2fff      	cmp	r7, #255	; 0xff
 8000ab8:	d100      	bne.n	8000abc <__aeabi_fsub+0x140>
 8000aba:	e0da      	b.n	8000c72 <__aeabi_fsub+0x2f6>
 8000abc:	2380      	movs	r3, #128	; 0x80
 8000abe:	4661      	mov	r1, ip
 8000ac0:	04db      	lsls	r3, r3, #19
 8000ac2:	4319      	orrs	r1, r3
 8000ac4:	468c      	mov	ip, r1
 8000ac6:	2a1b      	cmp	r2, #27
 8000ac8:	dc00      	bgt.n	8000acc <__aeabi_fsub+0x150>
 8000aca:	e0d4      	b.n	8000c76 <__aeabi_fsub+0x2fa>
 8000acc:	2301      	movs	r3, #1
 8000ace:	003d      	movs	r5, r7
 8000ad0:	181b      	adds	r3, r3, r0
 8000ad2:	e7b5      	b.n	8000a40 <__aeabi_fsub+0xc4>
 8000ad4:	27fe      	movs	r7, #254	; 0xfe
 8000ad6:	1c6a      	adds	r2, r5, #1
 8000ad8:	4217      	tst	r7, r2
 8000ada:	d171      	bne.n	8000bc0 <__aeabi_fsub+0x244>
 8000adc:	2d00      	cmp	r5, #0
 8000ade:	d000      	beq.n	8000ae2 <__aeabi_fsub+0x166>
 8000ae0:	e09e      	b.n	8000c20 <__aeabi_fsub+0x2a4>
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d100      	bne.n	8000aea <__aeabi_fsub+0x16e>
 8000ae8:	e0d5      	b.n	8000c96 <__aeabi_fsub+0x31a>
 8000aea:	2200      	movs	r2, #0
 8000aec:	2800      	cmp	r0, #0
 8000aee:	d100      	bne.n	8000af2 <__aeabi_fsub+0x176>
 8000af0:	e78f      	b.n	8000a12 <__aeabi_fsub+0x96>
 8000af2:	1a1b      	subs	r3, r3, r0
 8000af4:	015e      	lsls	r6, r3, #5
 8000af6:	d400      	bmi.n	8000afa <__aeabi_fsub+0x17e>
 8000af8:	e0d6      	b.n	8000ca8 <__aeabi_fsub+0x32c>
 8000afa:	4663      	mov	r3, ip
 8000afc:	000c      	movs	r4, r1
 8000afe:	1ac3      	subs	r3, r0, r3
 8000b00:	e776      	b.n	80009f0 <__aeabi_fsub+0x74>
 8000b02:	2800      	cmp	r0, #0
 8000b04:	d036      	beq.n	8000b74 <__aeabi_fsub+0x1f8>
 8000b06:	1e51      	subs	r1, r2, #1
 8000b08:	2a01      	cmp	r2, #1
 8000b0a:	d100      	bne.n	8000b0e <__aeabi_fsub+0x192>
 8000b0c:	e09a      	b.n	8000c44 <__aeabi_fsub+0x2c8>
 8000b0e:	2aff      	cmp	r2, #255	; 0xff
 8000b10:	d026      	beq.n	8000b60 <__aeabi_fsub+0x1e4>
 8000b12:	000a      	movs	r2, r1
 8000b14:	e78f      	b.n	8000a36 <__aeabi_fsub+0xba>
 8000b16:	22ff      	movs	r2, #255	; 0xff
 8000b18:	2600      	movs	r6, #0
 8000b1a:	e77a      	b.n	8000a12 <__aeabi_fsub+0x96>
 8000b1c:	27fe      	movs	r7, #254	; 0xfe
 8000b1e:	1c6a      	adds	r2, r5, #1
 8000b20:	4217      	tst	r7, r2
 8000b22:	d062      	beq.n	8000bea <__aeabi_fsub+0x26e>
 8000b24:	2aff      	cmp	r2, #255	; 0xff
 8000b26:	d0f6      	beq.n	8000b16 <__aeabi_fsub+0x19a>
 8000b28:	0015      	movs	r5, r2
 8000b2a:	4460      	add	r0, ip
 8000b2c:	0843      	lsrs	r3, r0, #1
 8000b2e:	075a      	lsls	r2, r3, #29
 8000b30:	d000      	beq.n	8000b34 <__aeabi_fsub+0x1b8>
 8000b32:	e75f      	b.n	80009f4 <__aeabi_fsub+0x78>
 8000b34:	08db      	lsrs	r3, r3, #3
 8000b36:	2dff      	cmp	r5, #255	; 0xff
 8000b38:	d012      	beq.n	8000b60 <__aeabi_fsub+0x1e4>
 8000b3a:	025b      	lsls	r3, r3, #9
 8000b3c:	0a5e      	lsrs	r6, r3, #9
 8000b3e:	b2ea      	uxtb	r2, r5
 8000b40:	e767      	b.n	8000a12 <__aeabi_fsub+0x96>
 8000b42:	4662      	mov	r2, ip
 8000b44:	2a00      	cmp	r2, #0
 8000b46:	d100      	bne.n	8000b4a <__aeabi_fsub+0x1ce>
 8000b48:	e093      	b.n	8000c72 <__aeabi_fsub+0x2f6>
 8000b4a:	2800      	cmp	r0, #0
 8000b4c:	d008      	beq.n	8000b60 <__aeabi_fsub+0x1e4>
 8000b4e:	2280      	movs	r2, #128	; 0x80
 8000b50:	03d2      	lsls	r2, r2, #15
 8000b52:	4213      	tst	r3, r2
 8000b54:	d004      	beq.n	8000b60 <__aeabi_fsub+0x1e4>
 8000b56:	4640      	mov	r0, r8
 8000b58:	4210      	tst	r0, r2
 8000b5a:	d101      	bne.n	8000b60 <__aeabi_fsub+0x1e4>
 8000b5c:	000c      	movs	r4, r1
 8000b5e:	4643      	mov	r3, r8
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d0d8      	beq.n	8000b16 <__aeabi_fsub+0x19a>
 8000b64:	2680      	movs	r6, #128	; 0x80
 8000b66:	03f6      	lsls	r6, r6, #15
 8000b68:	431e      	orrs	r6, r3
 8000b6a:	0276      	lsls	r6, r6, #9
 8000b6c:	22ff      	movs	r2, #255	; 0xff
 8000b6e:	0a76      	lsrs	r6, r6, #9
 8000b70:	e74f      	b.n	8000a12 <__aeabi_fsub+0x96>
 8000b72:	4643      	mov	r3, r8
 8000b74:	0015      	movs	r5, r2
 8000b76:	e7de      	b.n	8000b36 <__aeabi_fsub+0x1ba>
 8000b78:	2220      	movs	r2, #32
 8000b7a:	1b40      	subs	r0, r0, r5
 8000b7c:	3001      	adds	r0, #1
 8000b7e:	1a12      	subs	r2, r2, r0
 8000b80:	0019      	movs	r1, r3
 8000b82:	4093      	lsls	r3, r2
 8000b84:	40c1      	lsrs	r1, r0
 8000b86:	1e5a      	subs	r2, r3, #1
 8000b88:	4193      	sbcs	r3, r2
 8000b8a:	2500      	movs	r5, #0
 8000b8c:	430b      	orrs	r3, r1
 8000b8e:	e72f      	b.n	80009f0 <__aeabi_fsub+0x74>
 8000b90:	2320      	movs	r3, #32
 8000b92:	1a9b      	subs	r3, r3, r2
 8000b94:	0001      	movs	r1, r0
 8000b96:	4098      	lsls	r0, r3
 8000b98:	0003      	movs	r3, r0
 8000b9a:	40d1      	lsrs	r1, r2
 8000b9c:	1e5a      	subs	r2, r3, #1
 8000b9e:	4193      	sbcs	r3, r2
 8000ba0:	430b      	orrs	r3, r1
 8000ba2:	e712      	b.n	80009ca <__aeabi_fsub+0x4e>
 8000ba4:	2fff      	cmp	r7, #255	; 0xff
 8000ba6:	d0d9      	beq.n	8000b5c <__aeabi_fsub+0x1e0>
 8000ba8:	2380      	movs	r3, #128	; 0x80
 8000baa:	4664      	mov	r4, ip
 8000bac:	04db      	lsls	r3, r3, #19
 8000bae:	431c      	orrs	r4, r3
 8000bb0:	46a4      	mov	ip, r4
 8000bb2:	2a1b      	cmp	r2, #27
 8000bb4:	dd52      	ble.n	8000c5c <__aeabi_fsub+0x2e0>
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	000c      	movs	r4, r1
 8000bba:	003d      	movs	r5, r7
 8000bbc:	1ac3      	subs	r3, r0, r3
 8000bbe:	e706      	b.n	80009ce <__aeabi_fsub+0x52>
 8000bc0:	4663      	mov	r3, ip
 8000bc2:	1a1e      	subs	r6, r3, r0
 8000bc4:	0173      	lsls	r3, r6, #5
 8000bc6:	d439      	bmi.n	8000c3c <__aeabi_fsub+0x2c0>
 8000bc8:	2e00      	cmp	r6, #0
 8000bca:	d000      	beq.n	8000bce <__aeabi_fsub+0x252>
 8000bcc:	e704      	b.n	80009d8 <__aeabi_fsub+0x5c>
 8000bce:	2400      	movs	r4, #0
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	2600      	movs	r6, #0
 8000bd4:	e71d      	b.n	8000a12 <__aeabi_fsub+0x96>
 8000bd6:	2320      	movs	r3, #32
 8000bd8:	1a9b      	subs	r3, r3, r2
 8000bda:	0001      	movs	r1, r0
 8000bdc:	4098      	lsls	r0, r3
 8000bde:	0003      	movs	r3, r0
 8000be0:	40d1      	lsrs	r1, r2
 8000be2:	1e5a      	subs	r2, r3, #1
 8000be4:	4193      	sbcs	r3, r2
 8000be6:	430b      	orrs	r3, r1
 8000be8:	e729      	b.n	8000a3e <__aeabi_fsub+0xc2>
 8000bea:	2d00      	cmp	r5, #0
 8000bec:	d1a9      	bne.n	8000b42 <__aeabi_fsub+0x1c6>
 8000bee:	4663      	mov	r3, ip
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d056      	beq.n	8000ca2 <__aeabi_fsub+0x326>
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	2800      	cmp	r0, #0
 8000bf8:	d100      	bne.n	8000bfc <__aeabi_fsub+0x280>
 8000bfa:	e70a      	b.n	8000a12 <__aeabi_fsub+0x96>
 8000bfc:	0003      	movs	r3, r0
 8000bfe:	4463      	add	r3, ip
 8000c00:	015a      	lsls	r2, r3, #5
 8000c02:	d594      	bpl.n	8000b2e <__aeabi_fsub+0x1b2>
 8000c04:	4a2b      	ldr	r2, [pc, #172]	; (8000cb4 <__aeabi_fsub+0x338>)
 8000c06:	3501      	adds	r5, #1
 8000c08:	4013      	ands	r3, r2
 8000c0a:	e790      	b.n	8000b2e <__aeabi_fsub+0x1b2>
 8000c0c:	4663      	mov	r3, ip
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d0af      	beq.n	8000b72 <__aeabi_fsub+0x1f6>
 8000c12:	1e53      	subs	r3, r2, #1
 8000c14:	2a01      	cmp	r2, #1
 8000c16:	d015      	beq.n	8000c44 <__aeabi_fsub+0x2c8>
 8000c18:	2aff      	cmp	r2, #255	; 0xff
 8000c1a:	d02a      	beq.n	8000c72 <__aeabi_fsub+0x2f6>
 8000c1c:	001a      	movs	r2, r3
 8000c1e:	e752      	b.n	8000ac6 <__aeabi_fsub+0x14a>
 8000c20:	4662      	mov	r2, ip
 8000c22:	2a00      	cmp	r2, #0
 8000c24:	d191      	bne.n	8000b4a <__aeabi_fsub+0x1ce>
 8000c26:	2800      	cmp	r0, #0
 8000c28:	d198      	bne.n	8000b5c <__aeabi_fsub+0x1e0>
 8000c2a:	2680      	movs	r6, #128	; 0x80
 8000c2c:	2400      	movs	r4, #0
 8000c2e:	22ff      	movs	r2, #255	; 0xff
 8000c30:	03f6      	lsls	r6, r6, #15
 8000c32:	e6ee      	b.n	8000a12 <__aeabi_fsub+0x96>
 8000c34:	000c      	movs	r4, r1
 8000c36:	4643      	mov	r3, r8
 8000c38:	0015      	movs	r5, r2
 8000c3a:	e77c      	b.n	8000b36 <__aeabi_fsub+0x1ba>
 8000c3c:	4663      	mov	r3, ip
 8000c3e:	000c      	movs	r4, r1
 8000c40:	1ac6      	subs	r6, r0, r3
 8000c42:	e6c9      	b.n	80009d8 <__aeabi_fsub+0x5c>
 8000c44:	0003      	movs	r3, r0
 8000c46:	4463      	add	r3, ip
 8000c48:	2501      	movs	r5, #1
 8000c4a:	015a      	lsls	r2, r3, #5
 8000c4c:	d400      	bmi.n	8000c50 <__aeabi_fsub+0x2d4>
 8000c4e:	e76e      	b.n	8000b2e <__aeabi_fsub+0x1b2>
 8000c50:	2502      	movs	r5, #2
 8000c52:	e6fa      	b.n	8000a4a <__aeabi_fsub+0xce>
 8000c54:	4663      	mov	r3, ip
 8000c56:	2501      	movs	r5, #1
 8000c58:	1a1b      	subs	r3, r3, r0
 8000c5a:	e6b8      	b.n	80009ce <__aeabi_fsub+0x52>
 8000c5c:	4664      	mov	r4, ip
 8000c5e:	2320      	movs	r3, #32
 8000c60:	40d4      	lsrs	r4, r2
 8000c62:	1a9b      	subs	r3, r3, r2
 8000c64:	4662      	mov	r2, ip
 8000c66:	409a      	lsls	r2, r3
 8000c68:	0013      	movs	r3, r2
 8000c6a:	1e5a      	subs	r2, r3, #1
 8000c6c:	4193      	sbcs	r3, r2
 8000c6e:	4323      	orrs	r3, r4
 8000c70:	e7a2      	b.n	8000bb8 <__aeabi_fsub+0x23c>
 8000c72:	4643      	mov	r3, r8
 8000c74:	e774      	b.n	8000b60 <__aeabi_fsub+0x1e4>
 8000c76:	4661      	mov	r1, ip
 8000c78:	2320      	movs	r3, #32
 8000c7a:	40d1      	lsrs	r1, r2
 8000c7c:	1a9b      	subs	r3, r3, r2
 8000c7e:	4662      	mov	r2, ip
 8000c80:	409a      	lsls	r2, r3
 8000c82:	0013      	movs	r3, r2
 8000c84:	1e5a      	subs	r2, r3, #1
 8000c86:	4193      	sbcs	r3, r2
 8000c88:	430b      	orrs	r3, r1
 8000c8a:	e720      	b.n	8000ace <__aeabi_fsub+0x152>
 8000c8c:	4663      	mov	r3, ip
 8000c8e:	000c      	movs	r4, r1
 8000c90:	2501      	movs	r5, #1
 8000c92:	1ac3      	subs	r3, r0, r3
 8000c94:	e69b      	b.n	80009ce <__aeabi_fsub+0x52>
 8000c96:	2800      	cmp	r0, #0
 8000c98:	d099      	beq.n	8000bce <__aeabi_fsub+0x252>
 8000c9a:	000c      	movs	r4, r1
 8000c9c:	4646      	mov	r6, r8
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	e6b7      	b.n	8000a12 <__aeabi_fsub+0x96>
 8000ca2:	4646      	mov	r6, r8
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	e6b4      	b.n	8000a12 <__aeabi_fsub+0x96>
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d000      	beq.n	8000cae <__aeabi_fsub+0x332>
 8000cac:	e73f      	b.n	8000b2e <__aeabi_fsub+0x1b2>
 8000cae:	2400      	movs	r4, #0
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	e6ae      	b.n	8000a12 <__aeabi_fsub+0x96>
 8000cb4:	fbffffff 	.word	0xfbffffff
 8000cb8:	7dffffff 	.word	0x7dffffff

08000cbc <__aeabi_f2iz>:
 8000cbc:	0241      	lsls	r1, r0, #9
 8000cbe:	0042      	lsls	r2, r0, #1
 8000cc0:	0fc3      	lsrs	r3, r0, #31
 8000cc2:	0a49      	lsrs	r1, r1, #9
 8000cc4:	2000      	movs	r0, #0
 8000cc6:	0e12      	lsrs	r2, r2, #24
 8000cc8:	2a7e      	cmp	r2, #126	; 0x7e
 8000cca:	dd03      	ble.n	8000cd4 <__aeabi_f2iz+0x18>
 8000ccc:	2a9d      	cmp	r2, #157	; 0x9d
 8000cce:	dd02      	ble.n	8000cd6 <__aeabi_f2iz+0x1a>
 8000cd0:	4a09      	ldr	r2, [pc, #36]	; (8000cf8 <__aeabi_f2iz+0x3c>)
 8000cd2:	1898      	adds	r0, r3, r2
 8000cd4:	4770      	bx	lr
 8000cd6:	2080      	movs	r0, #128	; 0x80
 8000cd8:	0400      	lsls	r0, r0, #16
 8000cda:	4301      	orrs	r1, r0
 8000cdc:	2a95      	cmp	r2, #149	; 0x95
 8000cde:	dc07      	bgt.n	8000cf0 <__aeabi_f2iz+0x34>
 8000ce0:	2096      	movs	r0, #150	; 0x96
 8000ce2:	1a82      	subs	r2, r0, r2
 8000ce4:	40d1      	lsrs	r1, r2
 8000ce6:	4248      	negs	r0, r1
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d1f3      	bne.n	8000cd4 <__aeabi_f2iz+0x18>
 8000cec:	0008      	movs	r0, r1
 8000cee:	e7f1      	b.n	8000cd4 <__aeabi_f2iz+0x18>
 8000cf0:	3a96      	subs	r2, #150	; 0x96
 8000cf2:	4091      	lsls	r1, r2
 8000cf4:	e7f7      	b.n	8000ce6 <__aeabi_f2iz+0x2a>
 8000cf6:	46c0      	nop			; (mov r8, r8)
 8000cf8:	7fffffff 	.word	0x7fffffff

08000cfc <__aeabi_i2f>:
 8000cfc:	b570      	push	{r4, r5, r6, lr}
 8000cfe:	2800      	cmp	r0, #0
 8000d00:	d013      	beq.n	8000d2a <__aeabi_i2f+0x2e>
 8000d02:	17c3      	asrs	r3, r0, #31
 8000d04:	18c5      	adds	r5, r0, r3
 8000d06:	405d      	eors	r5, r3
 8000d08:	0fc4      	lsrs	r4, r0, #31
 8000d0a:	0028      	movs	r0, r5
 8000d0c:	f001 ff4a 	bl	8002ba4 <__clzsi2>
 8000d10:	239e      	movs	r3, #158	; 0x9e
 8000d12:	0001      	movs	r1, r0
 8000d14:	1a1b      	subs	r3, r3, r0
 8000d16:	2b96      	cmp	r3, #150	; 0x96
 8000d18:	dc0f      	bgt.n	8000d3a <__aeabi_i2f+0x3e>
 8000d1a:	2808      	cmp	r0, #8
 8000d1c:	d031      	beq.n	8000d82 <__aeabi_i2f+0x86>
 8000d1e:	3908      	subs	r1, #8
 8000d20:	408d      	lsls	r5, r1
 8000d22:	026d      	lsls	r5, r5, #9
 8000d24:	0a6d      	lsrs	r5, r5, #9
 8000d26:	b2d8      	uxtb	r0, r3
 8000d28:	e002      	b.n	8000d30 <__aeabi_i2f+0x34>
 8000d2a:	2400      	movs	r4, #0
 8000d2c:	2000      	movs	r0, #0
 8000d2e:	2500      	movs	r5, #0
 8000d30:	05c0      	lsls	r0, r0, #23
 8000d32:	4328      	orrs	r0, r5
 8000d34:	07e4      	lsls	r4, r4, #31
 8000d36:	4320      	orrs	r0, r4
 8000d38:	bd70      	pop	{r4, r5, r6, pc}
 8000d3a:	2b99      	cmp	r3, #153	; 0x99
 8000d3c:	dd0c      	ble.n	8000d58 <__aeabi_i2f+0x5c>
 8000d3e:	2205      	movs	r2, #5
 8000d40:	1a12      	subs	r2, r2, r0
 8000d42:	0028      	movs	r0, r5
 8000d44:	40d0      	lsrs	r0, r2
 8000d46:	0002      	movs	r2, r0
 8000d48:	0008      	movs	r0, r1
 8000d4a:	301b      	adds	r0, #27
 8000d4c:	4085      	lsls	r5, r0
 8000d4e:	0028      	movs	r0, r5
 8000d50:	1e45      	subs	r5, r0, #1
 8000d52:	41a8      	sbcs	r0, r5
 8000d54:	4302      	orrs	r2, r0
 8000d56:	0015      	movs	r5, r2
 8000d58:	2905      	cmp	r1, #5
 8000d5a:	dc16      	bgt.n	8000d8a <__aeabi_i2f+0x8e>
 8000d5c:	002a      	movs	r2, r5
 8000d5e:	480f      	ldr	r0, [pc, #60]	; (8000d9c <__aeabi_i2f+0xa0>)
 8000d60:	4002      	ands	r2, r0
 8000d62:	076e      	lsls	r6, r5, #29
 8000d64:	d009      	beq.n	8000d7a <__aeabi_i2f+0x7e>
 8000d66:	260f      	movs	r6, #15
 8000d68:	4035      	ands	r5, r6
 8000d6a:	2d04      	cmp	r5, #4
 8000d6c:	d005      	beq.n	8000d7a <__aeabi_i2f+0x7e>
 8000d6e:	3204      	adds	r2, #4
 8000d70:	0155      	lsls	r5, r2, #5
 8000d72:	d502      	bpl.n	8000d7a <__aeabi_i2f+0x7e>
 8000d74:	239f      	movs	r3, #159	; 0x9f
 8000d76:	4002      	ands	r2, r0
 8000d78:	1a5b      	subs	r3, r3, r1
 8000d7a:	0192      	lsls	r2, r2, #6
 8000d7c:	0a55      	lsrs	r5, r2, #9
 8000d7e:	b2d8      	uxtb	r0, r3
 8000d80:	e7d6      	b.n	8000d30 <__aeabi_i2f+0x34>
 8000d82:	026d      	lsls	r5, r5, #9
 8000d84:	2096      	movs	r0, #150	; 0x96
 8000d86:	0a6d      	lsrs	r5, r5, #9
 8000d88:	e7d2      	b.n	8000d30 <__aeabi_i2f+0x34>
 8000d8a:	1f4a      	subs	r2, r1, #5
 8000d8c:	4095      	lsls	r5, r2
 8000d8e:	002a      	movs	r2, r5
 8000d90:	4802      	ldr	r0, [pc, #8]	; (8000d9c <__aeabi_i2f+0xa0>)
 8000d92:	4002      	ands	r2, r0
 8000d94:	076e      	lsls	r6, r5, #29
 8000d96:	d0f0      	beq.n	8000d7a <__aeabi_i2f+0x7e>
 8000d98:	e7e5      	b.n	8000d66 <__aeabi_i2f+0x6a>
 8000d9a:	46c0      	nop			; (mov r8, r8)
 8000d9c:	fbffffff 	.word	0xfbffffff

08000da0 <__aeabi_ui2f>:
 8000da0:	b570      	push	{r4, r5, r6, lr}
 8000da2:	1e04      	subs	r4, r0, #0
 8000da4:	d00e      	beq.n	8000dc4 <__aeabi_ui2f+0x24>
 8000da6:	f001 fefd 	bl	8002ba4 <__clzsi2>
 8000daa:	239e      	movs	r3, #158	; 0x9e
 8000dac:	0001      	movs	r1, r0
 8000dae:	1a1b      	subs	r3, r3, r0
 8000db0:	2b96      	cmp	r3, #150	; 0x96
 8000db2:	dc0c      	bgt.n	8000dce <__aeabi_ui2f+0x2e>
 8000db4:	2808      	cmp	r0, #8
 8000db6:	d02c      	beq.n	8000e12 <__aeabi_ui2f+0x72>
 8000db8:	3908      	subs	r1, #8
 8000dba:	408c      	lsls	r4, r1
 8000dbc:	0264      	lsls	r4, r4, #9
 8000dbe:	0a64      	lsrs	r4, r4, #9
 8000dc0:	b2d8      	uxtb	r0, r3
 8000dc2:	e001      	b.n	8000dc8 <__aeabi_ui2f+0x28>
 8000dc4:	2000      	movs	r0, #0
 8000dc6:	2400      	movs	r4, #0
 8000dc8:	05c0      	lsls	r0, r0, #23
 8000dca:	4320      	orrs	r0, r4
 8000dcc:	bd70      	pop	{r4, r5, r6, pc}
 8000dce:	2b99      	cmp	r3, #153	; 0x99
 8000dd0:	dd0a      	ble.n	8000de8 <__aeabi_ui2f+0x48>
 8000dd2:	0002      	movs	r2, r0
 8000dd4:	0020      	movs	r0, r4
 8000dd6:	321b      	adds	r2, #27
 8000dd8:	4090      	lsls	r0, r2
 8000dda:	0002      	movs	r2, r0
 8000ddc:	1e50      	subs	r0, r2, #1
 8000dde:	4182      	sbcs	r2, r0
 8000de0:	2005      	movs	r0, #5
 8000de2:	1a40      	subs	r0, r0, r1
 8000de4:	40c4      	lsrs	r4, r0
 8000de6:	4314      	orrs	r4, r2
 8000de8:	2905      	cmp	r1, #5
 8000dea:	dc16      	bgt.n	8000e1a <__aeabi_ui2f+0x7a>
 8000dec:	0022      	movs	r2, r4
 8000dee:	480f      	ldr	r0, [pc, #60]	; (8000e2c <__aeabi_ui2f+0x8c>)
 8000df0:	4002      	ands	r2, r0
 8000df2:	0765      	lsls	r5, r4, #29
 8000df4:	d009      	beq.n	8000e0a <__aeabi_ui2f+0x6a>
 8000df6:	250f      	movs	r5, #15
 8000df8:	402c      	ands	r4, r5
 8000dfa:	2c04      	cmp	r4, #4
 8000dfc:	d005      	beq.n	8000e0a <__aeabi_ui2f+0x6a>
 8000dfe:	3204      	adds	r2, #4
 8000e00:	0154      	lsls	r4, r2, #5
 8000e02:	d502      	bpl.n	8000e0a <__aeabi_ui2f+0x6a>
 8000e04:	239f      	movs	r3, #159	; 0x9f
 8000e06:	4002      	ands	r2, r0
 8000e08:	1a5b      	subs	r3, r3, r1
 8000e0a:	0192      	lsls	r2, r2, #6
 8000e0c:	0a54      	lsrs	r4, r2, #9
 8000e0e:	b2d8      	uxtb	r0, r3
 8000e10:	e7da      	b.n	8000dc8 <__aeabi_ui2f+0x28>
 8000e12:	0264      	lsls	r4, r4, #9
 8000e14:	2096      	movs	r0, #150	; 0x96
 8000e16:	0a64      	lsrs	r4, r4, #9
 8000e18:	e7d6      	b.n	8000dc8 <__aeabi_ui2f+0x28>
 8000e1a:	1f4a      	subs	r2, r1, #5
 8000e1c:	4094      	lsls	r4, r2
 8000e1e:	0022      	movs	r2, r4
 8000e20:	4802      	ldr	r0, [pc, #8]	; (8000e2c <__aeabi_ui2f+0x8c>)
 8000e22:	4002      	ands	r2, r0
 8000e24:	0765      	lsls	r5, r4, #29
 8000e26:	d0f0      	beq.n	8000e0a <__aeabi_ui2f+0x6a>
 8000e28:	e7e5      	b.n	8000df6 <__aeabi_ui2f+0x56>
 8000e2a:	46c0      	nop			; (mov r8, r8)
 8000e2c:	fbffffff 	.word	0xfbffffff

08000e30 <__aeabi_dadd>:
 8000e30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e32:	464f      	mov	r7, r9
 8000e34:	4646      	mov	r6, r8
 8000e36:	46d6      	mov	lr, sl
 8000e38:	0004      	movs	r4, r0
 8000e3a:	b5c0      	push	{r6, r7, lr}
 8000e3c:	001f      	movs	r7, r3
 8000e3e:	030b      	lsls	r3, r1, #12
 8000e40:	0010      	movs	r0, r2
 8000e42:	004e      	lsls	r6, r1, #1
 8000e44:	0a5b      	lsrs	r3, r3, #9
 8000e46:	0fcd      	lsrs	r5, r1, #31
 8000e48:	0f61      	lsrs	r1, r4, #29
 8000e4a:	007a      	lsls	r2, r7, #1
 8000e4c:	4319      	orrs	r1, r3
 8000e4e:	00e3      	lsls	r3, r4, #3
 8000e50:	033c      	lsls	r4, r7, #12
 8000e52:	0fff      	lsrs	r7, r7, #31
 8000e54:	46bc      	mov	ip, r7
 8000e56:	0a64      	lsrs	r4, r4, #9
 8000e58:	0f47      	lsrs	r7, r0, #29
 8000e5a:	4327      	orrs	r7, r4
 8000e5c:	0d76      	lsrs	r6, r6, #21
 8000e5e:	0d52      	lsrs	r2, r2, #21
 8000e60:	00c0      	lsls	r0, r0, #3
 8000e62:	46b9      	mov	r9, r7
 8000e64:	4680      	mov	r8, r0
 8000e66:	1ab7      	subs	r7, r6, r2
 8000e68:	4565      	cmp	r5, ip
 8000e6a:	d100      	bne.n	8000e6e <__aeabi_dadd+0x3e>
 8000e6c:	e09b      	b.n	8000fa6 <__aeabi_dadd+0x176>
 8000e6e:	2f00      	cmp	r7, #0
 8000e70:	dc00      	bgt.n	8000e74 <__aeabi_dadd+0x44>
 8000e72:	e084      	b.n	8000f7e <__aeabi_dadd+0x14e>
 8000e74:	2a00      	cmp	r2, #0
 8000e76:	d100      	bne.n	8000e7a <__aeabi_dadd+0x4a>
 8000e78:	e0be      	b.n	8000ff8 <__aeabi_dadd+0x1c8>
 8000e7a:	4ac8      	ldr	r2, [pc, #800]	; (800119c <__aeabi_dadd+0x36c>)
 8000e7c:	4296      	cmp	r6, r2
 8000e7e:	d100      	bne.n	8000e82 <__aeabi_dadd+0x52>
 8000e80:	e124      	b.n	80010cc <__aeabi_dadd+0x29c>
 8000e82:	2280      	movs	r2, #128	; 0x80
 8000e84:	464c      	mov	r4, r9
 8000e86:	0412      	lsls	r2, r2, #16
 8000e88:	4314      	orrs	r4, r2
 8000e8a:	46a1      	mov	r9, r4
 8000e8c:	2f38      	cmp	r7, #56	; 0x38
 8000e8e:	dd00      	ble.n	8000e92 <__aeabi_dadd+0x62>
 8000e90:	e167      	b.n	8001162 <__aeabi_dadd+0x332>
 8000e92:	2f1f      	cmp	r7, #31
 8000e94:	dd00      	ble.n	8000e98 <__aeabi_dadd+0x68>
 8000e96:	e1d6      	b.n	8001246 <__aeabi_dadd+0x416>
 8000e98:	2220      	movs	r2, #32
 8000e9a:	464c      	mov	r4, r9
 8000e9c:	1bd2      	subs	r2, r2, r7
 8000e9e:	4094      	lsls	r4, r2
 8000ea0:	46a2      	mov	sl, r4
 8000ea2:	4644      	mov	r4, r8
 8000ea4:	40fc      	lsrs	r4, r7
 8000ea6:	0020      	movs	r0, r4
 8000ea8:	4654      	mov	r4, sl
 8000eaa:	4304      	orrs	r4, r0
 8000eac:	4640      	mov	r0, r8
 8000eae:	4090      	lsls	r0, r2
 8000eb0:	1e42      	subs	r2, r0, #1
 8000eb2:	4190      	sbcs	r0, r2
 8000eb4:	464a      	mov	r2, r9
 8000eb6:	40fa      	lsrs	r2, r7
 8000eb8:	4304      	orrs	r4, r0
 8000eba:	1a89      	subs	r1, r1, r2
 8000ebc:	1b1c      	subs	r4, r3, r4
 8000ebe:	42a3      	cmp	r3, r4
 8000ec0:	4192      	sbcs	r2, r2
 8000ec2:	4252      	negs	r2, r2
 8000ec4:	1a8b      	subs	r3, r1, r2
 8000ec6:	469a      	mov	sl, r3
 8000ec8:	4653      	mov	r3, sl
 8000eca:	021b      	lsls	r3, r3, #8
 8000ecc:	d400      	bmi.n	8000ed0 <__aeabi_dadd+0xa0>
 8000ece:	e0d4      	b.n	800107a <__aeabi_dadd+0x24a>
 8000ed0:	4653      	mov	r3, sl
 8000ed2:	025a      	lsls	r2, r3, #9
 8000ed4:	0a53      	lsrs	r3, r2, #9
 8000ed6:	469a      	mov	sl, r3
 8000ed8:	4653      	mov	r3, sl
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d100      	bne.n	8000ee0 <__aeabi_dadd+0xb0>
 8000ede:	e104      	b.n	80010ea <__aeabi_dadd+0x2ba>
 8000ee0:	4650      	mov	r0, sl
 8000ee2:	f001 fe5f 	bl	8002ba4 <__clzsi2>
 8000ee6:	0003      	movs	r3, r0
 8000ee8:	3b08      	subs	r3, #8
 8000eea:	2220      	movs	r2, #32
 8000eec:	0020      	movs	r0, r4
 8000eee:	1ad2      	subs	r2, r2, r3
 8000ef0:	4651      	mov	r1, sl
 8000ef2:	40d0      	lsrs	r0, r2
 8000ef4:	4099      	lsls	r1, r3
 8000ef6:	0002      	movs	r2, r0
 8000ef8:	409c      	lsls	r4, r3
 8000efa:	430a      	orrs	r2, r1
 8000efc:	42b3      	cmp	r3, r6
 8000efe:	da00      	bge.n	8000f02 <__aeabi_dadd+0xd2>
 8000f00:	e102      	b.n	8001108 <__aeabi_dadd+0x2d8>
 8000f02:	1b9b      	subs	r3, r3, r6
 8000f04:	1c59      	adds	r1, r3, #1
 8000f06:	291f      	cmp	r1, #31
 8000f08:	dd00      	ble.n	8000f0c <__aeabi_dadd+0xdc>
 8000f0a:	e0a7      	b.n	800105c <__aeabi_dadd+0x22c>
 8000f0c:	2320      	movs	r3, #32
 8000f0e:	0010      	movs	r0, r2
 8000f10:	0026      	movs	r6, r4
 8000f12:	1a5b      	subs	r3, r3, r1
 8000f14:	409c      	lsls	r4, r3
 8000f16:	4098      	lsls	r0, r3
 8000f18:	40ce      	lsrs	r6, r1
 8000f1a:	40ca      	lsrs	r2, r1
 8000f1c:	1e63      	subs	r3, r4, #1
 8000f1e:	419c      	sbcs	r4, r3
 8000f20:	4330      	orrs	r0, r6
 8000f22:	4692      	mov	sl, r2
 8000f24:	2600      	movs	r6, #0
 8000f26:	4304      	orrs	r4, r0
 8000f28:	0763      	lsls	r3, r4, #29
 8000f2a:	d009      	beq.n	8000f40 <__aeabi_dadd+0x110>
 8000f2c:	230f      	movs	r3, #15
 8000f2e:	4023      	ands	r3, r4
 8000f30:	2b04      	cmp	r3, #4
 8000f32:	d005      	beq.n	8000f40 <__aeabi_dadd+0x110>
 8000f34:	1d23      	adds	r3, r4, #4
 8000f36:	42a3      	cmp	r3, r4
 8000f38:	41a4      	sbcs	r4, r4
 8000f3a:	4264      	negs	r4, r4
 8000f3c:	44a2      	add	sl, r4
 8000f3e:	001c      	movs	r4, r3
 8000f40:	4653      	mov	r3, sl
 8000f42:	021b      	lsls	r3, r3, #8
 8000f44:	d400      	bmi.n	8000f48 <__aeabi_dadd+0x118>
 8000f46:	e09b      	b.n	8001080 <__aeabi_dadd+0x250>
 8000f48:	4b94      	ldr	r3, [pc, #592]	; (800119c <__aeabi_dadd+0x36c>)
 8000f4a:	3601      	adds	r6, #1
 8000f4c:	429e      	cmp	r6, r3
 8000f4e:	d100      	bne.n	8000f52 <__aeabi_dadd+0x122>
 8000f50:	e0b8      	b.n	80010c4 <__aeabi_dadd+0x294>
 8000f52:	4653      	mov	r3, sl
 8000f54:	4992      	ldr	r1, [pc, #584]	; (80011a0 <__aeabi_dadd+0x370>)
 8000f56:	08e4      	lsrs	r4, r4, #3
 8000f58:	400b      	ands	r3, r1
 8000f5a:	0019      	movs	r1, r3
 8000f5c:	075b      	lsls	r3, r3, #29
 8000f5e:	4323      	orrs	r3, r4
 8000f60:	0572      	lsls	r2, r6, #21
 8000f62:	024c      	lsls	r4, r1, #9
 8000f64:	0b24      	lsrs	r4, r4, #12
 8000f66:	0d52      	lsrs	r2, r2, #21
 8000f68:	0512      	lsls	r2, r2, #20
 8000f6a:	07ed      	lsls	r5, r5, #31
 8000f6c:	4322      	orrs	r2, r4
 8000f6e:	432a      	orrs	r2, r5
 8000f70:	0018      	movs	r0, r3
 8000f72:	0011      	movs	r1, r2
 8000f74:	bce0      	pop	{r5, r6, r7}
 8000f76:	46ba      	mov	sl, r7
 8000f78:	46b1      	mov	r9, r6
 8000f7a:	46a8      	mov	r8, r5
 8000f7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f7e:	2f00      	cmp	r7, #0
 8000f80:	d048      	beq.n	8001014 <__aeabi_dadd+0x1e4>
 8000f82:	1b97      	subs	r7, r2, r6
 8000f84:	2e00      	cmp	r6, #0
 8000f86:	d000      	beq.n	8000f8a <__aeabi_dadd+0x15a>
 8000f88:	e10e      	b.n	80011a8 <__aeabi_dadd+0x378>
 8000f8a:	000c      	movs	r4, r1
 8000f8c:	431c      	orrs	r4, r3
 8000f8e:	d100      	bne.n	8000f92 <__aeabi_dadd+0x162>
 8000f90:	e1b7      	b.n	8001302 <__aeabi_dadd+0x4d2>
 8000f92:	1e7c      	subs	r4, r7, #1
 8000f94:	2f01      	cmp	r7, #1
 8000f96:	d100      	bne.n	8000f9a <__aeabi_dadd+0x16a>
 8000f98:	e226      	b.n	80013e8 <__aeabi_dadd+0x5b8>
 8000f9a:	4d80      	ldr	r5, [pc, #512]	; (800119c <__aeabi_dadd+0x36c>)
 8000f9c:	42af      	cmp	r7, r5
 8000f9e:	d100      	bne.n	8000fa2 <__aeabi_dadd+0x172>
 8000fa0:	e1d5      	b.n	800134e <__aeabi_dadd+0x51e>
 8000fa2:	0027      	movs	r7, r4
 8000fa4:	e107      	b.n	80011b6 <__aeabi_dadd+0x386>
 8000fa6:	2f00      	cmp	r7, #0
 8000fa8:	dc00      	bgt.n	8000fac <__aeabi_dadd+0x17c>
 8000faa:	e0b2      	b.n	8001112 <__aeabi_dadd+0x2e2>
 8000fac:	2a00      	cmp	r2, #0
 8000fae:	d047      	beq.n	8001040 <__aeabi_dadd+0x210>
 8000fb0:	4a7a      	ldr	r2, [pc, #488]	; (800119c <__aeabi_dadd+0x36c>)
 8000fb2:	4296      	cmp	r6, r2
 8000fb4:	d100      	bne.n	8000fb8 <__aeabi_dadd+0x188>
 8000fb6:	e089      	b.n	80010cc <__aeabi_dadd+0x29c>
 8000fb8:	2280      	movs	r2, #128	; 0x80
 8000fba:	464c      	mov	r4, r9
 8000fbc:	0412      	lsls	r2, r2, #16
 8000fbe:	4314      	orrs	r4, r2
 8000fc0:	46a1      	mov	r9, r4
 8000fc2:	2f38      	cmp	r7, #56	; 0x38
 8000fc4:	dc6b      	bgt.n	800109e <__aeabi_dadd+0x26e>
 8000fc6:	2f1f      	cmp	r7, #31
 8000fc8:	dc00      	bgt.n	8000fcc <__aeabi_dadd+0x19c>
 8000fca:	e16e      	b.n	80012aa <__aeabi_dadd+0x47a>
 8000fcc:	003a      	movs	r2, r7
 8000fce:	4648      	mov	r0, r9
 8000fd0:	3a20      	subs	r2, #32
 8000fd2:	40d0      	lsrs	r0, r2
 8000fd4:	4684      	mov	ip, r0
 8000fd6:	2f20      	cmp	r7, #32
 8000fd8:	d007      	beq.n	8000fea <__aeabi_dadd+0x1ba>
 8000fda:	2240      	movs	r2, #64	; 0x40
 8000fdc:	4648      	mov	r0, r9
 8000fde:	1bd2      	subs	r2, r2, r7
 8000fe0:	4090      	lsls	r0, r2
 8000fe2:	0002      	movs	r2, r0
 8000fe4:	4640      	mov	r0, r8
 8000fe6:	4310      	orrs	r0, r2
 8000fe8:	4680      	mov	r8, r0
 8000fea:	4640      	mov	r0, r8
 8000fec:	1e42      	subs	r2, r0, #1
 8000fee:	4190      	sbcs	r0, r2
 8000ff0:	4662      	mov	r2, ip
 8000ff2:	0004      	movs	r4, r0
 8000ff4:	4314      	orrs	r4, r2
 8000ff6:	e057      	b.n	80010a8 <__aeabi_dadd+0x278>
 8000ff8:	464a      	mov	r2, r9
 8000ffa:	4302      	orrs	r2, r0
 8000ffc:	d100      	bne.n	8001000 <__aeabi_dadd+0x1d0>
 8000ffe:	e103      	b.n	8001208 <__aeabi_dadd+0x3d8>
 8001000:	1e7a      	subs	r2, r7, #1
 8001002:	2f01      	cmp	r7, #1
 8001004:	d100      	bne.n	8001008 <__aeabi_dadd+0x1d8>
 8001006:	e193      	b.n	8001330 <__aeabi_dadd+0x500>
 8001008:	4c64      	ldr	r4, [pc, #400]	; (800119c <__aeabi_dadd+0x36c>)
 800100a:	42a7      	cmp	r7, r4
 800100c:	d100      	bne.n	8001010 <__aeabi_dadd+0x1e0>
 800100e:	e18a      	b.n	8001326 <__aeabi_dadd+0x4f6>
 8001010:	0017      	movs	r7, r2
 8001012:	e73b      	b.n	8000e8c <__aeabi_dadd+0x5c>
 8001014:	4c63      	ldr	r4, [pc, #396]	; (80011a4 <__aeabi_dadd+0x374>)
 8001016:	1c72      	adds	r2, r6, #1
 8001018:	4222      	tst	r2, r4
 800101a:	d000      	beq.n	800101e <__aeabi_dadd+0x1ee>
 800101c:	e0e0      	b.n	80011e0 <__aeabi_dadd+0x3b0>
 800101e:	000a      	movs	r2, r1
 8001020:	431a      	orrs	r2, r3
 8001022:	2e00      	cmp	r6, #0
 8001024:	d000      	beq.n	8001028 <__aeabi_dadd+0x1f8>
 8001026:	e174      	b.n	8001312 <__aeabi_dadd+0x4e2>
 8001028:	2a00      	cmp	r2, #0
 800102a:	d100      	bne.n	800102e <__aeabi_dadd+0x1fe>
 800102c:	e1d0      	b.n	80013d0 <__aeabi_dadd+0x5a0>
 800102e:	464a      	mov	r2, r9
 8001030:	4302      	orrs	r2, r0
 8001032:	d000      	beq.n	8001036 <__aeabi_dadd+0x206>
 8001034:	e1e3      	b.n	80013fe <__aeabi_dadd+0x5ce>
 8001036:	074a      	lsls	r2, r1, #29
 8001038:	08db      	lsrs	r3, r3, #3
 800103a:	4313      	orrs	r3, r2
 800103c:	08c9      	lsrs	r1, r1, #3
 800103e:	e029      	b.n	8001094 <__aeabi_dadd+0x264>
 8001040:	464a      	mov	r2, r9
 8001042:	4302      	orrs	r2, r0
 8001044:	d100      	bne.n	8001048 <__aeabi_dadd+0x218>
 8001046:	e17d      	b.n	8001344 <__aeabi_dadd+0x514>
 8001048:	1e7a      	subs	r2, r7, #1
 800104a:	2f01      	cmp	r7, #1
 800104c:	d100      	bne.n	8001050 <__aeabi_dadd+0x220>
 800104e:	e0e0      	b.n	8001212 <__aeabi_dadd+0x3e2>
 8001050:	4c52      	ldr	r4, [pc, #328]	; (800119c <__aeabi_dadd+0x36c>)
 8001052:	42a7      	cmp	r7, r4
 8001054:	d100      	bne.n	8001058 <__aeabi_dadd+0x228>
 8001056:	e166      	b.n	8001326 <__aeabi_dadd+0x4f6>
 8001058:	0017      	movs	r7, r2
 800105a:	e7b2      	b.n	8000fc2 <__aeabi_dadd+0x192>
 800105c:	0010      	movs	r0, r2
 800105e:	3b1f      	subs	r3, #31
 8001060:	40d8      	lsrs	r0, r3
 8001062:	2920      	cmp	r1, #32
 8001064:	d003      	beq.n	800106e <__aeabi_dadd+0x23e>
 8001066:	2340      	movs	r3, #64	; 0x40
 8001068:	1a5b      	subs	r3, r3, r1
 800106a:	409a      	lsls	r2, r3
 800106c:	4314      	orrs	r4, r2
 800106e:	1e63      	subs	r3, r4, #1
 8001070:	419c      	sbcs	r4, r3
 8001072:	2300      	movs	r3, #0
 8001074:	2600      	movs	r6, #0
 8001076:	469a      	mov	sl, r3
 8001078:	4304      	orrs	r4, r0
 800107a:	0763      	lsls	r3, r4, #29
 800107c:	d000      	beq.n	8001080 <__aeabi_dadd+0x250>
 800107e:	e755      	b.n	8000f2c <__aeabi_dadd+0xfc>
 8001080:	4652      	mov	r2, sl
 8001082:	08e3      	lsrs	r3, r4, #3
 8001084:	0752      	lsls	r2, r2, #29
 8001086:	4313      	orrs	r3, r2
 8001088:	4652      	mov	r2, sl
 800108a:	0037      	movs	r7, r6
 800108c:	08d1      	lsrs	r1, r2, #3
 800108e:	4a43      	ldr	r2, [pc, #268]	; (800119c <__aeabi_dadd+0x36c>)
 8001090:	4297      	cmp	r7, r2
 8001092:	d01f      	beq.n	80010d4 <__aeabi_dadd+0x2a4>
 8001094:	0309      	lsls	r1, r1, #12
 8001096:	057a      	lsls	r2, r7, #21
 8001098:	0b0c      	lsrs	r4, r1, #12
 800109a:	0d52      	lsrs	r2, r2, #21
 800109c:	e764      	b.n	8000f68 <__aeabi_dadd+0x138>
 800109e:	4642      	mov	r2, r8
 80010a0:	464c      	mov	r4, r9
 80010a2:	4314      	orrs	r4, r2
 80010a4:	1e62      	subs	r2, r4, #1
 80010a6:	4194      	sbcs	r4, r2
 80010a8:	18e4      	adds	r4, r4, r3
 80010aa:	429c      	cmp	r4, r3
 80010ac:	4192      	sbcs	r2, r2
 80010ae:	4252      	negs	r2, r2
 80010b0:	4692      	mov	sl, r2
 80010b2:	448a      	add	sl, r1
 80010b4:	4653      	mov	r3, sl
 80010b6:	021b      	lsls	r3, r3, #8
 80010b8:	d5df      	bpl.n	800107a <__aeabi_dadd+0x24a>
 80010ba:	4b38      	ldr	r3, [pc, #224]	; (800119c <__aeabi_dadd+0x36c>)
 80010bc:	3601      	adds	r6, #1
 80010be:	429e      	cmp	r6, r3
 80010c0:	d000      	beq.n	80010c4 <__aeabi_dadd+0x294>
 80010c2:	e0b3      	b.n	800122c <__aeabi_dadd+0x3fc>
 80010c4:	0032      	movs	r2, r6
 80010c6:	2400      	movs	r4, #0
 80010c8:	2300      	movs	r3, #0
 80010ca:	e74d      	b.n	8000f68 <__aeabi_dadd+0x138>
 80010cc:	074a      	lsls	r2, r1, #29
 80010ce:	08db      	lsrs	r3, r3, #3
 80010d0:	4313      	orrs	r3, r2
 80010d2:	08c9      	lsrs	r1, r1, #3
 80010d4:	001a      	movs	r2, r3
 80010d6:	430a      	orrs	r2, r1
 80010d8:	d100      	bne.n	80010dc <__aeabi_dadd+0x2ac>
 80010da:	e200      	b.n	80014de <__aeabi_dadd+0x6ae>
 80010dc:	2480      	movs	r4, #128	; 0x80
 80010de:	0324      	lsls	r4, r4, #12
 80010e0:	430c      	orrs	r4, r1
 80010e2:	0324      	lsls	r4, r4, #12
 80010e4:	4a2d      	ldr	r2, [pc, #180]	; (800119c <__aeabi_dadd+0x36c>)
 80010e6:	0b24      	lsrs	r4, r4, #12
 80010e8:	e73e      	b.n	8000f68 <__aeabi_dadd+0x138>
 80010ea:	0020      	movs	r0, r4
 80010ec:	f001 fd5a 	bl	8002ba4 <__clzsi2>
 80010f0:	0003      	movs	r3, r0
 80010f2:	3318      	adds	r3, #24
 80010f4:	2b1f      	cmp	r3, #31
 80010f6:	dc00      	bgt.n	80010fa <__aeabi_dadd+0x2ca>
 80010f8:	e6f7      	b.n	8000eea <__aeabi_dadd+0xba>
 80010fa:	0022      	movs	r2, r4
 80010fc:	3808      	subs	r0, #8
 80010fe:	4082      	lsls	r2, r0
 8001100:	2400      	movs	r4, #0
 8001102:	42b3      	cmp	r3, r6
 8001104:	db00      	blt.n	8001108 <__aeabi_dadd+0x2d8>
 8001106:	e6fc      	b.n	8000f02 <__aeabi_dadd+0xd2>
 8001108:	1af6      	subs	r6, r6, r3
 800110a:	4b25      	ldr	r3, [pc, #148]	; (80011a0 <__aeabi_dadd+0x370>)
 800110c:	401a      	ands	r2, r3
 800110e:	4692      	mov	sl, r2
 8001110:	e70a      	b.n	8000f28 <__aeabi_dadd+0xf8>
 8001112:	2f00      	cmp	r7, #0
 8001114:	d02b      	beq.n	800116e <__aeabi_dadd+0x33e>
 8001116:	1b97      	subs	r7, r2, r6
 8001118:	2e00      	cmp	r6, #0
 800111a:	d100      	bne.n	800111e <__aeabi_dadd+0x2ee>
 800111c:	e0b8      	b.n	8001290 <__aeabi_dadd+0x460>
 800111e:	4c1f      	ldr	r4, [pc, #124]	; (800119c <__aeabi_dadd+0x36c>)
 8001120:	42a2      	cmp	r2, r4
 8001122:	d100      	bne.n	8001126 <__aeabi_dadd+0x2f6>
 8001124:	e11c      	b.n	8001360 <__aeabi_dadd+0x530>
 8001126:	2480      	movs	r4, #128	; 0x80
 8001128:	0424      	lsls	r4, r4, #16
 800112a:	4321      	orrs	r1, r4
 800112c:	2f38      	cmp	r7, #56	; 0x38
 800112e:	dd00      	ble.n	8001132 <__aeabi_dadd+0x302>
 8001130:	e11e      	b.n	8001370 <__aeabi_dadd+0x540>
 8001132:	2f1f      	cmp	r7, #31
 8001134:	dd00      	ble.n	8001138 <__aeabi_dadd+0x308>
 8001136:	e19e      	b.n	8001476 <__aeabi_dadd+0x646>
 8001138:	2620      	movs	r6, #32
 800113a:	000c      	movs	r4, r1
 800113c:	1bf6      	subs	r6, r6, r7
 800113e:	0018      	movs	r0, r3
 8001140:	40b3      	lsls	r3, r6
 8001142:	40b4      	lsls	r4, r6
 8001144:	40f8      	lsrs	r0, r7
 8001146:	1e5e      	subs	r6, r3, #1
 8001148:	41b3      	sbcs	r3, r6
 800114a:	40f9      	lsrs	r1, r7
 800114c:	4304      	orrs	r4, r0
 800114e:	431c      	orrs	r4, r3
 8001150:	4489      	add	r9, r1
 8001152:	4444      	add	r4, r8
 8001154:	4544      	cmp	r4, r8
 8001156:	419b      	sbcs	r3, r3
 8001158:	425b      	negs	r3, r3
 800115a:	444b      	add	r3, r9
 800115c:	469a      	mov	sl, r3
 800115e:	0016      	movs	r6, r2
 8001160:	e7a8      	b.n	80010b4 <__aeabi_dadd+0x284>
 8001162:	4642      	mov	r2, r8
 8001164:	464c      	mov	r4, r9
 8001166:	4314      	orrs	r4, r2
 8001168:	1e62      	subs	r2, r4, #1
 800116a:	4194      	sbcs	r4, r2
 800116c:	e6a6      	b.n	8000ebc <__aeabi_dadd+0x8c>
 800116e:	4c0d      	ldr	r4, [pc, #52]	; (80011a4 <__aeabi_dadd+0x374>)
 8001170:	1c72      	adds	r2, r6, #1
 8001172:	4222      	tst	r2, r4
 8001174:	d000      	beq.n	8001178 <__aeabi_dadd+0x348>
 8001176:	e0a8      	b.n	80012ca <__aeabi_dadd+0x49a>
 8001178:	000a      	movs	r2, r1
 800117a:	431a      	orrs	r2, r3
 800117c:	2e00      	cmp	r6, #0
 800117e:	d000      	beq.n	8001182 <__aeabi_dadd+0x352>
 8001180:	e10a      	b.n	8001398 <__aeabi_dadd+0x568>
 8001182:	2a00      	cmp	r2, #0
 8001184:	d100      	bne.n	8001188 <__aeabi_dadd+0x358>
 8001186:	e15e      	b.n	8001446 <__aeabi_dadd+0x616>
 8001188:	464a      	mov	r2, r9
 800118a:	4302      	orrs	r2, r0
 800118c:	d000      	beq.n	8001190 <__aeabi_dadd+0x360>
 800118e:	e161      	b.n	8001454 <__aeabi_dadd+0x624>
 8001190:	074a      	lsls	r2, r1, #29
 8001192:	08db      	lsrs	r3, r3, #3
 8001194:	4313      	orrs	r3, r2
 8001196:	08c9      	lsrs	r1, r1, #3
 8001198:	e77c      	b.n	8001094 <__aeabi_dadd+0x264>
 800119a:	46c0      	nop			; (mov r8, r8)
 800119c:	000007ff 	.word	0x000007ff
 80011a0:	ff7fffff 	.word	0xff7fffff
 80011a4:	000007fe 	.word	0x000007fe
 80011a8:	4ccf      	ldr	r4, [pc, #828]	; (80014e8 <__aeabi_dadd+0x6b8>)
 80011aa:	42a2      	cmp	r2, r4
 80011ac:	d100      	bne.n	80011b0 <__aeabi_dadd+0x380>
 80011ae:	e0ce      	b.n	800134e <__aeabi_dadd+0x51e>
 80011b0:	2480      	movs	r4, #128	; 0x80
 80011b2:	0424      	lsls	r4, r4, #16
 80011b4:	4321      	orrs	r1, r4
 80011b6:	2f38      	cmp	r7, #56	; 0x38
 80011b8:	dc5b      	bgt.n	8001272 <__aeabi_dadd+0x442>
 80011ba:	2f1f      	cmp	r7, #31
 80011bc:	dd00      	ble.n	80011c0 <__aeabi_dadd+0x390>
 80011be:	e0dc      	b.n	800137a <__aeabi_dadd+0x54a>
 80011c0:	2520      	movs	r5, #32
 80011c2:	000c      	movs	r4, r1
 80011c4:	1bed      	subs	r5, r5, r7
 80011c6:	001e      	movs	r6, r3
 80011c8:	40ab      	lsls	r3, r5
 80011ca:	40ac      	lsls	r4, r5
 80011cc:	40fe      	lsrs	r6, r7
 80011ce:	1e5d      	subs	r5, r3, #1
 80011d0:	41ab      	sbcs	r3, r5
 80011d2:	4334      	orrs	r4, r6
 80011d4:	40f9      	lsrs	r1, r7
 80011d6:	431c      	orrs	r4, r3
 80011d8:	464b      	mov	r3, r9
 80011da:	1a5b      	subs	r3, r3, r1
 80011dc:	4699      	mov	r9, r3
 80011de:	e04c      	b.n	800127a <__aeabi_dadd+0x44a>
 80011e0:	464a      	mov	r2, r9
 80011e2:	1a1c      	subs	r4, r3, r0
 80011e4:	1a88      	subs	r0, r1, r2
 80011e6:	42a3      	cmp	r3, r4
 80011e8:	4192      	sbcs	r2, r2
 80011ea:	4252      	negs	r2, r2
 80011ec:	4692      	mov	sl, r2
 80011ee:	0002      	movs	r2, r0
 80011f0:	4650      	mov	r0, sl
 80011f2:	1a12      	subs	r2, r2, r0
 80011f4:	4692      	mov	sl, r2
 80011f6:	0212      	lsls	r2, r2, #8
 80011f8:	d478      	bmi.n	80012ec <__aeabi_dadd+0x4bc>
 80011fa:	4653      	mov	r3, sl
 80011fc:	4323      	orrs	r3, r4
 80011fe:	d000      	beq.n	8001202 <__aeabi_dadd+0x3d2>
 8001200:	e66a      	b.n	8000ed8 <__aeabi_dadd+0xa8>
 8001202:	2100      	movs	r1, #0
 8001204:	2500      	movs	r5, #0
 8001206:	e745      	b.n	8001094 <__aeabi_dadd+0x264>
 8001208:	074a      	lsls	r2, r1, #29
 800120a:	08db      	lsrs	r3, r3, #3
 800120c:	4313      	orrs	r3, r2
 800120e:	08c9      	lsrs	r1, r1, #3
 8001210:	e73d      	b.n	800108e <__aeabi_dadd+0x25e>
 8001212:	181c      	adds	r4, r3, r0
 8001214:	429c      	cmp	r4, r3
 8001216:	419b      	sbcs	r3, r3
 8001218:	4449      	add	r1, r9
 800121a:	468a      	mov	sl, r1
 800121c:	425b      	negs	r3, r3
 800121e:	449a      	add	sl, r3
 8001220:	4653      	mov	r3, sl
 8001222:	2601      	movs	r6, #1
 8001224:	021b      	lsls	r3, r3, #8
 8001226:	d400      	bmi.n	800122a <__aeabi_dadd+0x3fa>
 8001228:	e727      	b.n	800107a <__aeabi_dadd+0x24a>
 800122a:	2602      	movs	r6, #2
 800122c:	4652      	mov	r2, sl
 800122e:	4baf      	ldr	r3, [pc, #700]	; (80014ec <__aeabi_dadd+0x6bc>)
 8001230:	2101      	movs	r1, #1
 8001232:	401a      	ands	r2, r3
 8001234:	0013      	movs	r3, r2
 8001236:	4021      	ands	r1, r4
 8001238:	0862      	lsrs	r2, r4, #1
 800123a:	430a      	orrs	r2, r1
 800123c:	07dc      	lsls	r4, r3, #31
 800123e:	085b      	lsrs	r3, r3, #1
 8001240:	469a      	mov	sl, r3
 8001242:	4314      	orrs	r4, r2
 8001244:	e670      	b.n	8000f28 <__aeabi_dadd+0xf8>
 8001246:	003a      	movs	r2, r7
 8001248:	464c      	mov	r4, r9
 800124a:	3a20      	subs	r2, #32
 800124c:	40d4      	lsrs	r4, r2
 800124e:	46a4      	mov	ip, r4
 8001250:	2f20      	cmp	r7, #32
 8001252:	d007      	beq.n	8001264 <__aeabi_dadd+0x434>
 8001254:	2240      	movs	r2, #64	; 0x40
 8001256:	4648      	mov	r0, r9
 8001258:	1bd2      	subs	r2, r2, r7
 800125a:	4090      	lsls	r0, r2
 800125c:	0002      	movs	r2, r0
 800125e:	4640      	mov	r0, r8
 8001260:	4310      	orrs	r0, r2
 8001262:	4680      	mov	r8, r0
 8001264:	4640      	mov	r0, r8
 8001266:	1e42      	subs	r2, r0, #1
 8001268:	4190      	sbcs	r0, r2
 800126a:	4662      	mov	r2, ip
 800126c:	0004      	movs	r4, r0
 800126e:	4314      	orrs	r4, r2
 8001270:	e624      	b.n	8000ebc <__aeabi_dadd+0x8c>
 8001272:	4319      	orrs	r1, r3
 8001274:	000c      	movs	r4, r1
 8001276:	1e63      	subs	r3, r4, #1
 8001278:	419c      	sbcs	r4, r3
 800127a:	4643      	mov	r3, r8
 800127c:	1b1c      	subs	r4, r3, r4
 800127e:	45a0      	cmp	r8, r4
 8001280:	419b      	sbcs	r3, r3
 8001282:	4649      	mov	r1, r9
 8001284:	425b      	negs	r3, r3
 8001286:	1acb      	subs	r3, r1, r3
 8001288:	469a      	mov	sl, r3
 800128a:	4665      	mov	r5, ip
 800128c:	0016      	movs	r6, r2
 800128e:	e61b      	b.n	8000ec8 <__aeabi_dadd+0x98>
 8001290:	000c      	movs	r4, r1
 8001292:	431c      	orrs	r4, r3
 8001294:	d100      	bne.n	8001298 <__aeabi_dadd+0x468>
 8001296:	e0c7      	b.n	8001428 <__aeabi_dadd+0x5f8>
 8001298:	1e7c      	subs	r4, r7, #1
 800129a:	2f01      	cmp	r7, #1
 800129c:	d100      	bne.n	80012a0 <__aeabi_dadd+0x470>
 800129e:	e0f9      	b.n	8001494 <__aeabi_dadd+0x664>
 80012a0:	4e91      	ldr	r6, [pc, #580]	; (80014e8 <__aeabi_dadd+0x6b8>)
 80012a2:	42b7      	cmp	r7, r6
 80012a4:	d05c      	beq.n	8001360 <__aeabi_dadd+0x530>
 80012a6:	0027      	movs	r7, r4
 80012a8:	e740      	b.n	800112c <__aeabi_dadd+0x2fc>
 80012aa:	2220      	movs	r2, #32
 80012ac:	464c      	mov	r4, r9
 80012ae:	4640      	mov	r0, r8
 80012b0:	1bd2      	subs	r2, r2, r7
 80012b2:	4094      	lsls	r4, r2
 80012b4:	40f8      	lsrs	r0, r7
 80012b6:	4304      	orrs	r4, r0
 80012b8:	4640      	mov	r0, r8
 80012ba:	4090      	lsls	r0, r2
 80012bc:	1e42      	subs	r2, r0, #1
 80012be:	4190      	sbcs	r0, r2
 80012c0:	464a      	mov	r2, r9
 80012c2:	40fa      	lsrs	r2, r7
 80012c4:	4304      	orrs	r4, r0
 80012c6:	1889      	adds	r1, r1, r2
 80012c8:	e6ee      	b.n	80010a8 <__aeabi_dadd+0x278>
 80012ca:	4c87      	ldr	r4, [pc, #540]	; (80014e8 <__aeabi_dadd+0x6b8>)
 80012cc:	42a2      	cmp	r2, r4
 80012ce:	d100      	bne.n	80012d2 <__aeabi_dadd+0x4a2>
 80012d0:	e6f9      	b.n	80010c6 <__aeabi_dadd+0x296>
 80012d2:	1818      	adds	r0, r3, r0
 80012d4:	4298      	cmp	r0, r3
 80012d6:	419b      	sbcs	r3, r3
 80012d8:	4449      	add	r1, r9
 80012da:	425b      	negs	r3, r3
 80012dc:	18cb      	adds	r3, r1, r3
 80012de:	07dc      	lsls	r4, r3, #31
 80012e0:	0840      	lsrs	r0, r0, #1
 80012e2:	085b      	lsrs	r3, r3, #1
 80012e4:	469a      	mov	sl, r3
 80012e6:	0016      	movs	r6, r2
 80012e8:	4304      	orrs	r4, r0
 80012ea:	e6c6      	b.n	800107a <__aeabi_dadd+0x24a>
 80012ec:	4642      	mov	r2, r8
 80012ee:	1ad4      	subs	r4, r2, r3
 80012f0:	45a0      	cmp	r8, r4
 80012f2:	4180      	sbcs	r0, r0
 80012f4:	464b      	mov	r3, r9
 80012f6:	4240      	negs	r0, r0
 80012f8:	1a59      	subs	r1, r3, r1
 80012fa:	1a0b      	subs	r3, r1, r0
 80012fc:	469a      	mov	sl, r3
 80012fe:	4665      	mov	r5, ip
 8001300:	e5ea      	b.n	8000ed8 <__aeabi_dadd+0xa8>
 8001302:	464b      	mov	r3, r9
 8001304:	464a      	mov	r2, r9
 8001306:	08c0      	lsrs	r0, r0, #3
 8001308:	075b      	lsls	r3, r3, #29
 800130a:	4665      	mov	r5, ip
 800130c:	4303      	orrs	r3, r0
 800130e:	08d1      	lsrs	r1, r2, #3
 8001310:	e6bd      	b.n	800108e <__aeabi_dadd+0x25e>
 8001312:	2a00      	cmp	r2, #0
 8001314:	d000      	beq.n	8001318 <__aeabi_dadd+0x4e8>
 8001316:	e08e      	b.n	8001436 <__aeabi_dadd+0x606>
 8001318:	464b      	mov	r3, r9
 800131a:	4303      	orrs	r3, r0
 800131c:	d117      	bne.n	800134e <__aeabi_dadd+0x51e>
 800131e:	2180      	movs	r1, #128	; 0x80
 8001320:	2500      	movs	r5, #0
 8001322:	0309      	lsls	r1, r1, #12
 8001324:	e6da      	b.n	80010dc <__aeabi_dadd+0x2ac>
 8001326:	074a      	lsls	r2, r1, #29
 8001328:	08db      	lsrs	r3, r3, #3
 800132a:	4313      	orrs	r3, r2
 800132c:	08c9      	lsrs	r1, r1, #3
 800132e:	e6d1      	b.n	80010d4 <__aeabi_dadd+0x2a4>
 8001330:	1a1c      	subs	r4, r3, r0
 8001332:	464a      	mov	r2, r9
 8001334:	42a3      	cmp	r3, r4
 8001336:	419b      	sbcs	r3, r3
 8001338:	1a89      	subs	r1, r1, r2
 800133a:	425b      	negs	r3, r3
 800133c:	1acb      	subs	r3, r1, r3
 800133e:	469a      	mov	sl, r3
 8001340:	2601      	movs	r6, #1
 8001342:	e5c1      	b.n	8000ec8 <__aeabi_dadd+0x98>
 8001344:	074a      	lsls	r2, r1, #29
 8001346:	08db      	lsrs	r3, r3, #3
 8001348:	4313      	orrs	r3, r2
 800134a:	08c9      	lsrs	r1, r1, #3
 800134c:	e69f      	b.n	800108e <__aeabi_dadd+0x25e>
 800134e:	4643      	mov	r3, r8
 8001350:	08d8      	lsrs	r0, r3, #3
 8001352:	464b      	mov	r3, r9
 8001354:	464a      	mov	r2, r9
 8001356:	075b      	lsls	r3, r3, #29
 8001358:	4665      	mov	r5, ip
 800135a:	4303      	orrs	r3, r0
 800135c:	08d1      	lsrs	r1, r2, #3
 800135e:	e6b9      	b.n	80010d4 <__aeabi_dadd+0x2a4>
 8001360:	4643      	mov	r3, r8
 8001362:	08d8      	lsrs	r0, r3, #3
 8001364:	464b      	mov	r3, r9
 8001366:	464a      	mov	r2, r9
 8001368:	075b      	lsls	r3, r3, #29
 800136a:	4303      	orrs	r3, r0
 800136c:	08d1      	lsrs	r1, r2, #3
 800136e:	e6b1      	b.n	80010d4 <__aeabi_dadd+0x2a4>
 8001370:	4319      	orrs	r1, r3
 8001372:	000c      	movs	r4, r1
 8001374:	1e63      	subs	r3, r4, #1
 8001376:	419c      	sbcs	r4, r3
 8001378:	e6eb      	b.n	8001152 <__aeabi_dadd+0x322>
 800137a:	003c      	movs	r4, r7
 800137c:	000d      	movs	r5, r1
 800137e:	3c20      	subs	r4, #32
 8001380:	40e5      	lsrs	r5, r4
 8001382:	2f20      	cmp	r7, #32
 8001384:	d003      	beq.n	800138e <__aeabi_dadd+0x55e>
 8001386:	2440      	movs	r4, #64	; 0x40
 8001388:	1be4      	subs	r4, r4, r7
 800138a:	40a1      	lsls	r1, r4
 800138c:	430b      	orrs	r3, r1
 800138e:	001c      	movs	r4, r3
 8001390:	1e63      	subs	r3, r4, #1
 8001392:	419c      	sbcs	r4, r3
 8001394:	432c      	orrs	r4, r5
 8001396:	e770      	b.n	800127a <__aeabi_dadd+0x44a>
 8001398:	2a00      	cmp	r2, #0
 800139a:	d0e1      	beq.n	8001360 <__aeabi_dadd+0x530>
 800139c:	464a      	mov	r2, r9
 800139e:	4302      	orrs	r2, r0
 80013a0:	d0c1      	beq.n	8001326 <__aeabi_dadd+0x4f6>
 80013a2:	074a      	lsls	r2, r1, #29
 80013a4:	08db      	lsrs	r3, r3, #3
 80013a6:	4313      	orrs	r3, r2
 80013a8:	2280      	movs	r2, #128	; 0x80
 80013aa:	08c9      	lsrs	r1, r1, #3
 80013ac:	0312      	lsls	r2, r2, #12
 80013ae:	4211      	tst	r1, r2
 80013b0:	d008      	beq.n	80013c4 <__aeabi_dadd+0x594>
 80013b2:	4648      	mov	r0, r9
 80013b4:	08c4      	lsrs	r4, r0, #3
 80013b6:	4214      	tst	r4, r2
 80013b8:	d104      	bne.n	80013c4 <__aeabi_dadd+0x594>
 80013ba:	4643      	mov	r3, r8
 80013bc:	0021      	movs	r1, r4
 80013be:	08db      	lsrs	r3, r3, #3
 80013c0:	0742      	lsls	r2, r0, #29
 80013c2:	4313      	orrs	r3, r2
 80013c4:	0f5a      	lsrs	r2, r3, #29
 80013c6:	00db      	lsls	r3, r3, #3
 80013c8:	0752      	lsls	r2, r2, #29
 80013ca:	08db      	lsrs	r3, r3, #3
 80013cc:	4313      	orrs	r3, r2
 80013ce:	e681      	b.n	80010d4 <__aeabi_dadd+0x2a4>
 80013d0:	464b      	mov	r3, r9
 80013d2:	4303      	orrs	r3, r0
 80013d4:	d100      	bne.n	80013d8 <__aeabi_dadd+0x5a8>
 80013d6:	e714      	b.n	8001202 <__aeabi_dadd+0x3d2>
 80013d8:	464b      	mov	r3, r9
 80013da:	464a      	mov	r2, r9
 80013dc:	08c0      	lsrs	r0, r0, #3
 80013de:	075b      	lsls	r3, r3, #29
 80013e0:	4665      	mov	r5, ip
 80013e2:	4303      	orrs	r3, r0
 80013e4:	08d1      	lsrs	r1, r2, #3
 80013e6:	e655      	b.n	8001094 <__aeabi_dadd+0x264>
 80013e8:	1ac4      	subs	r4, r0, r3
 80013ea:	45a0      	cmp	r8, r4
 80013ec:	4180      	sbcs	r0, r0
 80013ee:	464b      	mov	r3, r9
 80013f0:	4240      	negs	r0, r0
 80013f2:	1a59      	subs	r1, r3, r1
 80013f4:	1a0b      	subs	r3, r1, r0
 80013f6:	469a      	mov	sl, r3
 80013f8:	4665      	mov	r5, ip
 80013fa:	2601      	movs	r6, #1
 80013fc:	e564      	b.n	8000ec8 <__aeabi_dadd+0x98>
 80013fe:	1a1c      	subs	r4, r3, r0
 8001400:	464a      	mov	r2, r9
 8001402:	42a3      	cmp	r3, r4
 8001404:	4180      	sbcs	r0, r0
 8001406:	1a8a      	subs	r2, r1, r2
 8001408:	4240      	negs	r0, r0
 800140a:	1a12      	subs	r2, r2, r0
 800140c:	4692      	mov	sl, r2
 800140e:	0212      	lsls	r2, r2, #8
 8001410:	d549      	bpl.n	80014a6 <__aeabi_dadd+0x676>
 8001412:	4642      	mov	r2, r8
 8001414:	1ad4      	subs	r4, r2, r3
 8001416:	45a0      	cmp	r8, r4
 8001418:	4180      	sbcs	r0, r0
 800141a:	464b      	mov	r3, r9
 800141c:	4240      	negs	r0, r0
 800141e:	1a59      	subs	r1, r3, r1
 8001420:	1a0b      	subs	r3, r1, r0
 8001422:	469a      	mov	sl, r3
 8001424:	4665      	mov	r5, ip
 8001426:	e57f      	b.n	8000f28 <__aeabi_dadd+0xf8>
 8001428:	464b      	mov	r3, r9
 800142a:	464a      	mov	r2, r9
 800142c:	08c0      	lsrs	r0, r0, #3
 800142e:	075b      	lsls	r3, r3, #29
 8001430:	4303      	orrs	r3, r0
 8001432:	08d1      	lsrs	r1, r2, #3
 8001434:	e62b      	b.n	800108e <__aeabi_dadd+0x25e>
 8001436:	464a      	mov	r2, r9
 8001438:	08db      	lsrs	r3, r3, #3
 800143a:	4302      	orrs	r2, r0
 800143c:	d138      	bne.n	80014b0 <__aeabi_dadd+0x680>
 800143e:	074a      	lsls	r2, r1, #29
 8001440:	4313      	orrs	r3, r2
 8001442:	08c9      	lsrs	r1, r1, #3
 8001444:	e646      	b.n	80010d4 <__aeabi_dadd+0x2a4>
 8001446:	464b      	mov	r3, r9
 8001448:	464a      	mov	r2, r9
 800144a:	08c0      	lsrs	r0, r0, #3
 800144c:	075b      	lsls	r3, r3, #29
 800144e:	4303      	orrs	r3, r0
 8001450:	08d1      	lsrs	r1, r2, #3
 8001452:	e61f      	b.n	8001094 <__aeabi_dadd+0x264>
 8001454:	181c      	adds	r4, r3, r0
 8001456:	429c      	cmp	r4, r3
 8001458:	419b      	sbcs	r3, r3
 800145a:	4449      	add	r1, r9
 800145c:	468a      	mov	sl, r1
 800145e:	425b      	negs	r3, r3
 8001460:	449a      	add	sl, r3
 8001462:	4653      	mov	r3, sl
 8001464:	021b      	lsls	r3, r3, #8
 8001466:	d400      	bmi.n	800146a <__aeabi_dadd+0x63a>
 8001468:	e607      	b.n	800107a <__aeabi_dadd+0x24a>
 800146a:	4652      	mov	r2, sl
 800146c:	4b1f      	ldr	r3, [pc, #124]	; (80014ec <__aeabi_dadd+0x6bc>)
 800146e:	2601      	movs	r6, #1
 8001470:	401a      	ands	r2, r3
 8001472:	4692      	mov	sl, r2
 8001474:	e601      	b.n	800107a <__aeabi_dadd+0x24a>
 8001476:	003c      	movs	r4, r7
 8001478:	000e      	movs	r6, r1
 800147a:	3c20      	subs	r4, #32
 800147c:	40e6      	lsrs	r6, r4
 800147e:	2f20      	cmp	r7, #32
 8001480:	d003      	beq.n	800148a <__aeabi_dadd+0x65a>
 8001482:	2440      	movs	r4, #64	; 0x40
 8001484:	1be4      	subs	r4, r4, r7
 8001486:	40a1      	lsls	r1, r4
 8001488:	430b      	orrs	r3, r1
 800148a:	001c      	movs	r4, r3
 800148c:	1e63      	subs	r3, r4, #1
 800148e:	419c      	sbcs	r4, r3
 8001490:	4334      	orrs	r4, r6
 8001492:	e65e      	b.n	8001152 <__aeabi_dadd+0x322>
 8001494:	4443      	add	r3, r8
 8001496:	4283      	cmp	r3, r0
 8001498:	4180      	sbcs	r0, r0
 800149a:	4449      	add	r1, r9
 800149c:	468a      	mov	sl, r1
 800149e:	4240      	negs	r0, r0
 80014a0:	001c      	movs	r4, r3
 80014a2:	4482      	add	sl, r0
 80014a4:	e6bc      	b.n	8001220 <__aeabi_dadd+0x3f0>
 80014a6:	4653      	mov	r3, sl
 80014a8:	4323      	orrs	r3, r4
 80014aa:	d100      	bne.n	80014ae <__aeabi_dadd+0x67e>
 80014ac:	e6a9      	b.n	8001202 <__aeabi_dadd+0x3d2>
 80014ae:	e5e4      	b.n	800107a <__aeabi_dadd+0x24a>
 80014b0:	074a      	lsls	r2, r1, #29
 80014b2:	4313      	orrs	r3, r2
 80014b4:	2280      	movs	r2, #128	; 0x80
 80014b6:	08c9      	lsrs	r1, r1, #3
 80014b8:	0312      	lsls	r2, r2, #12
 80014ba:	4211      	tst	r1, r2
 80014bc:	d009      	beq.n	80014d2 <__aeabi_dadd+0x6a2>
 80014be:	4648      	mov	r0, r9
 80014c0:	08c4      	lsrs	r4, r0, #3
 80014c2:	4214      	tst	r4, r2
 80014c4:	d105      	bne.n	80014d2 <__aeabi_dadd+0x6a2>
 80014c6:	4643      	mov	r3, r8
 80014c8:	4665      	mov	r5, ip
 80014ca:	0021      	movs	r1, r4
 80014cc:	08db      	lsrs	r3, r3, #3
 80014ce:	0742      	lsls	r2, r0, #29
 80014d0:	4313      	orrs	r3, r2
 80014d2:	0f5a      	lsrs	r2, r3, #29
 80014d4:	00db      	lsls	r3, r3, #3
 80014d6:	08db      	lsrs	r3, r3, #3
 80014d8:	0752      	lsls	r2, r2, #29
 80014da:	4313      	orrs	r3, r2
 80014dc:	e5fa      	b.n	80010d4 <__aeabi_dadd+0x2a4>
 80014de:	2300      	movs	r3, #0
 80014e0:	4a01      	ldr	r2, [pc, #4]	; (80014e8 <__aeabi_dadd+0x6b8>)
 80014e2:	001c      	movs	r4, r3
 80014e4:	e540      	b.n	8000f68 <__aeabi_dadd+0x138>
 80014e6:	46c0      	nop			; (mov r8, r8)
 80014e8:	000007ff 	.word	0x000007ff
 80014ec:	ff7fffff 	.word	0xff7fffff

080014f0 <__aeabi_ddiv>:
 80014f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014f2:	4657      	mov	r7, sl
 80014f4:	464e      	mov	r6, r9
 80014f6:	4645      	mov	r5, r8
 80014f8:	46de      	mov	lr, fp
 80014fa:	b5e0      	push	{r5, r6, r7, lr}
 80014fc:	030c      	lsls	r4, r1, #12
 80014fe:	001f      	movs	r7, r3
 8001500:	004b      	lsls	r3, r1, #1
 8001502:	4681      	mov	r9, r0
 8001504:	4692      	mov	sl, r2
 8001506:	0005      	movs	r5, r0
 8001508:	b085      	sub	sp, #20
 800150a:	0b24      	lsrs	r4, r4, #12
 800150c:	0d5b      	lsrs	r3, r3, #21
 800150e:	0fce      	lsrs	r6, r1, #31
 8001510:	2b00      	cmp	r3, #0
 8001512:	d100      	bne.n	8001516 <__aeabi_ddiv+0x26>
 8001514:	e152      	b.n	80017bc <__aeabi_ddiv+0x2cc>
 8001516:	4ad2      	ldr	r2, [pc, #840]	; (8001860 <__aeabi_ddiv+0x370>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d100      	bne.n	800151e <__aeabi_ddiv+0x2e>
 800151c:	e16e      	b.n	80017fc <__aeabi_ddiv+0x30c>
 800151e:	0f42      	lsrs	r2, r0, #29
 8001520:	00e4      	lsls	r4, r4, #3
 8001522:	4314      	orrs	r4, r2
 8001524:	2280      	movs	r2, #128	; 0x80
 8001526:	0412      	lsls	r2, r2, #16
 8001528:	4322      	orrs	r2, r4
 800152a:	4690      	mov	r8, r2
 800152c:	4acd      	ldr	r2, [pc, #820]	; (8001864 <__aeabi_ddiv+0x374>)
 800152e:	00c5      	lsls	r5, r0, #3
 8001530:	4693      	mov	fp, r2
 8001532:	449b      	add	fp, r3
 8001534:	2300      	movs	r3, #0
 8001536:	4699      	mov	r9, r3
 8001538:	9300      	str	r3, [sp, #0]
 800153a:	033c      	lsls	r4, r7, #12
 800153c:	007b      	lsls	r3, r7, #1
 800153e:	4650      	mov	r0, sl
 8001540:	0b24      	lsrs	r4, r4, #12
 8001542:	0d5b      	lsrs	r3, r3, #21
 8001544:	0fff      	lsrs	r7, r7, #31
 8001546:	2b00      	cmp	r3, #0
 8001548:	d100      	bne.n	800154c <__aeabi_ddiv+0x5c>
 800154a:	e11a      	b.n	8001782 <__aeabi_ddiv+0x292>
 800154c:	4ac4      	ldr	r2, [pc, #784]	; (8001860 <__aeabi_ddiv+0x370>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d100      	bne.n	8001554 <__aeabi_ddiv+0x64>
 8001552:	e15e      	b.n	8001812 <__aeabi_ddiv+0x322>
 8001554:	0f42      	lsrs	r2, r0, #29
 8001556:	00e4      	lsls	r4, r4, #3
 8001558:	4322      	orrs	r2, r4
 800155a:	2480      	movs	r4, #128	; 0x80
 800155c:	0424      	lsls	r4, r4, #16
 800155e:	4314      	orrs	r4, r2
 8001560:	4ac0      	ldr	r2, [pc, #768]	; (8001864 <__aeabi_ddiv+0x374>)
 8001562:	00c1      	lsls	r1, r0, #3
 8001564:	4694      	mov	ip, r2
 8001566:	465a      	mov	r2, fp
 8001568:	4463      	add	r3, ip
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	469b      	mov	fp, r3
 800156e:	2000      	movs	r0, #0
 8001570:	0033      	movs	r3, r6
 8001572:	407b      	eors	r3, r7
 8001574:	469a      	mov	sl, r3
 8001576:	464b      	mov	r3, r9
 8001578:	2b0f      	cmp	r3, #15
 800157a:	d827      	bhi.n	80015cc <__aeabi_ddiv+0xdc>
 800157c:	4aba      	ldr	r2, [pc, #744]	; (8001868 <__aeabi_ddiv+0x378>)
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	58d3      	ldr	r3, [r2, r3]
 8001582:	469f      	mov	pc, r3
 8001584:	46b2      	mov	sl, r6
 8001586:	9b00      	ldr	r3, [sp, #0]
 8001588:	2b02      	cmp	r3, #2
 800158a:	d016      	beq.n	80015ba <__aeabi_ddiv+0xca>
 800158c:	2b03      	cmp	r3, #3
 800158e:	d100      	bne.n	8001592 <__aeabi_ddiv+0xa2>
 8001590:	e287      	b.n	8001aa2 <__aeabi_ddiv+0x5b2>
 8001592:	2b01      	cmp	r3, #1
 8001594:	d000      	beq.n	8001598 <__aeabi_ddiv+0xa8>
 8001596:	e0d5      	b.n	8001744 <__aeabi_ddiv+0x254>
 8001598:	2300      	movs	r3, #0
 800159a:	2200      	movs	r2, #0
 800159c:	2500      	movs	r5, #0
 800159e:	051b      	lsls	r3, r3, #20
 80015a0:	4313      	orrs	r3, r2
 80015a2:	4652      	mov	r2, sl
 80015a4:	07d2      	lsls	r2, r2, #31
 80015a6:	4313      	orrs	r3, r2
 80015a8:	0028      	movs	r0, r5
 80015aa:	0019      	movs	r1, r3
 80015ac:	b005      	add	sp, #20
 80015ae:	bcf0      	pop	{r4, r5, r6, r7}
 80015b0:	46bb      	mov	fp, r7
 80015b2:	46b2      	mov	sl, r6
 80015b4:	46a9      	mov	r9, r5
 80015b6:	46a0      	mov	r8, r4
 80015b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015ba:	2200      	movs	r2, #0
 80015bc:	2500      	movs	r5, #0
 80015be:	4ba8      	ldr	r3, [pc, #672]	; (8001860 <__aeabi_ddiv+0x370>)
 80015c0:	e7ed      	b.n	800159e <__aeabi_ddiv+0xae>
 80015c2:	46ba      	mov	sl, r7
 80015c4:	46a0      	mov	r8, r4
 80015c6:	000d      	movs	r5, r1
 80015c8:	9000      	str	r0, [sp, #0]
 80015ca:	e7dc      	b.n	8001586 <__aeabi_ddiv+0x96>
 80015cc:	4544      	cmp	r4, r8
 80015ce:	d200      	bcs.n	80015d2 <__aeabi_ddiv+0xe2>
 80015d0:	e1c4      	b.n	800195c <__aeabi_ddiv+0x46c>
 80015d2:	d100      	bne.n	80015d6 <__aeabi_ddiv+0xe6>
 80015d4:	e1bf      	b.n	8001956 <__aeabi_ddiv+0x466>
 80015d6:	2301      	movs	r3, #1
 80015d8:	425b      	negs	r3, r3
 80015da:	469c      	mov	ip, r3
 80015dc:	002e      	movs	r6, r5
 80015de:	4640      	mov	r0, r8
 80015e0:	2500      	movs	r5, #0
 80015e2:	44e3      	add	fp, ip
 80015e4:	0223      	lsls	r3, r4, #8
 80015e6:	0e0c      	lsrs	r4, r1, #24
 80015e8:	431c      	orrs	r4, r3
 80015ea:	0c1b      	lsrs	r3, r3, #16
 80015ec:	4699      	mov	r9, r3
 80015ee:	0423      	lsls	r3, r4, #16
 80015f0:	020a      	lsls	r2, r1, #8
 80015f2:	0c1f      	lsrs	r7, r3, #16
 80015f4:	4649      	mov	r1, r9
 80015f6:	9200      	str	r2, [sp, #0]
 80015f8:	9701      	str	r7, [sp, #4]
 80015fa:	f7fe fe11 	bl	8000220 <__aeabi_uidivmod>
 80015fe:	0002      	movs	r2, r0
 8001600:	437a      	muls	r2, r7
 8001602:	040b      	lsls	r3, r1, #16
 8001604:	0c31      	lsrs	r1, r6, #16
 8001606:	4680      	mov	r8, r0
 8001608:	4319      	orrs	r1, r3
 800160a:	428a      	cmp	r2, r1
 800160c:	d907      	bls.n	800161e <__aeabi_ddiv+0x12e>
 800160e:	2301      	movs	r3, #1
 8001610:	425b      	negs	r3, r3
 8001612:	469c      	mov	ip, r3
 8001614:	1909      	adds	r1, r1, r4
 8001616:	44e0      	add	r8, ip
 8001618:	428c      	cmp	r4, r1
 800161a:	d800      	bhi.n	800161e <__aeabi_ddiv+0x12e>
 800161c:	e201      	b.n	8001a22 <__aeabi_ddiv+0x532>
 800161e:	1a88      	subs	r0, r1, r2
 8001620:	4649      	mov	r1, r9
 8001622:	f7fe fdfd 	bl	8000220 <__aeabi_uidivmod>
 8001626:	9a01      	ldr	r2, [sp, #4]
 8001628:	0436      	lsls	r6, r6, #16
 800162a:	4342      	muls	r2, r0
 800162c:	0409      	lsls	r1, r1, #16
 800162e:	0c36      	lsrs	r6, r6, #16
 8001630:	0003      	movs	r3, r0
 8001632:	430e      	orrs	r6, r1
 8001634:	42b2      	cmp	r2, r6
 8001636:	d904      	bls.n	8001642 <__aeabi_ddiv+0x152>
 8001638:	1936      	adds	r6, r6, r4
 800163a:	3b01      	subs	r3, #1
 800163c:	42b4      	cmp	r4, r6
 800163e:	d800      	bhi.n	8001642 <__aeabi_ddiv+0x152>
 8001640:	e1e9      	b.n	8001a16 <__aeabi_ddiv+0x526>
 8001642:	1ab0      	subs	r0, r6, r2
 8001644:	4642      	mov	r2, r8
 8001646:	9e00      	ldr	r6, [sp, #0]
 8001648:	0412      	lsls	r2, r2, #16
 800164a:	431a      	orrs	r2, r3
 800164c:	0c33      	lsrs	r3, r6, #16
 800164e:	001f      	movs	r7, r3
 8001650:	0c11      	lsrs	r1, r2, #16
 8001652:	4690      	mov	r8, r2
 8001654:	9302      	str	r3, [sp, #8]
 8001656:	0413      	lsls	r3, r2, #16
 8001658:	0432      	lsls	r2, r6, #16
 800165a:	0c16      	lsrs	r6, r2, #16
 800165c:	0032      	movs	r2, r6
 800165e:	0c1b      	lsrs	r3, r3, #16
 8001660:	435a      	muls	r2, r3
 8001662:	9603      	str	r6, [sp, #12]
 8001664:	437b      	muls	r3, r7
 8001666:	434e      	muls	r6, r1
 8001668:	4379      	muls	r1, r7
 800166a:	0c17      	lsrs	r7, r2, #16
 800166c:	46bc      	mov	ip, r7
 800166e:	199b      	adds	r3, r3, r6
 8001670:	4463      	add	r3, ip
 8001672:	429e      	cmp	r6, r3
 8001674:	d903      	bls.n	800167e <__aeabi_ddiv+0x18e>
 8001676:	2680      	movs	r6, #128	; 0x80
 8001678:	0276      	lsls	r6, r6, #9
 800167a:	46b4      	mov	ip, r6
 800167c:	4461      	add	r1, ip
 800167e:	0c1e      	lsrs	r6, r3, #16
 8001680:	1871      	adds	r1, r6, r1
 8001682:	0416      	lsls	r6, r2, #16
 8001684:	041b      	lsls	r3, r3, #16
 8001686:	0c36      	lsrs	r6, r6, #16
 8001688:	199e      	adds	r6, r3, r6
 800168a:	4288      	cmp	r0, r1
 800168c:	d302      	bcc.n	8001694 <__aeabi_ddiv+0x1a4>
 800168e:	d112      	bne.n	80016b6 <__aeabi_ddiv+0x1c6>
 8001690:	42b5      	cmp	r5, r6
 8001692:	d210      	bcs.n	80016b6 <__aeabi_ddiv+0x1c6>
 8001694:	4643      	mov	r3, r8
 8001696:	1e5a      	subs	r2, r3, #1
 8001698:	9b00      	ldr	r3, [sp, #0]
 800169a:	469c      	mov	ip, r3
 800169c:	4465      	add	r5, ip
 800169e:	001f      	movs	r7, r3
 80016a0:	429d      	cmp	r5, r3
 80016a2:	419b      	sbcs	r3, r3
 80016a4:	425b      	negs	r3, r3
 80016a6:	191b      	adds	r3, r3, r4
 80016a8:	18c0      	adds	r0, r0, r3
 80016aa:	4284      	cmp	r4, r0
 80016ac:	d200      	bcs.n	80016b0 <__aeabi_ddiv+0x1c0>
 80016ae:	e19e      	b.n	80019ee <__aeabi_ddiv+0x4fe>
 80016b0:	d100      	bne.n	80016b4 <__aeabi_ddiv+0x1c4>
 80016b2:	e199      	b.n	80019e8 <__aeabi_ddiv+0x4f8>
 80016b4:	4690      	mov	r8, r2
 80016b6:	1bae      	subs	r6, r5, r6
 80016b8:	42b5      	cmp	r5, r6
 80016ba:	41ad      	sbcs	r5, r5
 80016bc:	1a40      	subs	r0, r0, r1
 80016be:	426d      	negs	r5, r5
 80016c0:	1b40      	subs	r0, r0, r5
 80016c2:	4284      	cmp	r4, r0
 80016c4:	d100      	bne.n	80016c8 <__aeabi_ddiv+0x1d8>
 80016c6:	e1d2      	b.n	8001a6e <__aeabi_ddiv+0x57e>
 80016c8:	4649      	mov	r1, r9
 80016ca:	f7fe fda9 	bl	8000220 <__aeabi_uidivmod>
 80016ce:	9a01      	ldr	r2, [sp, #4]
 80016d0:	040b      	lsls	r3, r1, #16
 80016d2:	4342      	muls	r2, r0
 80016d4:	0c31      	lsrs	r1, r6, #16
 80016d6:	0005      	movs	r5, r0
 80016d8:	4319      	orrs	r1, r3
 80016da:	428a      	cmp	r2, r1
 80016dc:	d900      	bls.n	80016e0 <__aeabi_ddiv+0x1f0>
 80016de:	e16c      	b.n	80019ba <__aeabi_ddiv+0x4ca>
 80016e0:	1a88      	subs	r0, r1, r2
 80016e2:	4649      	mov	r1, r9
 80016e4:	f7fe fd9c 	bl	8000220 <__aeabi_uidivmod>
 80016e8:	9a01      	ldr	r2, [sp, #4]
 80016ea:	0436      	lsls	r6, r6, #16
 80016ec:	4342      	muls	r2, r0
 80016ee:	0409      	lsls	r1, r1, #16
 80016f0:	0c36      	lsrs	r6, r6, #16
 80016f2:	0003      	movs	r3, r0
 80016f4:	430e      	orrs	r6, r1
 80016f6:	42b2      	cmp	r2, r6
 80016f8:	d900      	bls.n	80016fc <__aeabi_ddiv+0x20c>
 80016fa:	e153      	b.n	80019a4 <__aeabi_ddiv+0x4b4>
 80016fc:	9803      	ldr	r0, [sp, #12]
 80016fe:	1ab6      	subs	r6, r6, r2
 8001700:	0002      	movs	r2, r0
 8001702:	042d      	lsls	r5, r5, #16
 8001704:	431d      	orrs	r5, r3
 8001706:	9f02      	ldr	r7, [sp, #8]
 8001708:	042b      	lsls	r3, r5, #16
 800170a:	0c1b      	lsrs	r3, r3, #16
 800170c:	435a      	muls	r2, r3
 800170e:	437b      	muls	r3, r7
 8001710:	469c      	mov	ip, r3
 8001712:	0c29      	lsrs	r1, r5, #16
 8001714:	4348      	muls	r0, r1
 8001716:	0c13      	lsrs	r3, r2, #16
 8001718:	4484      	add	ip, r0
 800171a:	4463      	add	r3, ip
 800171c:	4379      	muls	r1, r7
 800171e:	4298      	cmp	r0, r3
 8001720:	d903      	bls.n	800172a <__aeabi_ddiv+0x23a>
 8001722:	2080      	movs	r0, #128	; 0x80
 8001724:	0240      	lsls	r0, r0, #9
 8001726:	4684      	mov	ip, r0
 8001728:	4461      	add	r1, ip
 800172a:	0c18      	lsrs	r0, r3, #16
 800172c:	0412      	lsls	r2, r2, #16
 800172e:	041b      	lsls	r3, r3, #16
 8001730:	0c12      	lsrs	r2, r2, #16
 8001732:	1840      	adds	r0, r0, r1
 8001734:	189b      	adds	r3, r3, r2
 8001736:	4286      	cmp	r6, r0
 8001738:	d200      	bcs.n	800173c <__aeabi_ddiv+0x24c>
 800173a:	e100      	b.n	800193e <__aeabi_ddiv+0x44e>
 800173c:	d100      	bne.n	8001740 <__aeabi_ddiv+0x250>
 800173e:	e0fb      	b.n	8001938 <__aeabi_ddiv+0x448>
 8001740:	2301      	movs	r3, #1
 8001742:	431d      	orrs	r5, r3
 8001744:	4b49      	ldr	r3, [pc, #292]	; (800186c <__aeabi_ddiv+0x37c>)
 8001746:	445b      	add	r3, fp
 8001748:	2b00      	cmp	r3, #0
 800174a:	dc00      	bgt.n	800174e <__aeabi_ddiv+0x25e>
 800174c:	e0aa      	b.n	80018a4 <__aeabi_ddiv+0x3b4>
 800174e:	076a      	lsls	r2, r5, #29
 8001750:	d000      	beq.n	8001754 <__aeabi_ddiv+0x264>
 8001752:	e13d      	b.n	80019d0 <__aeabi_ddiv+0x4e0>
 8001754:	08e9      	lsrs	r1, r5, #3
 8001756:	4642      	mov	r2, r8
 8001758:	01d2      	lsls	r2, r2, #7
 800175a:	d506      	bpl.n	800176a <__aeabi_ddiv+0x27a>
 800175c:	4642      	mov	r2, r8
 800175e:	4b44      	ldr	r3, [pc, #272]	; (8001870 <__aeabi_ddiv+0x380>)
 8001760:	401a      	ands	r2, r3
 8001762:	2380      	movs	r3, #128	; 0x80
 8001764:	4690      	mov	r8, r2
 8001766:	00db      	lsls	r3, r3, #3
 8001768:	445b      	add	r3, fp
 800176a:	4a42      	ldr	r2, [pc, #264]	; (8001874 <__aeabi_ddiv+0x384>)
 800176c:	4293      	cmp	r3, r2
 800176e:	dd00      	ble.n	8001772 <__aeabi_ddiv+0x282>
 8001770:	e723      	b.n	80015ba <__aeabi_ddiv+0xca>
 8001772:	4642      	mov	r2, r8
 8001774:	055b      	lsls	r3, r3, #21
 8001776:	0755      	lsls	r5, r2, #29
 8001778:	0252      	lsls	r2, r2, #9
 800177a:	430d      	orrs	r5, r1
 800177c:	0b12      	lsrs	r2, r2, #12
 800177e:	0d5b      	lsrs	r3, r3, #21
 8001780:	e70d      	b.n	800159e <__aeabi_ddiv+0xae>
 8001782:	4651      	mov	r1, sl
 8001784:	4321      	orrs	r1, r4
 8001786:	d100      	bne.n	800178a <__aeabi_ddiv+0x29a>
 8001788:	e07c      	b.n	8001884 <__aeabi_ddiv+0x394>
 800178a:	2c00      	cmp	r4, #0
 800178c:	d100      	bne.n	8001790 <__aeabi_ddiv+0x2a0>
 800178e:	e0fb      	b.n	8001988 <__aeabi_ddiv+0x498>
 8001790:	0020      	movs	r0, r4
 8001792:	f001 fa07 	bl	8002ba4 <__clzsi2>
 8001796:	0002      	movs	r2, r0
 8001798:	3a0b      	subs	r2, #11
 800179a:	231d      	movs	r3, #29
 800179c:	1a9b      	subs	r3, r3, r2
 800179e:	4652      	mov	r2, sl
 80017a0:	0001      	movs	r1, r0
 80017a2:	40da      	lsrs	r2, r3
 80017a4:	4653      	mov	r3, sl
 80017a6:	3908      	subs	r1, #8
 80017a8:	408b      	lsls	r3, r1
 80017aa:	408c      	lsls	r4, r1
 80017ac:	0019      	movs	r1, r3
 80017ae:	4314      	orrs	r4, r2
 80017b0:	4b31      	ldr	r3, [pc, #196]	; (8001878 <__aeabi_ddiv+0x388>)
 80017b2:	4458      	add	r0, fp
 80017b4:	469b      	mov	fp, r3
 80017b6:	4483      	add	fp, r0
 80017b8:	2000      	movs	r0, #0
 80017ba:	e6d9      	b.n	8001570 <__aeabi_ddiv+0x80>
 80017bc:	0003      	movs	r3, r0
 80017be:	4323      	orrs	r3, r4
 80017c0:	4698      	mov	r8, r3
 80017c2:	d044      	beq.n	800184e <__aeabi_ddiv+0x35e>
 80017c4:	2c00      	cmp	r4, #0
 80017c6:	d100      	bne.n	80017ca <__aeabi_ddiv+0x2da>
 80017c8:	e0cf      	b.n	800196a <__aeabi_ddiv+0x47a>
 80017ca:	0020      	movs	r0, r4
 80017cc:	f001 f9ea 	bl	8002ba4 <__clzsi2>
 80017d0:	0001      	movs	r1, r0
 80017d2:	0002      	movs	r2, r0
 80017d4:	390b      	subs	r1, #11
 80017d6:	231d      	movs	r3, #29
 80017d8:	1a5b      	subs	r3, r3, r1
 80017da:	4649      	mov	r1, r9
 80017dc:	0010      	movs	r0, r2
 80017de:	40d9      	lsrs	r1, r3
 80017e0:	3808      	subs	r0, #8
 80017e2:	4084      	lsls	r4, r0
 80017e4:	000b      	movs	r3, r1
 80017e6:	464d      	mov	r5, r9
 80017e8:	4323      	orrs	r3, r4
 80017ea:	4698      	mov	r8, r3
 80017ec:	4085      	lsls	r5, r0
 80017ee:	4b23      	ldr	r3, [pc, #140]	; (800187c <__aeabi_ddiv+0x38c>)
 80017f0:	1a9b      	subs	r3, r3, r2
 80017f2:	469b      	mov	fp, r3
 80017f4:	2300      	movs	r3, #0
 80017f6:	4699      	mov	r9, r3
 80017f8:	9300      	str	r3, [sp, #0]
 80017fa:	e69e      	b.n	800153a <__aeabi_ddiv+0x4a>
 80017fc:	0002      	movs	r2, r0
 80017fe:	4322      	orrs	r2, r4
 8001800:	4690      	mov	r8, r2
 8001802:	d11d      	bne.n	8001840 <__aeabi_ddiv+0x350>
 8001804:	2208      	movs	r2, #8
 8001806:	469b      	mov	fp, r3
 8001808:	2302      	movs	r3, #2
 800180a:	2500      	movs	r5, #0
 800180c:	4691      	mov	r9, r2
 800180e:	9300      	str	r3, [sp, #0]
 8001810:	e693      	b.n	800153a <__aeabi_ddiv+0x4a>
 8001812:	4651      	mov	r1, sl
 8001814:	4321      	orrs	r1, r4
 8001816:	d109      	bne.n	800182c <__aeabi_ddiv+0x33c>
 8001818:	2302      	movs	r3, #2
 800181a:	464a      	mov	r2, r9
 800181c:	431a      	orrs	r2, r3
 800181e:	4b18      	ldr	r3, [pc, #96]	; (8001880 <__aeabi_ddiv+0x390>)
 8001820:	4691      	mov	r9, r2
 8001822:	469c      	mov	ip, r3
 8001824:	2400      	movs	r4, #0
 8001826:	2002      	movs	r0, #2
 8001828:	44e3      	add	fp, ip
 800182a:	e6a1      	b.n	8001570 <__aeabi_ddiv+0x80>
 800182c:	2303      	movs	r3, #3
 800182e:	464a      	mov	r2, r9
 8001830:	431a      	orrs	r2, r3
 8001832:	4b13      	ldr	r3, [pc, #76]	; (8001880 <__aeabi_ddiv+0x390>)
 8001834:	4691      	mov	r9, r2
 8001836:	469c      	mov	ip, r3
 8001838:	4651      	mov	r1, sl
 800183a:	2003      	movs	r0, #3
 800183c:	44e3      	add	fp, ip
 800183e:	e697      	b.n	8001570 <__aeabi_ddiv+0x80>
 8001840:	220c      	movs	r2, #12
 8001842:	469b      	mov	fp, r3
 8001844:	2303      	movs	r3, #3
 8001846:	46a0      	mov	r8, r4
 8001848:	4691      	mov	r9, r2
 800184a:	9300      	str	r3, [sp, #0]
 800184c:	e675      	b.n	800153a <__aeabi_ddiv+0x4a>
 800184e:	2304      	movs	r3, #4
 8001850:	4699      	mov	r9, r3
 8001852:	2300      	movs	r3, #0
 8001854:	469b      	mov	fp, r3
 8001856:	3301      	adds	r3, #1
 8001858:	2500      	movs	r5, #0
 800185a:	9300      	str	r3, [sp, #0]
 800185c:	e66d      	b.n	800153a <__aeabi_ddiv+0x4a>
 800185e:	46c0      	nop			; (mov r8, r8)
 8001860:	000007ff 	.word	0x000007ff
 8001864:	fffffc01 	.word	0xfffffc01
 8001868:	0800783c 	.word	0x0800783c
 800186c:	000003ff 	.word	0x000003ff
 8001870:	feffffff 	.word	0xfeffffff
 8001874:	000007fe 	.word	0x000007fe
 8001878:	000003f3 	.word	0x000003f3
 800187c:	fffffc0d 	.word	0xfffffc0d
 8001880:	fffff801 	.word	0xfffff801
 8001884:	464a      	mov	r2, r9
 8001886:	2301      	movs	r3, #1
 8001888:	431a      	orrs	r2, r3
 800188a:	4691      	mov	r9, r2
 800188c:	2400      	movs	r4, #0
 800188e:	2001      	movs	r0, #1
 8001890:	e66e      	b.n	8001570 <__aeabi_ddiv+0x80>
 8001892:	2300      	movs	r3, #0
 8001894:	2280      	movs	r2, #128	; 0x80
 8001896:	469a      	mov	sl, r3
 8001898:	2500      	movs	r5, #0
 800189a:	4b88      	ldr	r3, [pc, #544]	; (8001abc <__aeabi_ddiv+0x5cc>)
 800189c:	0312      	lsls	r2, r2, #12
 800189e:	e67e      	b.n	800159e <__aeabi_ddiv+0xae>
 80018a0:	2501      	movs	r5, #1
 80018a2:	426d      	negs	r5, r5
 80018a4:	2201      	movs	r2, #1
 80018a6:	1ad2      	subs	r2, r2, r3
 80018a8:	2a38      	cmp	r2, #56	; 0x38
 80018aa:	dd00      	ble.n	80018ae <__aeabi_ddiv+0x3be>
 80018ac:	e674      	b.n	8001598 <__aeabi_ddiv+0xa8>
 80018ae:	2a1f      	cmp	r2, #31
 80018b0:	dc00      	bgt.n	80018b4 <__aeabi_ddiv+0x3c4>
 80018b2:	e0bd      	b.n	8001a30 <__aeabi_ddiv+0x540>
 80018b4:	211f      	movs	r1, #31
 80018b6:	4249      	negs	r1, r1
 80018b8:	1acb      	subs	r3, r1, r3
 80018ba:	4641      	mov	r1, r8
 80018bc:	40d9      	lsrs	r1, r3
 80018be:	000b      	movs	r3, r1
 80018c0:	2a20      	cmp	r2, #32
 80018c2:	d004      	beq.n	80018ce <__aeabi_ddiv+0x3de>
 80018c4:	4641      	mov	r1, r8
 80018c6:	4a7e      	ldr	r2, [pc, #504]	; (8001ac0 <__aeabi_ddiv+0x5d0>)
 80018c8:	445a      	add	r2, fp
 80018ca:	4091      	lsls	r1, r2
 80018cc:	430d      	orrs	r5, r1
 80018ce:	0029      	movs	r1, r5
 80018d0:	1e4a      	subs	r2, r1, #1
 80018d2:	4191      	sbcs	r1, r2
 80018d4:	4319      	orrs	r1, r3
 80018d6:	2307      	movs	r3, #7
 80018d8:	001d      	movs	r5, r3
 80018da:	2200      	movs	r2, #0
 80018dc:	400d      	ands	r5, r1
 80018de:	420b      	tst	r3, r1
 80018e0:	d100      	bne.n	80018e4 <__aeabi_ddiv+0x3f4>
 80018e2:	e0d0      	b.n	8001a86 <__aeabi_ddiv+0x596>
 80018e4:	220f      	movs	r2, #15
 80018e6:	2300      	movs	r3, #0
 80018e8:	400a      	ands	r2, r1
 80018ea:	2a04      	cmp	r2, #4
 80018ec:	d100      	bne.n	80018f0 <__aeabi_ddiv+0x400>
 80018ee:	e0c7      	b.n	8001a80 <__aeabi_ddiv+0x590>
 80018f0:	1d0a      	adds	r2, r1, #4
 80018f2:	428a      	cmp	r2, r1
 80018f4:	4189      	sbcs	r1, r1
 80018f6:	4249      	negs	r1, r1
 80018f8:	185b      	adds	r3, r3, r1
 80018fa:	0011      	movs	r1, r2
 80018fc:	021a      	lsls	r2, r3, #8
 80018fe:	d400      	bmi.n	8001902 <__aeabi_ddiv+0x412>
 8001900:	e0be      	b.n	8001a80 <__aeabi_ddiv+0x590>
 8001902:	2301      	movs	r3, #1
 8001904:	2200      	movs	r2, #0
 8001906:	2500      	movs	r5, #0
 8001908:	e649      	b.n	800159e <__aeabi_ddiv+0xae>
 800190a:	2280      	movs	r2, #128	; 0x80
 800190c:	4643      	mov	r3, r8
 800190e:	0312      	lsls	r2, r2, #12
 8001910:	4213      	tst	r3, r2
 8001912:	d008      	beq.n	8001926 <__aeabi_ddiv+0x436>
 8001914:	4214      	tst	r4, r2
 8001916:	d106      	bne.n	8001926 <__aeabi_ddiv+0x436>
 8001918:	4322      	orrs	r2, r4
 800191a:	0312      	lsls	r2, r2, #12
 800191c:	46ba      	mov	sl, r7
 800191e:	000d      	movs	r5, r1
 8001920:	4b66      	ldr	r3, [pc, #408]	; (8001abc <__aeabi_ddiv+0x5cc>)
 8001922:	0b12      	lsrs	r2, r2, #12
 8001924:	e63b      	b.n	800159e <__aeabi_ddiv+0xae>
 8001926:	2280      	movs	r2, #128	; 0x80
 8001928:	4643      	mov	r3, r8
 800192a:	0312      	lsls	r2, r2, #12
 800192c:	431a      	orrs	r2, r3
 800192e:	0312      	lsls	r2, r2, #12
 8001930:	46b2      	mov	sl, r6
 8001932:	4b62      	ldr	r3, [pc, #392]	; (8001abc <__aeabi_ddiv+0x5cc>)
 8001934:	0b12      	lsrs	r2, r2, #12
 8001936:	e632      	b.n	800159e <__aeabi_ddiv+0xae>
 8001938:	2b00      	cmp	r3, #0
 800193a:	d100      	bne.n	800193e <__aeabi_ddiv+0x44e>
 800193c:	e702      	b.n	8001744 <__aeabi_ddiv+0x254>
 800193e:	19a6      	adds	r6, r4, r6
 8001940:	1e6a      	subs	r2, r5, #1
 8001942:	42a6      	cmp	r6, r4
 8001944:	d200      	bcs.n	8001948 <__aeabi_ddiv+0x458>
 8001946:	e089      	b.n	8001a5c <__aeabi_ddiv+0x56c>
 8001948:	4286      	cmp	r6, r0
 800194a:	d200      	bcs.n	800194e <__aeabi_ddiv+0x45e>
 800194c:	e09f      	b.n	8001a8e <__aeabi_ddiv+0x59e>
 800194e:	d100      	bne.n	8001952 <__aeabi_ddiv+0x462>
 8001950:	e0af      	b.n	8001ab2 <__aeabi_ddiv+0x5c2>
 8001952:	0015      	movs	r5, r2
 8001954:	e6f4      	b.n	8001740 <__aeabi_ddiv+0x250>
 8001956:	42a9      	cmp	r1, r5
 8001958:	d900      	bls.n	800195c <__aeabi_ddiv+0x46c>
 800195a:	e63c      	b.n	80015d6 <__aeabi_ddiv+0xe6>
 800195c:	4643      	mov	r3, r8
 800195e:	07de      	lsls	r6, r3, #31
 8001960:	0858      	lsrs	r0, r3, #1
 8001962:	086b      	lsrs	r3, r5, #1
 8001964:	431e      	orrs	r6, r3
 8001966:	07ed      	lsls	r5, r5, #31
 8001968:	e63c      	b.n	80015e4 <__aeabi_ddiv+0xf4>
 800196a:	f001 f91b 	bl	8002ba4 <__clzsi2>
 800196e:	0001      	movs	r1, r0
 8001970:	0002      	movs	r2, r0
 8001972:	3115      	adds	r1, #21
 8001974:	3220      	adds	r2, #32
 8001976:	291c      	cmp	r1, #28
 8001978:	dc00      	bgt.n	800197c <__aeabi_ddiv+0x48c>
 800197a:	e72c      	b.n	80017d6 <__aeabi_ddiv+0x2e6>
 800197c:	464b      	mov	r3, r9
 800197e:	3808      	subs	r0, #8
 8001980:	4083      	lsls	r3, r0
 8001982:	2500      	movs	r5, #0
 8001984:	4698      	mov	r8, r3
 8001986:	e732      	b.n	80017ee <__aeabi_ddiv+0x2fe>
 8001988:	f001 f90c 	bl	8002ba4 <__clzsi2>
 800198c:	0003      	movs	r3, r0
 800198e:	001a      	movs	r2, r3
 8001990:	3215      	adds	r2, #21
 8001992:	3020      	adds	r0, #32
 8001994:	2a1c      	cmp	r2, #28
 8001996:	dc00      	bgt.n	800199a <__aeabi_ddiv+0x4aa>
 8001998:	e6ff      	b.n	800179a <__aeabi_ddiv+0x2aa>
 800199a:	4654      	mov	r4, sl
 800199c:	3b08      	subs	r3, #8
 800199e:	2100      	movs	r1, #0
 80019a0:	409c      	lsls	r4, r3
 80019a2:	e705      	b.n	80017b0 <__aeabi_ddiv+0x2c0>
 80019a4:	1936      	adds	r6, r6, r4
 80019a6:	3b01      	subs	r3, #1
 80019a8:	42b4      	cmp	r4, r6
 80019aa:	d900      	bls.n	80019ae <__aeabi_ddiv+0x4be>
 80019ac:	e6a6      	b.n	80016fc <__aeabi_ddiv+0x20c>
 80019ae:	42b2      	cmp	r2, r6
 80019b0:	d800      	bhi.n	80019b4 <__aeabi_ddiv+0x4c4>
 80019b2:	e6a3      	b.n	80016fc <__aeabi_ddiv+0x20c>
 80019b4:	1e83      	subs	r3, r0, #2
 80019b6:	1936      	adds	r6, r6, r4
 80019b8:	e6a0      	b.n	80016fc <__aeabi_ddiv+0x20c>
 80019ba:	1909      	adds	r1, r1, r4
 80019bc:	3d01      	subs	r5, #1
 80019be:	428c      	cmp	r4, r1
 80019c0:	d900      	bls.n	80019c4 <__aeabi_ddiv+0x4d4>
 80019c2:	e68d      	b.n	80016e0 <__aeabi_ddiv+0x1f0>
 80019c4:	428a      	cmp	r2, r1
 80019c6:	d800      	bhi.n	80019ca <__aeabi_ddiv+0x4da>
 80019c8:	e68a      	b.n	80016e0 <__aeabi_ddiv+0x1f0>
 80019ca:	1e85      	subs	r5, r0, #2
 80019cc:	1909      	adds	r1, r1, r4
 80019ce:	e687      	b.n	80016e0 <__aeabi_ddiv+0x1f0>
 80019d0:	220f      	movs	r2, #15
 80019d2:	402a      	ands	r2, r5
 80019d4:	2a04      	cmp	r2, #4
 80019d6:	d100      	bne.n	80019da <__aeabi_ddiv+0x4ea>
 80019d8:	e6bc      	b.n	8001754 <__aeabi_ddiv+0x264>
 80019da:	1d29      	adds	r1, r5, #4
 80019dc:	42a9      	cmp	r1, r5
 80019de:	41ad      	sbcs	r5, r5
 80019e0:	426d      	negs	r5, r5
 80019e2:	08c9      	lsrs	r1, r1, #3
 80019e4:	44a8      	add	r8, r5
 80019e6:	e6b6      	b.n	8001756 <__aeabi_ddiv+0x266>
 80019e8:	42af      	cmp	r7, r5
 80019ea:	d900      	bls.n	80019ee <__aeabi_ddiv+0x4fe>
 80019ec:	e662      	b.n	80016b4 <__aeabi_ddiv+0x1c4>
 80019ee:	4281      	cmp	r1, r0
 80019f0:	d804      	bhi.n	80019fc <__aeabi_ddiv+0x50c>
 80019f2:	d000      	beq.n	80019f6 <__aeabi_ddiv+0x506>
 80019f4:	e65e      	b.n	80016b4 <__aeabi_ddiv+0x1c4>
 80019f6:	42ae      	cmp	r6, r5
 80019f8:	d800      	bhi.n	80019fc <__aeabi_ddiv+0x50c>
 80019fa:	e65b      	b.n	80016b4 <__aeabi_ddiv+0x1c4>
 80019fc:	2302      	movs	r3, #2
 80019fe:	425b      	negs	r3, r3
 8001a00:	469c      	mov	ip, r3
 8001a02:	9b00      	ldr	r3, [sp, #0]
 8001a04:	44e0      	add	r8, ip
 8001a06:	469c      	mov	ip, r3
 8001a08:	4465      	add	r5, ip
 8001a0a:	429d      	cmp	r5, r3
 8001a0c:	419b      	sbcs	r3, r3
 8001a0e:	425b      	negs	r3, r3
 8001a10:	191b      	adds	r3, r3, r4
 8001a12:	18c0      	adds	r0, r0, r3
 8001a14:	e64f      	b.n	80016b6 <__aeabi_ddiv+0x1c6>
 8001a16:	42b2      	cmp	r2, r6
 8001a18:	d800      	bhi.n	8001a1c <__aeabi_ddiv+0x52c>
 8001a1a:	e612      	b.n	8001642 <__aeabi_ddiv+0x152>
 8001a1c:	1e83      	subs	r3, r0, #2
 8001a1e:	1936      	adds	r6, r6, r4
 8001a20:	e60f      	b.n	8001642 <__aeabi_ddiv+0x152>
 8001a22:	428a      	cmp	r2, r1
 8001a24:	d800      	bhi.n	8001a28 <__aeabi_ddiv+0x538>
 8001a26:	e5fa      	b.n	800161e <__aeabi_ddiv+0x12e>
 8001a28:	1e83      	subs	r3, r0, #2
 8001a2a:	4698      	mov	r8, r3
 8001a2c:	1909      	adds	r1, r1, r4
 8001a2e:	e5f6      	b.n	800161e <__aeabi_ddiv+0x12e>
 8001a30:	4b24      	ldr	r3, [pc, #144]	; (8001ac4 <__aeabi_ddiv+0x5d4>)
 8001a32:	0028      	movs	r0, r5
 8001a34:	445b      	add	r3, fp
 8001a36:	4641      	mov	r1, r8
 8001a38:	409d      	lsls	r5, r3
 8001a3a:	4099      	lsls	r1, r3
 8001a3c:	40d0      	lsrs	r0, r2
 8001a3e:	1e6b      	subs	r3, r5, #1
 8001a40:	419d      	sbcs	r5, r3
 8001a42:	4643      	mov	r3, r8
 8001a44:	4301      	orrs	r1, r0
 8001a46:	4329      	orrs	r1, r5
 8001a48:	40d3      	lsrs	r3, r2
 8001a4a:	074a      	lsls	r2, r1, #29
 8001a4c:	d100      	bne.n	8001a50 <__aeabi_ddiv+0x560>
 8001a4e:	e755      	b.n	80018fc <__aeabi_ddiv+0x40c>
 8001a50:	220f      	movs	r2, #15
 8001a52:	400a      	ands	r2, r1
 8001a54:	2a04      	cmp	r2, #4
 8001a56:	d000      	beq.n	8001a5a <__aeabi_ddiv+0x56a>
 8001a58:	e74a      	b.n	80018f0 <__aeabi_ddiv+0x400>
 8001a5a:	e74f      	b.n	80018fc <__aeabi_ddiv+0x40c>
 8001a5c:	0015      	movs	r5, r2
 8001a5e:	4286      	cmp	r6, r0
 8001a60:	d000      	beq.n	8001a64 <__aeabi_ddiv+0x574>
 8001a62:	e66d      	b.n	8001740 <__aeabi_ddiv+0x250>
 8001a64:	9a00      	ldr	r2, [sp, #0]
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d000      	beq.n	8001a6c <__aeabi_ddiv+0x57c>
 8001a6a:	e669      	b.n	8001740 <__aeabi_ddiv+0x250>
 8001a6c:	e66a      	b.n	8001744 <__aeabi_ddiv+0x254>
 8001a6e:	4b16      	ldr	r3, [pc, #88]	; (8001ac8 <__aeabi_ddiv+0x5d8>)
 8001a70:	445b      	add	r3, fp
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	dc00      	bgt.n	8001a78 <__aeabi_ddiv+0x588>
 8001a76:	e713      	b.n	80018a0 <__aeabi_ddiv+0x3b0>
 8001a78:	2501      	movs	r5, #1
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	44a8      	add	r8, r5
 8001a7e:	e66a      	b.n	8001756 <__aeabi_ddiv+0x266>
 8001a80:	075d      	lsls	r5, r3, #29
 8001a82:	025b      	lsls	r3, r3, #9
 8001a84:	0b1a      	lsrs	r2, r3, #12
 8001a86:	08c9      	lsrs	r1, r1, #3
 8001a88:	2300      	movs	r3, #0
 8001a8a:	430d      	orrs	r5, r1
 8001a8c:	e587      	b.n	800159e <__aeabi_ddiv+0xae>
 8001a8e:	9900      	ldr	r1, [sp, #0]
 8001a90:	3d02      	subs	r5, #2
 8001a92:	004a      	lsls	r2, r1, #1
 8001a94:	428a      	cmp	r2, r1
 8001a96:	41bf      	sbcs	r7, r7
 8001a98:	427f      	negs	r7, r7
 8001a9a:	193f      	adds	r7, r7, r4
 8001a9c:	19f6      	adds	r6, r6, r7
 8001a9e:	9200      	str	r2, [sp, #0]
 8001aa0:	e7dd      	b.n	8001a5e <__aeabi_ddiv+0x56e>
 8001aa2:	2280      	movs	r2, #128	; 0x80
 8001aa4:	4643      	mov	r3, r8
 8001aa6:	0312      	lsls	r2, r2, #12
 8001aa8:	431a      	orrs	r2, r3
 8001aaa:	0312      	lsls	r2, r2, #12
 8001aac:	4b03      	ldr	r3, [pc, #12]	; (8001abc <__aeabi_ddiv+0x5cc>)
 8001aae:	0b12      	lsrs	r2, r2, #12
 8001ab0:	e575      	b.n	800159e <__aeabi_ddiv+0xae>
 8001ab2:	9900      	ldr	r1, [sp, #0]
 8001ab4:	4299      	cmp	r1, r3
 8001ab6:	d3ea      	bcc.n	8001a8e <__aeabi_ddiv+0x59e>
 8001ab8:	0015      	movs	r5, r2
 8001aba:	e7d3      	b.n	8001a64 <__aeabi_ddiv+0x574>
 8001abc:	000007ff 	.word	0x000007ff
 8001ac0:	0000043e 	.word	0x0000043e
 8001ac4:	0000041e 	.word	0x0000041e
 8001ac8:	000003ff 	.word	0x000003ff

08001acc <__eqdf2>:
 8001acc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ace:	464e      	mov	r6, r9
 8001ad0:	4645      	mov	r5, r8
 8001ad2:	46de      	mov	lr, fp
 8001ad4:	4657      	mov	r7, sl
 8001ad6:	4690      	mov	r8, r2
 8001ad8:	b5e0      	push	{r5, r6, r7, lr}
 8001ada:	0017      	movs	r7, r2
 8001adc:	031a      	lsls	r2, r3, #12
 8001ade:	0b12      	lsrs	r2, r2, #12
 8001ae0:	0005      	movs	r5, r0
 8001ae2:	4684      	mov	ip, r0
 8001ae4:	4819      	ldr	r0, [pc, #100]	; (8001b4c <__eqdf2+0x80>)
 8001ae6:	030e      	lsls	r6, r1, #12
 8001ae8:	004c      	lsls	r4, r1, #1
 8001aea:	4691      	mov	r9, r2
 8001aec:	005a      	lsls	r2, r3, #1
 8001aee:	0fdb      	lsrs	r3, r3, #31
 8001af0:	469b      	mov	fp, r3
 8001af2:	0b36      	lsrs	r6, r6, #12
 8001af4:	0d64      	lsrs	r4, r4, #21
 8001af6:	0fc9      	lsrs	r1, r1, #31
 8001af8:	0d52      	lsrs	r2, r2, #21
 8001afa:	4284      	cmp	r4, r0
 8001afc:	d019      	beq.n	8001b32 <__eqdf2+0x66>
 8001afe:	4282      	cmp	r2, r0
 8001b00:	d010      	beq.n	8001b24 <__eqdf2+0x58>
 8001b02:	2001      	movs	r0, #1
 8001b04:	4294      	cmp	r4, r2
 8001b06:	d10e      	bne.n	8001b26 <__eqdf2+0x5a>
 8001b08:	454e      	cmp	r6, r9
 8001b0a:	d10c      	bne.n	8001b26 <__eqdf2+0x5a>
 8001b0c:	2001      	movs	r0, #1
 8001b0e:	45c4      	cmp	ip, r8
 8001b10:	d109      	bne.n	8001b26 <__eqdf2+0x5a>
 8001b12:	4559      	cmp	r1, fp
 8001b14:	d017      	beq.n	8001b46 <__eqdf2+0x7a>
 8001b16:	2c00      	cmp	r4, #0
 8001b18:	d105      	bne.n	8001b26 <__eqdf2+0x5a>
 8001b1a:	0030      	movs	r0, r6
 8001b1c:	4328      	orrs	r0, r5
 8001b1e:	1e43      	subs	r3, r0, #1
 8001b20:	4198      	sbcs	r0, r3
 8001b22:	e000      	b.n	8001b26 <__eqdf2+0x5a>
 8001b24:	2001      	movs	r0, #1
 8001b26:	bcf0      	pop	{r4, r5, r6, r7}
 8001b28:	46bb      	mov	fp, r7
 8001b2a:	46b2      	mov	sl, r6
 8001b2c:	46a9      	mov	r9, r5
 8001b2e:	46a0      	mov	r8, r4
 8001b30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b32:	0033      	movs	r3, r6
 8001b34:	2001      	movs	r0, #1
 8001b36:	432b      	orrs	r3, r5
 8001b38:	d1f5      	bne.n	8001b26 <__eqdf2+0x5a>
 8001b3a:	42a2      	cmp	r2, r4
 8001b3c:	d1f3      	bne.n	8001b26 <__eqdf2+0x5a>
 8001b3e:	464b      	mov	r3, r9
 8001b40:	433b      	orrs	r3, r7
 8001b42:	d1f0      	bne.n	8001b26 <__eqdf2+0x5a>
 8001b44:	e7e2      	b.n	8001b0c <__eqdf2+0x40>
 8001b46:	2000      	movs	r0, #0
 8001b48:	e7ed      	b.n	8001b26 <__eqdf2+0x5a>
 8001b4a:	46c0      	nop			; (mov r8, r8)
 8001b4c:	000007ff 	.word	0x000007ff

08001b50 <__gedf2>:
 8001b50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b52:	4647      	mov	r7, r8
 8001b54:	46ce      	mov	lr, r9
 8001b56:	0004      	movs	r4, r0
 8001b58:	0018      	movs	r0, r3
 8001b5a:	0016      	movs	r6, r2
 8001b5c:	031b      	lsls	r3, r3, #12
 8001b5e:	0b1b      	lsrs	r3, r3, #12
 8001b60:	4d2d      	ldr	r5, [pc, #180]	; (8001c18 <__gedf2+0xc8>)
 8001b62:	004a      	lsls	r2, r1, #1
 8001b64:	4699      	mov	r9, r3
 8001b66:	b580      	push	{r7, lr}
 8001b68:	0043      	lsls	r3, r0, #1
 8001b6a:	030f      	lsls	r7, r1, #12
 8001b6c:	46a4      	mov	ip, r4
 8001b6e:	46b0      	mov	r8, r6
 8001b70:	0b3f      	lsrs	r7, r7, #12
 8001b72:	0d52      	lsrs	r2, r2, #21
 8001b74:	0fc9      	lsrs	r1, r1, #31
 8001b76:	0d5b      	lsrs	r3, r3, #21
 8001b78:	0fc0      	lsrs	r0, r0, #31
 8001b7a:	42aa      	cmp	r2, r5
 8001b7c:	d021      	beq.n	8001bc2 <__gedf2+0x72>
 8001b7e:	42ab      	cmp	r3, r5
 8001b80:	d013      	beq.n	8001baa <__gedf2+0x5a>
 8001b82:	2a00      	cmp	r2, #0
 8001b84:	d122      	bne.n	8001bcc <__gedf2+0x7c>
 8001b86:	433c      	orrs	r4, r7
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d102      	bne.n	8001b92 <__gedf2+0x42>
 8001b8c:	464d      	mov	r5, r9
 8001b8e:	432e      	orrs	r6, r5
 8001b90:	d022      	beq.n	8001bd8 <__gedf2+0x88>
 8001b92:	2c00      	cmp	r4, #0
 8001b94:	d010      	beq.n	8001bb8 <__gedf2+0x68>
 8001b96:	4281      	cmp	r1, r0
 8001b98:	d022      	beq.n	8001be0 <__gedf2+0x90>
 8001b9a:	2002      	movs	r0, #2
 8001b9c:	3901      	subs	r1, #1
 8001b9e:	4008      	ands	r0, r1
 8001ba0:	3801      	subs	r0, #1
 8001ba2:	bcc0      	pop	{r6, r7}
 8001ba4:	46b9      	mov	r9, r7
 8001ba6:	46b0      	mov	r8, r6
 8001ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001baa:	464d      	mov	r5, r9
 8001bac:	432e      	orrs	r6, r5
 8001bae:	d129      	bne.n	8001c04 <__gedf2+0xb4>
 8001bb0:	2a00      	cmp	r2, #0
 8001bb2:	d1f0      	bne.n	8001b96 <__gedf2+0x46>
 8001bb4:	433c      	orrs	r4, r7
 8001bb6:	d1ee      	bne.n	8001b96 <__gedf2+0x46>
 8001bb8:	2800      	cmp	r0, #0
 8001bba:	d1f2      	bne.n	8001ba2 <__gedf2+0x52>
 8001bbc:	2001      	movs	r0, #1
 8001bbe:	4240      	negs	r0, r0
 8001bc0:	e7ef      	b.n	8001ba2 <__gedf2+0x52>
 8001bc2:	003d      	movs	r5, r7
 8001bc4:	4325      	orrs	r5, r4
 8001bc6:	d11d      	bne.n	8001c04 <__gedf2+0xb4>
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d0ee      	beq.n	8001baa <__gedf2+0x5a>
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d1e2      	bne.n	8001b96 <__gedf2+0x46>
 8001bd0:	464c      	mov	r4, r9
 8001bd2:	4326      	orrs	r6, r4
 8001bd4:	d1df      	bne.n	8001b96 <__gedf2+0x46>
 8001bd6:	e7e0      	b.n	8001b9a <__gedf2+0x4a>
 8001bd8:	2000      	movs	r0, #0
 8001bda:	2c00      	cmp	r4, #0
 8001bdc:	d0e1      	beq.n	8001ba2 <__gedf2+0x52>
 8001bde:	e7dc      	b.n	8001b9a <__gedf2+0x4a>
 8001be0:	429a      	cmp	r2, r3
 8001be2:	dc0a      	bgt.n	8001bfa <__gedf2+0xaa>
 8001be4:	dbe8      	blt.n	8001bb8 <__gedf2+0x68>
 8001be6:	454f      	cmp	r7, r9
 8001be8:	d8d7      	bhi.n	8001b9a <__gedf2+0x4a>
 8001bea:	d00e      	beq.n	8001c0a <__gedf2+0xba>
 8001bec:	2000      	movs	r0, #0
 8001bee:	454f      	cmp	r7, r9
 8001bf0:	d2d7      	bcs.n	8001ba2 <__gedf2+0x52>
 8001bf2:	2900      	cmp	r1, #0
 8001bf4:	d0e2      	beq.n	8001bbc <__gedf2+0x6c>
 8001bf6:	0008      	movs	r0, r1
 8001bf8:	e7d3      	b.n	8001ba2 <__gedf2+0x52>
 8001bfa:	4243      	negs	r3, r0
 8001bfc:	4158      	adcs	r0, r3
 8001bfe:	0040      	lsls	r0, r0, #1
 8001c00:	3801      	subs	r0, #1
 8001c02:	e7ce      	b.n	8001ba2 <__gedf2+0x52>
 8001c04:	2002      	movs	r0, #2
 8001c06:	4240      	negs	r0, r0
 8001c08:	e7cb      	b.n	8001ba2 <__gedf2+0x52>
 8001c0a:	45c4      	cmp	ip, r8
 8001c0c:	d8c5      	bhi.n	8001b9a <__gedf2+0x4a>
 8001c0e:	2000      	movs	r0, #0
 8001c10:	45c4      	cmp	ip, r8
 8001c12:	d2c6      	bcs.n	8001ba2 <__gedf2+0x52>
 8001c14:	e7ed      	b.n	8001bf2 <__gedf2+0xa2>
 8001c16:	46c0      	nop			; (mov r8, r8)
 8001c18:	000007ff 	.word	0x000007ff

08001c1c <__ledf2>:
 8001c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c1e:	4647      	mov	r7, r8
 8001c20:	46ce      	mov	lr, r9
 8001c22:	0004      	movs	r4, r0
 8001c24:	0018      	movs	r0, r3
 8001c26:	0016      	movs	r6, r2
 8001c28:	031b      	lsls	r3, r3, #12
 8001c2a:	0b1b      	lsrs	r3, r3, #12
 8001c2c:	4d2c      	ldr	r5, [pc, #176]	; (8001ce0 <__ledf2+0xc4>)
 8001c2e:	004a      	lsls	r2, r1, #1
 8001c30:	4699      	mov	r9, r3
 8001c32:	b580      	push	{r7, lr}
 8001c34:	0043      	lsls	r3, r0, #1
 8001c36:	030f      	lsls	r7, r1, #12
 8001c38:	46a4      	mov	ip, r4
 8001c3a:	46b0      	mov	r8, r6
 8001c3c:	0b3f      	lsrs	r7, r7, #12
 8001c3e:	0d52      	lsrs	r2, r2, #21
 8001c40:	0fc9      	lsrs	r1, r1, #31
 8001c42:	0d5b      	lsrs	r3, r3, #21
 8001c44:	0fc0      	lsrs	r0, r0, #31
 8001c46:	42aa      	cmp	r2, r5
 8001c48:	d00d      	beq.n	8001c66 <__ledf2+0x4a>
 8001c4a:	42ab      	cmp	r3, r5
 8001c4c:	d010      	beq.n	8001c70 <__ledf2+0x54>
 8001c4e:	2a00      	cmp	r2, #0
 8001c50:	d127      	bne.n	8001ca2 <__ledf2+0x86>
 8001c52:	433c      	orrs	r4, r7
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d111      	bne.n	8001c7c <__ledf2+0x60>
 8001c58:	464d      	mov	r5, r9
 8001c5a:	432e      	orrs	r6, r5
 8001c5c:	d10e      	bne.n	8001c7c <__ledf2+0x60>
 8001c5e:	2000      	movs	r0, #0
 8001c60:	2c00      	cmp	r4, #0
 8001c62:	d015      	beq.n	8001c90 <__ledf2+0x74>
 8001c64:	e00e      	b.n	8001c84 <__ledf2+0x68>
 8001c66:	003d      	movs	r5, r7
 8001c68:	4325      	orrs	r5, r4
 8001c6a:	d110      	bne.n	8001c8e <__ledf2+0x72>
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d118      	bne.n	8001ca2 <__ledf2+0x86>
 8001c70:	464d      	mov	r5, r9
 8001c72:	432e      	orrs	r6, r5
 8001c74:	d10b      	bne.n	8001c8e <__ledf2+0x72>
 8001c76:	2a00      	cmp	r2, #0
 8001c78:	d102      	bne.n	8001c80 <__ledf2+0x64>
 8001c7a:	433c      	orrs	r4, r7
 8001c7c:	2c00      	cmp	r4, #0
 8001c7e:	d00b      	beq.n	8001c98 <__ledf2+0x7c>
 8001c80:	4281      	cmp	r1, r0
 8001c82:	d014      	beq.n	8001cae <__ledf2+0x92>
 8001c84:	2002      	movs	r0, #2
 8001c86:	3901      	subs	r1, #1
 8001c88:	4008      	ands	r0, r1
 8001c8a:	3801      	subs	r0, #1
 8001c8c:	e000      	b.n	8001c90 <__ledf2+0x74>
 8001c8e:	2002      	movs	r0, #2
 8001c90:	bcc0      	pop	{r6, r7}
 8001c92:	46b9      	mov	r9, r7
 8001c94:	46b0      	mov	r8, r6
 8001c96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c98:	2800      	cmp	r0, #0
 8001c9a:	d1f9      	bne.n	8001c90 <__ledf2+0x74>
 8001c9c:	2001      	movs	r0, #1
 8001c9e:	4240      	negs	r0, r0
 8001ca0:	e7f6      	b.n	8001c90 <__ledf2+0x74>
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d1ec      	bne.n	8001c80 <__ledf2+0x64>
 8001ca6:	464c      	mov	r4, r9
 8001ca8:	4326      	orrs	r6, r4
 8001caa:	d1e9      	bne.n	8001c80 <__ledf2+0x64>
 8001cac:	e7ea      	b.n	8001c84 <__ledf2+0x68>
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	dd04      	ble.n	8001cbc <__ledf2+0xa0>
 8001cb2:	4243      	negs	r3, r0
 8001cb4:	4158      	adcs	r0, r3
 8001cb6:	0040      	lsls	r0, r0, #1
 8001cb8:	3801      	subs	r0, #1
 8001cba:	e7e9      	b.n	8001c90 <__ledf2+0x74>
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	dbeb      	blt.n	8001c98 <__ledf2+0x7c>
 8001cc0:	454f      	cmp	r7, r9
 8001cc2:	d8df      	bhi.n	8001c84 <__ledf2+0x68>
 8001cc4:	d006      	beq.n	8001cd4 <__ledf2+0xb8>
 8001cc6:	2000      	movs	r0, #0
 8001cc8:	454f      	cmp	r7, r9
 8001cca:	d2e1      	bcs.n	8001c90 <__ledf2+0x74>
 8001ccc:	2900      	cmp	r1, #0
 8001cce:	d0e5      	beq.n	8001c9c <__ledf2+0x80>
 8001cd0:	0008      	movs	r0, r1
 8001cd2:	e7dd      	b.n	8001c90 <__ledf2+0x74>
 8001cd4:	45c4      	cmp	ip, r8
 8001cd6:	d8d5      	bhi.n	8001c84 <__ledf2+0x68>
 8001cd8:	2000      	movs	r0, #0
 8001cda:	45c4      	cmp	ip, r8
 8001cdc:	d2d8      	bcs.n	8001c90 <__ledf2+0x74>
 8001cde:	e7f5      	b.n	8001ccc <__ledf2+0xb0>
 8001ce0:	000007ff 	.word	0x000007ff

08001ce4 <__aeabi_dmul>:
 8001ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ce6:	4645      	mov	r5, r8
 8001ce8:	46de      	mov	lr, fp
 8001cea:	4657      	mov	r7, sl
 8001cec:	464e      	mov	r6, r9
 8001cee:	b5e0      	push	{r5, r6, r7, lr}
 8001cf0:	001f      	movs	r7, r3
 8001cf2:	030b      	lsls	r3, r1, #12
 8001cf4:	0b1b      	lsrs	r3, r3, #12
 8001cf6:	469b      	mov	fp, r3
 8001cf8:	004d      	lsls	r5, r1, #1
 8001cfa:	0fcb      	lsrs	r3, r1, #31
 8001cfc:	0004      	movs	r4, r0
 8001cfe:	4691      	mov	r9, r2
 8001d00:	4698      	mov	r8, r3
 8001d02:	b087      	sub	sp, #28
 8001d04:	0d6d      	lsrs	r5, r5, #21
 8001d06:	d100      	bne.n	8001d0a <__aeabi_dmul+0x26>
 8001d08:	e1cd      	b.n	80020a6 <__aeabi_dmul+0x3c2>
 8001d0a:	4bce      	ldr	r3, [pc, #824]	; (8002044 <__aeabi_dmul+0x360>)
 8001d0c:	429d      	cmp	r5, r3
 8001d0e:	d100      	bne.n	8001d12 <__aeabi_dmul+0x2e>
 8001d10:	e1e9      	b.n	80020e6 <__aeabi_dmul+0x402>
 8001d12:	465a      	mov	r2, fp
 8001d14:	0f43      	lsrs	r3, r0, #29
 8001d16:	00d2      	lsls	r2, r2, #3
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	2280      	movs	r2, #128	; 0x80
 8001d1c:	0412      	lsls	r2, r2, #16
 8001d1e:	431a      	orrs	r2, r3
 8001d20:	00c3      	lsls	r3, r0, #3
 8001d22:	469a      	mov	sl, r3
 8001d24:	4bc8      	ldr	r3, [pc, #800]	; (8002048 <__aeabi_dmul+0x364>)
 8001d26:	4693      	mov	fp, r2
 8001d28:	469c      	mov	ip, r3
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	2600      	movs	r6, #0
 8001d2e:	4465      	add	r5, ip
 8001d30:	9300      	str	r3, [sp, #0]
 8001d32:	033c      	lsls	r4, r7, #12
 8001d34:	007b      	lsls	r3, r7, #1
 8001d36:	4648      	mov	r0, r9
 8001d38:	0b24      	lsrs	r4, r4, #12
 8001d3a:	0d5b      	lsrs	r3, r3, #21
 8001d3c:	0fff      	lsrs	r7, r7, #31
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d100      	bne.n	8001d44 <__aeabi_dmul+0x60>
 8001d42:	e189      	b.n	8002058 <__aeabi_dmul+0x374>
 8001d44:	4abf      	ldr	r2, [pc, #764]	; (8002044 <__aeabi_dmul+0x360>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d019      	beq.n	8001d7e <__aeabi_dmul+0x9a>
 8001d4a:	0f42      	lsrs	r2, r0, #29
 8001d4c:	00e4      	lsls	r4, r4, #3
 8001d4e:	4322      	orrs	r2, r4
 8001d50:	2480      	movs	r4, #128	; 0x80
 8001d52:	0424      	lsls	r4, r4, #16
 8001d54:	4314      	orrs	r4, r2
 8001d56:	4abc      	ldr	r2, [pc, #752]	; (8002048 <__aeabi_dmul+0x364>)
 8001d58:	2100      	movs	r1, #0
 8001d5a:	4694      	mov	ip, r2
 8001d5c:	4642      	mov	r2, r8
 8001d5e:	4463      	add	r3, ip
 8001d60:	195b      	adds	r3, r3, r5
 8001d62:	9301      	str	r3, [sp, #4]
 8001d64:	9b01      	ldr	r3, [sp, #4]
 8001d66:	407a      	eors	r2, r7
 8001d68:	3301      	adds	r3, #1
 8001d6a:	00c0      	lsls	r0, r0, #3
 8001d6c:	b2d2      	uxtb	r2, r2
 8001d6e:	9302      	str	r3, [sp, #8]
 8001d70:	2e0a      	cmp	r6, #10
 8001d72:	dd1c      	ble.n	8001dae <__aeabi_dmul+0xca>
 8001d74:	003a      	movs	r2, r7
 8001d76:	2e0b      	cmp	r6, #11
 8001d78:	d05e      	beq.n	8001e38 <__aeabi_dmul+0x154>
 8001d7a:	4647      	mov	r7, r8
 8001d7c:	e056      	b.n	8001e2c <__aeabi_dmul+0x148>
 8001d7e:	4649      	mov	r1, r9
 8001d80:	4bb0      	ldr	r3, [pc, #704]	; (8002044 <__aeabi_dmul+0x360>)
 8001d82:	4321      	orrs	r1, r4
 8001d84:	18eb      	adds	r3, r5, r3
 8001d86:	9301      	str	r3, [sp, #4]
 8001d88:	2900      	cmp	r1, #0
 8001d8a:	d12a      	bne.n	8001de2 <__aeabi_dmul+0xfe>
 8001d8c:	2080      	movs	r0, #128	; 0x80
 8001d8e:	2202      	movs	r2, #2
 8001d90:	0100      	lsls	r0, r0, #4
 8001d92:	002b      	movs	r3, r5
 8001d94:	4684      	mov	ip, r0
 8001d96:	4316      	orrs	r6, r2
 8001d98:	4642      	mov	r2, r8
 8001d9a:	4463      	add	r3, ip
 8001d9c:	407a      	eors	r2, r7
 8001d9e:	b2d2      	uxtb	r2, r2
 8001da0:	9302      	str	r3, [sp, #8]
 8001da2:	2e0a      	cmp	r6, #10
 8001da4:	dd00      	ble.n	8001da8 <__aeabi_dmul+0xc4>
 8001da6:	e231      	b.n	800220c <__aeabi_dmul+0x528>
 8001da8:	2000      	movs	r0, #0
 8001daa:	2400      	movs	r4, #0
 8001dac:	2102      	movs	r1, #2
 8001dae:	2e02      	cmp	r6, #2
 8001db0:	dc26      	bgt.n	8001e00 <__aeabi_dmul+0x11c>
 8001db2:	3e01      	subs	r6, #1
 8001db4:	2e01      	cmp	r6, #1
 8001db6:	d852      	bhi.n	8001e5e <__aeabi_dmul+0x17a>
 8001db8:	2902      	cmp	r1, #2
 8001dba:	d04c      	beq.n	8001e56 <__aeabi_dmul+0x172>
 8001dbc:	2901      	cmp	r1, #1
 8001dbe:	d000      	beq.n	8001dc2 <__aeabi_dmul+0xde>
 8001dc0:	e118      	b.n	8001ff4 <__aeabi_dmul+0x310>
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	2400      	movs	r4, #0
 8001dc6:	2500      	movs	r5, #0
 8001dc8:	051b      	lsls	r3, r3, #20
 8001dca:	4323      	orrs	r3, r4
 8001dcc:	07d2      	lsls	r2, r2, #31
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	0028      	movs	r0, r5
 8001dd2:	0019      	movs	r1, r3
 8001dd4:	b007      	add	sp, #28
 8001dd6:	bcf0      	pop	{r4, r5, r6, r7}
 8001dd8:	46bb      	mov	fp, r7
 8001dda:	46b2      	mov	sl, r6
 8001ddc:	46a9      	mov	r9, r5
 8001dde:	46a0      	mov	r8, r4
 8001de0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001de2:	2180      	movs	r1, #128	; 0x80
 8001de4:	2203      	movs	r2, #3
 8001de6:	0109      	lsls	r1, r1, #4
 8001de8:	002b      	movs	r3, r5
 8001dea:	468c      	mov	ip, r1
 8001dec:	4316      	orrs	r6, r2
 8001dee:	4642      	mov	r2, r8
 8001df0:	4463      	add	r3, ip
 8001df2:	407a      	eors	r2, r7
 8001df4:	b2d2      	uxtb	r2, r2
 8001df6:	9302      	str	r3, [sp, #8]
 8001df8:	2e0a      	cmp	r6, #10
 8001dfa:	dd00      	ble.n	8001dfe <__aeabi_dmul+0x11a>
 8001dfc:	e228      	b.n	8002250 <__aeabi_dmul+0x56c>
 8001dfe:	2103      	movs	r1, #3
 8001e00:	2501      	movs	r5, #1
 8001e02:	40b5      	lsls	r5, r6
 8001e04:	46ac      	mov	ip, r5
 8001e06:	26a6      	movs	r6, #166	; 0xa6
 8001e08:	4663      	mov	r3, ip
 8001e0a:	00f6      	lsls	r6, r6, #3
 8001e0c:	4035      	ands	r5, r6
 8001e0e:	4233      	tst	r3, r6
 8001e10:	d10b      	bne.n	8001e2a <__aeabi_dmul+0x146>
 8001e12:	2690      	movs	r6, #144	; 0x90
 8001e14:	00b6      	lsls	r6, r6, #2
 8001e16:	4233      	tst	r3, r6
 8001e18:	d118      	bne.n	8001e4c <__aeabi_dmul+0x168>
 8001e1a:	3eb9      	subs	r6, #185	; 0xb9
 8001e1c:	3eff      	subs	r6, #255	; 0xff
 8001e1e:	421e      	tst	r6, r3
 8001e20:	d01d      	beq.n	8001e5e <__aeabi_dmul+0x17a>
 8001e22:	46a3      	mov	fp, r4
 8001e24:	4682      	mov	sl, r0
 8001e26:	9100      	str	r1, [sp, #0]
 8001e28:	e000      	b.n	8001e2c <__aeabi_dmul+0x148>
 8001e2a:	0017      	movs	r7, r2
 8001e2c:	9900      	ldr	r1, [sp, #0]
 8001e2e:	003a      	movs	r2, r7
 8001e30:	2902      	cmp	r1, #2
 8001e32:	d010      	beq.n	8001e56 <__aeabi_dmul+0x172>
 8001e34:	465c      	mov	r4, fp
 8001e36:	4650      	mov	r0, sl
 8001e38:	2903      	cmp	r1, #3
 8001e3a:	d1bf      	bne.n	8001dbc <__aeabi_dmul+0xd8>
 8001e3c:	2380      	movs	r3, #128	; 0x80
 8001e3e:	031b      	lsls	r3, r3, #12
 8001e40:	431c      	orrs	r4, r3
 8001e42:	0324      	lsls	r4, r4, #12
 8001e44:	0005      	movs	r5, r0
 8001e46:	4b7f      	ldr	r3, [pc, #508]	; (8002044 <__aeabi_dmul+0x360>)
 8001e48:	0b24      	lsrs	r4, r4, #12
 8001e4a:	e7bd      	b.n	8001dc8 <__aeabi_dmul+0xe4>
 8001e4c:	2480      	movs	r4, #128	; 0x80
 8001e4e:	2200      	movs	r2, #0
 8001e50:	4b7c      	ldr	r3, [pc, #496]	; (8002044 <__aeabi_dmul+0x360>)
 8001e52:	0324      	lsls	r4, r4, #12
 8001e54:	e7b8      	b.n	8001dc8 <__aeabi_dmul+0xe4>
 8001e56:	2400      	movs	r4, #0
 8001e58:	2500      	movs	r5, #0
 8001e5a:	4b7a      	ldr	r3, [pc, #488]	; (8002044 <__aeabi_dmul+0x360>)
 8001e5c:	e7b4      	b.n	8001dc8 <__aeabi_dmul+0xe4>
 8001e5e:	4653      	mov	r3, sl
 8001e60:	041e      	lsls	r6, r3, #16
 8001e62:	0c36      	lsrs	r6, r6, #16
 8001e64:	0c1f      	lsrs	r7, r3, #16
 8001e66:	0033      	movs	r3, r6
 8001e68:	0c01      	lsrs	r1, r0, #16
 8001e6a:	0400      	lsls	r0, r0, #16
 8001e6c:	0c00      	lsrs	r0, r0, #16
 8001e6e:	4343      	muls	r3, r0
 8001e70:	4698      	mov	r8, r3
 8001e72:	0003      	movs	r3, r0
 8001e74:	437b      	muls	r3, r7
 8001e76:	4699      	mov	r9, r3
 8001e78:	0033      	movs	r3, r6
 8001e7a:	434b      	muls	r3, r1
 8001e7c:	469c      	mov	ip, r3
 8001e7e:	4643      	mov	r3, r8
 8001e80:	000d      	movs	r5, r1
 8001e82:	0c1b      	lsrs	r3, r3, #16
 8001e84:	469a      	mov	sl, r3
 8001e86:	437d      	muls	r5, r7
 8001e88:	44cc      	add	ip, r9
 8001e8a:	44d4      	add	ip, sl
 8001e8c:	9500      	str	r5, [sp, #0]
 8001e8e:	45e1      	cmp	r9, ip
 8001e90:	d904      	bls.n	8001e9c <__aeabi_dmul+0x1b8>
 8001e92:	2380      	movs	r3, #128	; 0x80
 8001e94:	025b      	lsls	r3, r3, #9
 8001e96:	4699      	mov	r9, r3
 8001e98:	444d      	add	r5, r9
 8001e9a:	9500      	str	r5, [sp, #0]
 8001e9c:	4663      	mov	r3, ip
 8001e9e:	0c1b      	lsrs	r3, r3, #16
 8001ea0:	001d      	movs	r5, r3
 8001ea2:	4663      	mov	r3, ip
 8001ea4:	041b      	lsls	r3, r3, #16
 8001ea6:	469c      	mov	ip, r3
 8001ea8:	4643      	mov	r3, r8
 8001eaa:	041b      	lsls	r3, r3, #16
 8001eac:	0c1b      	lsrs	r3, r3, #16
 8001eae:	4698      	mov	r8, r3
 8001eb0:	4663      	mov	r3, ip
 8001eb2:	4443      	add	r3, r8
 8001eb4:	9303      	str	r3, [sp, #12]
 8001eb6:	0c23      	lsrs	r3, r4, #16
 8001eb8:	4698      	mov	r8, r3
 8001eba:	0033      	movs	r3, r6
 8001ebc:	0424      	lsls	r4, r4, #16
 8001ebe:	0c24      	lsrs	r4, r4, #16
 8001ec0:	4363      	muls	r3, r4
 8001ec2:	469c      	mov	ip, r3
 8001ec4:	0023      	movs	r3, r4
 8001ec6:	437b      	muls	r3, r7
 8001ec8:	4699      	mov	r9, r3
 8001eca:	4643      	mov	r3, r8
 8001ecc:	435e      	muls	r6, r3
 8001ece:	435f      	muls	r7, r3
 8001ed0:	444e      	add	r6, r9
 8001ed2:	4663      	mov	r3, ip
 8001ed4:	46b2      	mov	sl, r6
 8001ed6:	0c1e      	lsrs	r6, r3, #16
 8001ed8:	4456      	add	r6, sl
 8001eda:	45b1      	cmp	r9, r6
 8001edc:	d903      	bls.n	8001ee6 <__aeabi_dmul+0x202>
 8001ede:	2380      	movs	r3, #128	; 0x80
 8001ee0:	025b      	lsls	r3, r3, #9
 8001ee2:	4699      	mov	r9, r3
 8001ee4:	444f      	add	r7, r9
 8001ee6:	0c33      	lsrs	r3, r6, #16
 8001ee8:	4699      	mov	r9, r3
 8001eea:	003b      	movs	r3, r7
 8001eec:	444b      	add	r3, r9
 8001eee:	9305      	str	r3, [sp, #20]
 8001ef0:	4663      	mov	r3, ip
 8001ef2:	46ac      	mov	ip, r5
 8001ef4:	041f      	lsls	r7, r3, #16
 8001ef6:	0c3f      	lsrs	r7, r7, #16
 8001ef8:	0436      	lsls	r6, r6, #16
 8001efa:	19f6      	adds	r6, r6, r7
 8001efc:	44b4      	add	ip, r6
 8001efe:	4663      	mov	r3, ip
 8001f00:	9304      	str	r3, [sp, #16]
 8001f02:	465b      	mov	r3, fp
 8001f04:	0c1b      	lsrs	r3, r3, #16
 8001f06:	469c      	mov	ip, r3
 8001f08:	465b      	mov	r3, fp
 8001f0a:	041f      	lsls	r7, r3, #16
 8001f0c:	0c3f      	lsrs	r7, r7, #16
 8001f0e:	003b      	movs	r3, r7
 8001f10:	4343      	muls	r3, r0
 8001f12:	4699      	mov	r9, r3
 8001f14:	4663      	mov	r3, ip
 8001f16:	4343      	muls	r3, r0
 8001f18:	469a      	mov	sl, r3
 8001f1a:	464b      	mov	r3, r9
 8001f1c:	4660      	mov	r0, ip
 8001f1e:	0c1b      	lsrs	r3, r3, #16
 8001f20:	469b      	mov	fp, r3
 8001f22:	4348      	muls	r0, r1
 8001f24:	4379      	muls	r1, r7
 8001f26:	4451      	add	r1, sl
 8001f28:	4459      	add	r1, fp
 8001f2a:	458a      	cmp	sl, r1
 8001f2c:	d903      	bls.n	8001f36 <__aeabi_dmul+0x252>
 8001f2e:	2380      	movs	r3, #128	; 0x80
 8001f30:	025b      	lsls	r3, r3, #9
 8001f32:	469a      	mov	sl, r3
 8001f34:	4450      	add	r0, sl
 8001f36:	0c0b      	lsrs	r3, r1, #16
 8001f38:	469a      	mov	sl, r3
 8001f3a:	464b      	mov	r3, r9
 8001f3c:	041b      	lsls	r3, r3, #16
 8001f3e:	0c1b      	lsrs	r3, r3, #16
 8001f40:	4699      	mov	r9, r3
 8001f42:	003b      	movs	r3, r7
 8001f44:	4363      	muls	r3, r4
 8001f46:	0409      	lsls	r1, r1, #16
 8001f48:	4645      	mov	r5, r8
 8001f4a:	4449      	add	r1, r9
 8001f4c:	4699      	mov	r9, r3
 8001f4e:	4663      	mov	r3, ip
 8001f50:	435c      	muls	r4, r3
 8001f52:	436b      	muls	r3, r5
 8001f54:	469c      	mov	ip, r3
 8001f56:	464b      	mov	r3, r9
 8001f58:	0c1b      	lsrs	r3, r3, #16
 8001f5a:	4698      	mov	r8, r3
 8001f5c:	436f      	muls	r7, r5
 8001f5e:	193f      	adds	r7, r7, r4
 8001f60:	4447      	add	r7, r8
 8001f62:	4450      	add	r0, sl
 8001f64:	42bc      	cmp	r4, r7
 8001f66:	d903      	bls.n	8001f70 <__aeabi_dmul+0x28c>
 8001f68:	2380      	movs	r3, #128	; 0x80
 8001f6a:	025b      	lsls	r3, r3, #9
 8001f6c:	4698      	mov	r8, r3
 8001f6e:	44c4      	add	ip, r8
 8001f70:	9b04      	ldr	r3, [sp, #16]
 8001f72:	9d00      	ldr	r5, [sp, #0]
 8001f74:	4698      	mov	r8, r3
 8001f76:	4445      	add	r5, r8
 8001f78:	42b5      	cmp	r5, r6
 8001f7a:	41b6      	sbcs	r6, r6
 8001f7c:	4273      	negs	r3, r6
 8001f7e:	4698      	mov	r8, r3
 8001f80:	464b      	mov	r3, r9
 8001f82:	041e      	lsls	r6, r3, #16
 8001f84:	9b05      	ldr	r3, [sp, #20]
 8001f86:	043c      	lsls	r4, r7, #16
 8001f88:	4699      	mov	r9, r3
 8001f8a:	0c36      	lsrs	r6, r6, #16
 8001f8c:	19a4      	adds	r4, r4, r6
 8001f8e:	444c      	add	r4, r9
 8001f90:	46a1      	mov	r9, r4
 8001f92:	4683      	mov	fp, r0
 8001f94:	186e      	adds	r6, r5, r1
 8001f96:	44c1      	add	r9, r8
 8001f98:	428e      	cmp	r6, r1
 8001f9a:	4189      	sbcs	r1, r1
 8001f9c:	44cb      	add	fp, r9
 8001f9e:	465d      	mov	r5, fp
 8001fa0:	4249      	negs	r1, r1
 8001fa2:	186d      	adds	r5, r5, r1
 8001fa4:	429c      	cmp	r4, r3
 8001fa6:	41a4      	sbcs	r4, r4
 8001fa8:	45c1      	cmp	r9, r8
 8001faa:	419b      	sbcs	r3, r3
 8001fac:	4583      	cmp	fp, r0
 8001fae:	4180      	sbcs	r0, r0
 8001fb0:	428d      	cmp	r5, r1
 8001fb2:	4189      	sbcs	r1, r1
 8001fb4:	425b      	negs	r3, r3
 8001fb6:	4264      	negs	r4, r4
 8001fb8:	431c      	orrs	r4, r3
 8001fba:	4240      	negs	r0, r0
 8001fbc:	9b03      	ldr	r3, [sp, #12]
 8001fbe:	4249      	negs	r1, r1
 8001fc0:	4301      	orrs	r1, r0
 8001fc2:	0270      	lsls	r0, r6, #9
 8001fc4:	0c3f      	lsrs	r7, r7, #16
 8001fc6:	4318      	orrs	r0, r3
 8001fc8:	19e4      	adds	r4, r4, r7
 8001fca:	1e47      	subs	r7, r0, #1
 8001fcc:	41b8      	sbcs	r0, r7
 8001fce:	1864      	adds	r4, r4, r1
 8001fd0:	4464      	add	r4, ip
 8001fd2:	0df6      	lsrs	r6, r6, #23
 8001fd4:	0261      	lsls	r1, r4, #9
 8001fd6:	4330      	orrs	r0, r6
 8001fd8:	0dec      	lsrs	r4, r5, #23
 8001fda:	026e      	lsls	r6, r5, #9
 8001fdc:	430c      	orrs	r4, r1
 8001fde:	4330      	orrs	r0, r6
 8001fe0:	01c9      	lsls	r1, r1, #7
 8001fe2:	d400      	bmi.n	8001fe6 <__aeabi_dmul+0x302>
 8001fe4:	e0f1      	b.n	80021ca <__aeabi_dmul+0x4e6>
 8001fe6:	2101      	movs	r1, #1
 8001fe8:	0843      	lsrs	r3, r0, #1
 8001fea:	4001      	ands	r1, r0
 8001fec:	430b      	orrs	r3, r1
 8001fee:	07e0      	lsls	r0, r4, #31
 8001ff0:	4318      	orrs	r0, r3
 8001ff2:	0864      	lsrs	r4, r4, #1
 8001ff4:	4915      	ldr	r1, [pc, #84]	; (800204c <__aeabi_dmul+0x368>)
 8001ff6:	9b02      	ldr	r3, [sp, #8]
 8001ff8:	468c      	mov	ip, r1
 8001ffa:	4463      	add	r3, ip
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	dc00      	bgt.n	8002002 <__aeabi_dmul+0x31e>
 8002000:	e097      	b.n	8002132 <__aeabi_dmul+0x44e>
 8002002:	0741      	lsls	r1, r0, #29
 8002004:	d009      	beq.n	800201a <__aeabi_dmul+0x336>
 8002006:	210f      	movs	r1, #15
 8002008:	4001      	ands	r1, r0
 800200a:	2904      	cmp	r1, #4
 800200c:	d005      	beq.n	800201a <__aeabi_dmul+0x336>
 800200e:	1d01      	adds	r1, r0, #4
 8002010:	4281      	cmp	r1, r0
 8002012:	4180      	sbcs	r0, r0
 8002014:	4240      	negs	r0, r0
 8002016:	1824      	adds	r4, r4, r0
 8002018:	0008      	movs	r0, r1
 800201a:	01e1      	lsls	r1, r4, #7
 800201c:	d506      	bpl.n	800202c <__aeabi_dmul+0x348>
 800201e:	2180      	movs	r1, #128	; 0x80
 8002020:	00c9      	lsls	r1, r1, #3
 8002022:	468c      	mov	ip, r1
 8002024:	4b0a      	ldr	r3, [pc, #40]	; (8002050 <__aeabi_dmul+0x36c>)
 8002026:	401c      	ands	r4, r3
 8002028:	9b02      	ldr	r3, [sp, #8]
 800202a:	4463      	add	r3, ip
 800202c:	4909      	ldr	r1, [pc, #36]	; (8002054 <__aeabi_dmul+0x370>)
 800202e:	428b      	cmp	r3, r1
 8002030:	dd00      	ble.n	8002034 <__aeabi_dmul+0x350>
 8002032:	e710      	b.n	8001e56 <__aeabi_dmul+0x172>
 8002034:	0761      	lsls	r1, r4, #29
 8002036:	08c5      	lsrs	r5, r0, #3
 8002038:	0264      	lsls	r4, r4, #9
 800203a:	055b      	lsls	r3, r3, #21
 800203c:	430d      	orrs	r5, r1
 800203e:	0b24      	lsrs	r4, r4, #12
 8002040:	0d5b      	lsrs	r3, r3, #21
 8002042:	e6c1      	b.n	8001dc8 <__aeabi_dmul+0xe4>
 8002044:	000007ff 	.word	0x000007ff
 8002048:	fffffc01 	.word	0xfffffc01
 800204c:	000003ff 	.word	0x000003ff
 8002050:	feffffff 	.word	0xfeffffff
 8002054:	000007fe 	.word	0x000007fe
 8002058:	464b      	mov	r3, r9
 800205a:	4323      	orrs	r3, r4
 800205c:	d059      	beq.n	8002112 <__aeabi_dmul+0x42e>
 800205e:	2c00      	cmp	r4, #0
 8002060:	d100      	bne.n	8002064 <__aeabi_dmul+0x380>
 8002062:	e0a3      	b.n	80021ac <__aeabi_dmul+0x4c8>
 8002064:	0020      	movs	r0, r4
 8002066:	f000 fd9d 	bl	8002ba4 <__clzsi2>
 800206a:	0001      	movs	r1, r0
 800206c:	0003      	movs	r3, r0
 800206e:	390b      	subs	r1, #11
 8002070:	221d      	movs	r2, #29
 8002072:	1a52      	subs	r2, r2, r1
 8002074:	4649      	mov	r1, r9
 8002076:	0018      	movs	r0, r3
 8002078:	40d1      	lsrs	r1, r2
 800207a:	464a      	mov	r2, r9
 800207c:	3808      	subs	r0, #8
 800207e:	4082      	lsls	r2, r0
 8002080:	4084      	lsls	r4, r0
 8002082:	0010      	movs	r0, r2
 8002084:	430c      	orrs	r4, r1
 8002086:	4a74      	ldr	r2, [pc, #464]	; (8002258 <__aeabi_dmul+0x574>)
 8002088:	1aeb      	subs	r3, r5, r3
 800208a:	4694      	mov	ip, r2
 800208c:	4642      	mov	r2, r8
 800208e:	4463      	add	r3, ip
 8002090:	9301      	str	r3, [sp, #4]
 8002092:	9b01      	ldr	r3, [sp, #4]
 8002094:	407a      	eors	r2, r7
 8002096:	3301      	adds	r3, #1
 8002098:	2100      	movs	r1, #0
 800209a:	b2d2      	uxtb	r2, r2
 800209c:	9302      	str	r3, [sp, #8]
 800209e:	2e0a      	cmp	r6, #10
 80020a0:	dd00      	ble.n	80020a4 <__aeabi_dmul+0x3c0>
 80020a2:	e667      	b.n	8001d74 <__aeabi_dmul+0x90>
 80020a4:	e683      	b.n	8001dae <__aeabi_dmul+0xca>
 80020a6:	465b      	mov	r3, fp
 80020a8:	4303      	orrs	r3, r0
 80020aa:	469a      	mov	sl, r3
 80020ac:	d02a      	beq.n	8002104 <__aeabi_dmul+0x420>
 80020ae:	465b      	mov	r3, fp
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d06d      	beq.n	8002190 <__aeabi_dmul+0x4ac>
 80020b4:	4658      	mov	r0, fp
 80020b6:	f000 fd75 	bl	8002ba4 <__clzsi2>
 80020ba:	0001      	movs	r1, r0
 80020bc:	0003      	movs	r3, r0
 80020be:	390b      	subs	r1, #11
 80020c0:	221d      	movs	r2, #29
 80020c2:	1a52      	subs	r2, r2, r1
 80020c4:	0021      	movs	r1, r4
 80020c6:	0018      	movs	r0, r3
 80020c8:	465d      	mov	r5, fp
 80020ca:	40d1      	lsrs	r1, r2
 80020cc:	3808      	subs	r0, #8
 80020ce:	4085      	lsls	r5, r0
 80020d0:	000a      	movs	r2, r1
 80020d2:	4084      	lsls	r4, r0
 80020d4:	432a      	orrs	r2, r5
 80020d6:	4693      	mov	fp, r2
 80020d8:	46a2      	mov	sl, r4
 80020da:	4d5f      	ldr	r5, [pc, #380]	; (8002258 <__aeabi_dmul+0x574>)
 80020dc:	2600      	movs	r6, #0
 80020de:	1aed      	subs	r5, r5, r3
 80020e0:	2300      	movs	r3, #0
 80020e2:	9300      	str	r3, [sp, #0]
 80020e4:	e625      	b.n	8001d32 <__aeabi_dmul+0x4e>
 80020e6:	465b      	mov	r3, fp
 80020e8:	4303      	orrs	r3, r0
 80020ea:	469a      	mov	sl, r3
 80020ec:	d105      	bne.n	80020fa <__aeabi_dmul+0x416>
 80020ee:	2300      	movs	r3, #0
 80020f0:	469b      	mov	fp, r3
 80020f2:	3302      	adds	r3, #2
 80020f4:	2608      	movs	r6, #8
 80020f6:	9300      	str	r3, [sp, #0]
 80020f8:	e61b      	b.n	8001d32 <__aeabi_dmul+0x4e>
 80020fa:	2303      	movs	r3, #3
 80020fc:	4682      	mov	sl, r0
 80020fe:	260c      	movs	r6, #12
 8002100:	9300      	str	r3, [sp, #0]
 8002102:	e616      	b.n	8001d32 <__aeabi_dmul+0x4e>
 8002104:	2300      	movs	r3, #0
 8002106:	469b      	mov	fp, r3
 8002108:	3301      	adds	r3, #1
 800210a:	2604      	movs	r6, #4
 800210c:	2500      	movs	r5, #0
 800210e:	9300      	str	r3, [sp, #0]
 8002110:	e60f      	b.n	8001d32 <__aeabi_dmul+0x4e>
 8002112:	4642      	mov	r2, r8
 8002114:	3301      	adds	r3, #1
 8002116:	9501      	str	r5, [sp, #4]
 8002118:	431e      	orrs	r6, r3
 800211a:	9b01      	ldr	r3, [sp, #4]
 800211c:	407a      	eors	r2, r7
 800211e:	3301      	adds	r3, #1
 8002120:	2400      	movs	r4, #0
 8002122:	2000      	movs	r0, #0
 8002124:	2101      	movs	r1, #1
 8002126:	b2d2      	uxtb	r2, r2
 8002128:	9302      	str	r3, [sp, #8]
 800212a:	2e0a      	cmp	r6, #10
 800212c:	dd00      	ble.n	8002130 <__aeabi_dmul+0x44c>
 800212e:	e621      	b.n	8001d74 <__aeabi_dmul+0x90>
 8002130:	e63d      	b.n	8001dae <__aeabi_dmul+0xca>
 8002132:	2101      	movs	r1, #1
 8002134:	1ac9      	subs	r1, r1, r3
 8002136:	2938      	cmp	r1, #56	; 0x38
 8002138:	dd00      	ble.n	800213c <__aeabi_dmul+0x458>
 800213a:	e642      	b.n	8001dc2 <__aeabi_dmul+0xde>
 800213c:	291f      	cmp	r1, #31
 800213e:	dd47      	ble.n	80021d0 <__aeabi_dmul+0x4ec>
 8002140:	261f      	movs	r6, #31
 8002142:	0025      	movs	r5, r4
 8002144:	4276      	negs	r6, r6
 8002146:	1af3      	subs	r3, r6, r3
 8002148:	40dd      	lsrs	r5, r3
 800214a:	002b      	movs	r3, r5
 800214c:	2920      	cmp	r1, #32
 800214e:	d005      	beq.n	800215c <__aeabi_dmul+0x478>
 8002150:	4942      	ldr	r1, [pc, #264]	; (800225c <__aeabi_dmul+0x578>)
 8002152:	9d02      	ldr	r5, [sp, #8]
 8002154:	468c      	mov	ip, r1
 8002156:	4465      	add	r5, ip
 8002158:	40ac      	lsls	r4, r5
 800215a:	4320      	orrs	r0, r4
 800215c:	1e41      	subs	r1, r0, #1
 800215e:	4188      	sbcs	r0, r1
 8002160:	4318      	orrs	r0, r3
 8002162:	2307      	movs	r3, #7
 8002164:	001d      	movs	r5, r3
 8002166:	2400      	movs	r4, #0
 8002168:	4005      	ands	r5, r0
 800216a:	4203      	tst	r3, r0
 800216c:	d04a      	beq.n	8002204 <__aeabi_dmul+0x520>
 800216e:	230f      	movs	r3, #15
 8002170:	2400      	movs	r4, #0
 8002172:	4003      	ands	r3, r0
 8002174:	2b04      	cmp	r3, #4
 8002176:	d042      	beq.n	80021fe <__aeabi_dmul+0x51a>
 8002178:	1d03      	adds	r3, r0, #4
 800217a:	4283      	cmp	r3, r0
 800217c:	4180      	sbcs	r0, r0
 800217e:	4240      	negs	r0, r0
 8002180:	1824      	adds	r4, r4, r0
 8002182:	0018      	movs	r0, r3
 8002184:	0223      	lsls	r3, r4, #8
 8002186:	d53a      	bpl.n	80021fe <__aeabi_dmul+0x51a>
 8002188:	2301      	movs	r3, #1
 800218a:	2400      	movs	r4, #0
 800218c:	2500      	movs	r5, #0
 800218e:	e61b      	b.n	8001dc8 <__aeabi_dmul+0xe4>
 8002190:	f000 fd08 	bl	8002ba4 <__clzsi2>
 8002194:	0001      	movs	r1, r0
 8002196:	0003      	movs	r3, r0
 8002198:	3115      	adds	r1, #21
 800219a:	3320      	adds	r3, #32
 800219c:	291c      	cmp	r1, #28
 800219e:	dd8f      	ble.n	80020c0 <__aeabi_dmul+0x3dc>
 80021a0:	3808      	subs	r0, #8
 80021a2:	2200      	movs	r2, #0
 80021a4:	4084      	lsls	r4, r0
 80021a6:	4692      	mov	sl, r2
 80021a8:	46a3      	mov	fp, r4
 80021aa:	e796      	b.n	80020da <__aeabi_dmul+0x3f6>
 80021ac:	f000 fcfa 	bl	8002ba4 <__clzsi2>
 80021b0:	0001      	movs	r1, r0
 80021b2:	0003      	movs	r3, r0
 80021b4:	3115      	adds	r1, #21
 80021b6:	3320      	adds	r3, #32
 80021b8:	291c      	cmp	r1, #28
 80021ba:	dc00      	bgt.n	80021be <__aeabi_dmul+0x4da>
 80021bc:	e758      	b.n	8002070 <__aeabi_dmul+0x38c>
 80021be:	0002      	movs	r2, r0
 80021c0:	464c      	mov	r4, r9
 80021c2:	3a08      	subs	r2, #8
 80021c4:	2000      	movs	r0, #0
 80021c6:	4094      	lsls	r4, r2
 80021c8:	e75d      	b.n	8002086 <__aeabi_dmul+0x3a2>
 80021ca:	9b01      	ldr	r3, [sp, #4]
 80021cc:	9302      	str	r3, [sp, #8]
 80021ce:	e711      	b.n	8001ff4 <__aeabi_dmul+0x310>
 80021d0:	4b23      	ldr	r3, [pc, #140]	; (8002260 <__aeabi_dmul+0x57c>)
 80021d2:	0026      	movs	r6, r4
 80021d4:	469c      	mov	ip, r3
 80021d6:	0003      	movs	r3, r0
 80021d8:	9d02      	ldr	r5, [sp, #8]
 80021da:	40cb      	lsrs	r3, r1
 80021dc:	4465      	add	r5, ip
 80021de:	40ae      	lsls	r6, r5
 80021e0:	431e      	orrs	r6, r3
 80021e2:	0003      	movs	r3, r0
 80021e4:	40ab      	lsls	r3, r5
 80021e6:	1e58      	subs	r0, r3, #1
 80021e8:	4183      	sbcs	r3, r0
 80021ea:	0030      	movs	r0, r6
 80021ec:	4318      	orrs	r0, r3
 80021ee:	40cc      	lsrs	r4, r1
 80021f0:	0743      	lsls	r3, r0, #29
 80021f2:	d0c7      	beq.n	8002184 <__aeabi_dmul+0x4a0>
 80021f4:	230f      	movs	r3, #15
 80021f6:	4003      	ands	r3, r0
 80021f8:	2b04      	cmp	r3, #4
 80021fa:	d1bd      	bne.n	8002178 <__aeabi_dmul+0x494>
 80021fc:	e7c2      	b.n	8002184 <__aeabi_dmul+0x4a0>
 80021fe:	0765      	lsls	r5, r4, #29
 8002200:	0264      	lsls	r4, r4, #9
 8002202:	0b24      	lsrs	r4, r4, #12
 8002204:	08c0      	lsrs	r0, r0, #3
 8002206:	2300      	movs	r3, #0
 8002208:	4305      	orrs	r5, r0
 800220a:	e5dd      	b.n	8001dc8 <__aeabi_dmul+0xe4>
 800220c:	2500      	movs	r5, #0
 800220e:	2302      	movs	r3, #2
 8002210:	2e0f      	cmp	r6, #15
 8002212:	d10c      	bne.n	800222e <__aeabi_dmul+0x54a>
 8002214:	2480      	movs	r4, #128	; 0x80
 8002216:	465b      	mov	r3, fp
 8002218:	0324      	lsls	r4, r4, #12
 800221a:	4223      	tst	r3, r4
 800221c:	d00e      	beq.n	800223c <__aeabi_dmul+0x558>
 800221e:	4221      	tst	r1, r4
 8002220:	d10c      	bne.n	800223c <__aeabi_dmul+0x558>
 8002222:	430c      	orrs	r4, r1
 8002224:	0324      	lsls	r4, r4, #12
 8002226:	003a      	movs	r2, r7
 8002228:	4b0e      	ldr	r3, [pc, #56]	; (8002264 <__aeabi_dmul+0x580>)
 800222a:	0b24      	lsrs	r4, r4, #12
 800222c:	e5cc      	b.n	8001dc8 <__aeabi_dmul+0xe4>
 800222e:	2e0b      	cmp	r6, #11
 8002230:	d000      	beq.n	8002234 <__aeabi_dmul+0x550>
 8002232:	e5a2      	b.n	8001d7a <__aeabi_dmul+0x96>
 8002234:	468b      	mov	fp, r1
 8002236:	46aa      	mov	sl, r5
 8002238:	9300      	str	r3, [sp, #0]
 800223a:	e5f7      	b.n	8001e2c <__aeabi_dmul+0x148>
 800223c:	2480      	movs	r4, #128	; 0x80
 800223e:	465b      	mov	r3, fp
 8002240:	0324      	lsls	r4, r4, #12
 8002242:	431c      	orrs	r4, r3
 8002244:	0324      	lsls	r4, r4, #12
 8002246:	4642      	mov	r2, r8
 8002248:	4655      	mov	r5, sl
 800224a:	4b06      	ldr	r3, [pc, #24]	; (8002264 <__aeabi_dmul+0x580>)
 800224c:	0b24      	lsrs	r4, r4, #12
 800224e:	e5bb      	b.n	8001dc8 <__aeabi_dmul+0xe4>
 8002250:	464d      	mov	r5, r9
 8002252:	0021      	movs	r1, r4
 8002254:	2303      	movs	r3, #3
 8002256:	e7db      	b.n	8002210 <__aeabi_dmul+0x52c>
 8002258:	fffffc0d 	.word	0xfffffc0d
 800225c:	0000043e 	.word	0x0000043e
 8002260:	0000041e 	.word	0x0000041e
 8002264:	000007ff 	.word	0x000007ff

08002268 <__aeabi_dsub>:
 8002268:	b5f0      	push	{r4, r5, r6, r7, lr}
 800226a:	4657      	mov	r7, sl
 800226c:	464e      	mov	r6, r9
 800226e:	4645      	mov	r5, r8
 8002270:	46de      	mov	lr, fp
 8002272:	b5e0      	push	{r5, r6, r7, lr}
 8002274:	000d      	movs	r5, r1
 8002276:	0004      	movs	r4, r0
 8002278:	0019      	movs	r1, r3
 800227a:	0010      	movs	r0, r2
 800227c:	032b      	lsls	r3, r5, #12
 800227e:	0a5b      	lsrs	r3, r3, #9
 8002280:	0f62      	lsrs	r2, r4, #29
 8002282:	431a      	orrs	r2, r3
 8002284:	00e3      	lsls	r3, r4, #3
 8002286:	030c      	lsls	r4, r1, #12
 8002288:	0a64      	lsrs	r4, r4, #9
 800228a:	0f47      	lsrs	r7, r0, #29
 800228c:	4327      	orrs	r7, r4
 800228e:	4cd0      	ldr	r4, [pc, #832]	; (80025d0 <__aeabi_dsub+0x368>)
 8002290:	006e      	lsls	r6, r5, #1
 8002292:	4691      	mov	r9, r2
 8002294:	b083      	sub	sp, #12
 8002296:	004a      	lsls	r2, r1, #1
 8002298:	00c0      	lsls	r0, r0, #3
 800229a:	4698      	mov	r8, r3
 800229c:	46a2      	mov	sl, r4
 800229e:	0d76      	lsrs	r6, r6, #21
 80022a0:	0fed      	lsrs	r5, r5, #31
 80022a2:	0d52      	lsrs	r2, r2, #21
 80022a4:	0fc9      	lsrs	r1, r1, #31
 80022a6:	9001      	str	r0, [sp, #4]
 80022a8:	42a2      	cmp	r2, r4
 80022aa:	d100      	bne.n	80022ae <__aeabi_dsub+0x46>
 80022ac:	e0b9      	b.n	8002422 <__aeabi_dsub+0x1ba>
 80022ae:	2401      	movs	r4, #1
 80022b0:	4061      	eors	r1, r4
 80022b2:	468b      	mov	fp, r1
 80022b4:	428d      	cmp	r5, r1
 80022b6:	d100      	bne.n	80022ba <__aeabi_dsub+0x52>
 80022b8:	e08d      	b.n	80023d6 <__aeabi_dsub+0x16e>
 80022ba:	1ab4      	subs	r4, r6, r2
 80022bc:	46a4      	mov	ip, r4
 80022be:	2c00      	cmp	r4, #0
 80022c0:	dc00      	bgt.n	80022c4 <__aeabi_dsub+0x5c>
 80022c2:	e0b7      	b.n	8002434 <__aeabi_dsub+0x1cc>
 80022c4:	2a00      	cmp	r2, #0
 80022c6:	d100      	bne.n	80022ca <__aeabi_dsub+0x62>
 80022c8:	e0cb      	b.n	8002462 <__aeabi_dsub+0x1fa>
 80022ca:	4ac1      	ldr	r2, [pc, #772]	; (80025d0 <__aeabi_dsub+0x368>)
 80022cc:	4296      	cmp	r6, r2
 80022ce:	d100      	bne.n	80022d2 <__aeabi_dsub+0x6a>
 80022d0:	e186      	b.n	80025e0 <__aeabi_dsub+0x378>
 80022d2:	2280      	movs	r2, #128	; 0x80
 80022d4:	0412      	lsls	r2, r2, #16
 80022d6:	4317      	orrs	r7, r2
 80022d8:	4662      	mov	r2, ip
 80022da:	2a38      	cmp	r2, #56	; 0x38
 80022dc:	dd00      	ble.n	80022e0 <__aeabi_dsub+0x78>
 80022de:	e1a4      	b.n	800262a <__aeabi_dsub+0x3c2>
 80022e0:	2a1f      	cmp	r2, #31
 80022e2:	dd00      	ble.n	80022e6 <__aeabi_dsub+0x7e>
 80022e4:	e21d      	b.n	8002722 <__aeabi_dsub+0x4ba>
 80022e6:	4661      	mov	r1, ip
 80022e8:	2220      	movs	r2, #32
 80022ea:	003c      	movs	r4, r7
 80022ec:	1a52      	subs	r2, r2, r1
 80022ee:	0001      	movs	r1, r0
 80022f0:	4090      	lsls	r0, r2
 80022f2:	4094      	lsls	r4, r2
 80022f4:	1e42      	subs	r2, r0, #1
 80022f6:	4190      	sbcs	r0, r2
 80022f8:	4662      	mov	r2, ip
 80022fa:	46a0      	mov	r8, r4
 80022fc:	4664      	mov	r4, ip
 80022fe:	40d7      	lsrs	r7, r2
 8002300:	464a      	mov	r2, r9
 8002302:	40e1      	lsrs	r1, r4
 8002304:	4644      	mov	r4, r8
 8002306:	1bd2      	subs	r2, r2, r7
 8002308:	4691      	mov	r9, r2
 800230a:	430c      	orrs	r4, r1
 800230c:	4304      	orrs	r4, r0
 800230e:	1b1c      	subs	r4, r3, r4
 8002310:	42a3      	cmp	r3, r4
 8002312:	4192      	sbcs	r2, r2
 8002314:	464b      	mov	r3, r9
 8002316:	4252      	negs	r2, r2
 8002318:	1a9b      	subs	r3, r3, r2
 800231a:	469a      	mov	sl, r3
 800231c:	4653      	mov	r3, sl
 800231e:	021b      	lsls	r3, r3, #8
 8002320:	d400      	bmi.n	8002324 <__aeabi_dsub+0xbc>
 8002322:	e12b      	b.n	800257c <__aeabi_dsub+0x314>
 8002324:	4653      	mov	r3, sl
 8002326:	025a      	lsls	r2, r3, #9
 8002328:	0a53      	lsrs	r3, r2, #9
 800232a:	469a      	mov	sl, r3
 800232c:	4653      	mov	r3, sl
 800232e:	2b00      	cmp	r3, #0
 8002330:	d100      	bne.n	8002334 <__aeabi_dsub+0xcc>
 8002332:	e166      	b.n	8002602 <__aeabi_dsub+0x39a>
 8002334:	4650      	mov	r0, sl
 8002336:	f000 fc35 	bl	8002ba4 <__clzsi2>
 800233a:	0003      	movs	r3, r0
 800233c:	3b08      	subs	r3, #8
 800233e:	2220      	movs	r2, #32
 8002340:	0020      	movs	r0, r4
 8002342:	1ad2      	subs	r2, r2, r3
 8002344:	4651      	mov	r1, sl
 8002346:	40d0      	lsrs	r0, r2
 8002348:	4099      	lsls	r1, r3
 800234a:	0002      	movs	r2, r0
 800234c:	409c      	lsls	r4, r3
 800234e:	430a      	orrs	r2, r1
 8002350:	429e      	cmp	r6, r3
 8002352:	dd00      	ble.n	8002356 <__aeabi_dsub+0xee>
 8002354:	e164      	b.n	8002620 <__aeabi_dsub+0x3b8>
 8002356:	1b9b      	subs	r3, r3, r6
 8002358:	1c59      	adds	r1, r3, #1
 800235a:	291f      	cmp	r1, #31
 800235c:	dd00      	ble.n	8002360 <__aeabi_dsub+0xf8>
 800235e:	e0fe      	b.n	800255e <__aeabi_dsub+0x2f6>
 8002360:	2320      	movs	r3, #32
 8002362:	0010      	movs	r0, r2
 8002364:	0026      	movs	r6, r4
 8002366:	1a5b      	subs	r3, r3, r1
 8002368:	409c      	lsls	r4, r3
 800236a:	4098      	lsls	r0, r3
 800236c:	40ce      	lsrs	r6, r1
 800236e:	40ca      	lsrs	r2, r1
 8002370:	1e63      	subs	r3, r4, #1
 8002372:	419c      	sbcs	r4, r3
 8002374:	4330      	orrs	r0, r6
 8002376:	4692      	mov	sl, r2
 8002378:	2600      	movs	r6, #0
 800237a:	4304      	orrs	r4, r0
 800237c:	0763      	lsls	r3, r4, #29
 800237e:	d009      	beq.n	8002394 <__aeabi_dsub+0x12c>
 8002380:	230f      	movs	r3, #15
 8002382:	4023      	ands	r3, r4
 8002384:	2b04      	cmp	r3, #4
 8002386:	d005      	beq.n	8002394 <__aeabi_dsub+0x12c>
 8002388:	1d23      	adds	r3, r4, #4
 800238a:	42a3      	cmp	r3, r4
 800238c:	41a4      	sbcs	r4, r4
 800238e:	4264      	negs	r4, r4
 8002390:	44a2      	add	sl, r4
 8002392:	001c      	movs	r4, r3
 8002394:	4653      	mov	r3, sl
 8002396:	021b      	lsls	r3, r3, #8
 8002398:	d400      	bmi.n	800239c <__aeabi_dsub+0x134>
 800239a:	e0f2      	b.n	8002582 <__aeabi_dsub+0x31a>
 800239c:	4b8c      	ldr	r3, [pc, #560]	; (80025d0 <__aeabi_dsub+0x368>)
 800239e:	3601      	adds	r6, #1
 80023a0:	429e      	cmp	r6, r3
 80023a2:	d100      	bne.n	80023a6 <__aeabi_dsub+0x13e>
 80023a4:	e10f      	b.n	80025c6 <__aeabi_dsub+0x35e>
 80023a6:	4653      	mov	r3, sl
 80023a8:	498a      	ldr	r1, [pc, #552]	; (80025d4 <__aeabi_dsub+0x36c>)
 80023aa:	08e4      	lsrs	r4, r4, #3
 80023ac:	400b      	ands	r3, r1
 80023ae:	0019      	movs	r1, r3
 80023b0:	075b      	lsls	r3, r3, #29
 80023b2:	4323      	orrs	r3, r4
 80023b4:	0572      	lsls	r2, r6, #21
 80023b6:	024c      	lsls	r4, r1, #9
 80023b8:	0b24      	lsrs	r4, r4, #12
 80023ba:	0d52      	lsrs	r2, r2, #21
 80023bc:	0512      	lsls	r2, r2, #20
 80023be:	4322      	orrs	r2, r4
 80023c0:	07ed      	lsls	r5, r5, #31
 80023c2:	432a      	orrs	r2, r5
 80023c4:	0018      	movs	r0, r3
 80023c6:	0011      	movs	r1, r2
 80023c8:	b003      	add	sp, #12
 80023ca:	bcf0      	pop	{r4, r5, r6, r7}
 80023cc:	46bb      	mov	fp, r7
 80023ce:	46b2      	mov	sl, r6
 80023d0:	46a9      	mov	r9, r5
 80023d2:	46a0      	mov	r8, r4
 80023d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023d6:	1ab4      	subs	r4, r6, r2
 80023d8:	46a4      	mov	ip, r4
 80023da:	2c00      	cmp	r4, #0
 80023dc:	dd59      	ble.n	8002492 <__aeabi_dsub+0x22a>
 80023de:	2a00      	cmp	r2, #0
 80023e0:	d100      	bne.n	80023e4 <__aeabi_dsub+0x17c>
 80023e2:	e0b0      	b.n	8002546 <__aeabi_dsub+0x2de>
 80023e4:	4556      	cmp	r6, sl
 80023e6:	d100      	bne.n	80023ea <__aeabi_dsub+0x182>
 80023e8:	e0fa      	b.n	80025e0 <__aeabi_dsub+0x378>
 80023ea:	2280      	movs	r2, #128	; 0x80
 80023ec:	0412      	lsls	r2, r2, #16
 80023ee:	4317      	orrs	r7, r2
 80023f0:	4662      	mov	r2, ip
 80023f2:	2a38      	cmp	r2, #56	; 0x38
 80023f4:	dd00      	ble.n	80023f8 <__aeabi_dsub+0x190>
 80023f6:	e0d4      	b.n	80025a2 <__aeabi_dsub+0x33a>
 80023f8:	2a1f      	cmp	r2, #31
 80023fa:	dc00      	bgt.n	80023fe <__aeabi_dsub+0x196>
 80023fc:	e1c0      	b.n	8002780 <__aeabi_dsub+0x518>
 80023fe:	0039      	movs	r1, r7
 8002400:	3a20      	subs	r2, #32
 8002402:	40d1      	lsrs	r1, r2
 8002404:	4662      	mov	r2, ip
 8002406:	2a20      	cmp	r2, #32
 8002408:	d006      	beq.n	8002418 <__aeabi_dsub+0x1b0>
 800240a:	4664      	mov	r4, ip
 800240c:	2240      	movs	r2, #64	; 0x40
 800240e:	1b12      	subs	r2, r2, r4
 8002410:	003c      	movs	r4, r7
 8002412:	4094      	lsls	r4, r2
 8002414:	4304      	orrs	r4, r0
 8002416:	9401      	str	r4, [sp, #4]
 8002418:	9c01      	ldr	r4, [sp, #4]
 800241a:	1e62      	subs	r2, r4, #1
 800241c:	4194      	sbcs	r4, r2
 800241e:	430c      	orrs	r4, r1
 8002420:	e0c3      	b.n	80025aa <__aeabi_dsub+0x342>
 8002422:	003c      	movs	r4, r7
 8002424:	4304      	orrs	r4, r0
 8002426:	d02b      	beq.n	8002480 <__aeabi_dsub+0x218>
 8002428:	468b      	mov	fp, r1
 800242a:	428d      	cmp	r5, r1
 800242c:	d02e      	beq.n	800248c <__aeabi_dsub+0x224>
 800242e:	4c6a      	ldr	r4, [pc, #424]	; (80025d8 <__aeabi_dsub+0x370>)
 8002430:	46a4      	mov	ip, r4
 8002432:	44b4      	add	ip, r6
 8002434:	4664      	mov	r4, ip
 8002436:	2c00      	cmp	r4, #0
 8002438:	d05f      	beq.n	80024fa <__aeabi_dsub+0x292>
 800243a:	1b94      	subs	r4, r2, r6
 800243c:	46a4      	mov	ip, r4
 800243e:	2e00      	cmp	r6, #0
 8002440:	d000      	beq.n	8002444 <__aeabi_dsub+0x1dc>
 8002442:	e120      	b.n	8002686 <__aeabi_dsub+0x41e>
 8002444:	464c      	mov	r4, r9
 8002446:	431c      	orrs	r4, r3
 8002448:	d100      	bne.n	800244c <__aeabi_dsub+0x1e4>
 800244a:	e1c7      	b.n	80027dc <__aeabi_dsub+0x574>
 800244c:	4661      	mov	r1, ip
 800244e:	1e4c      	subs	r4, r1, #1
 8002450:	2901      	cmp	r1, #1
 8002452:	d100      	bne.n	8002456 <__aeabi_dsub+0x1ee>
 8002454:	e223      	b.n	800289e <__aeabi_dsub+0x636>
 8002456:	4d5e      	ldr	r5, [pc, #376]	; (80025d0 <__aeabi_dsub+0x368>)
 8002458:	45ac      	cmp	ip, r5
 800245a:	d100      	bne.n	800245e <__aeabi_dsub+0x1f6>
 800245c:	e1d8      	b.n	8002810 <__aeabi_dsub+0x5a8>
 800245e:	46a4      	mov	ip, r4
 8002460:	e11a      	b.n	8002698 <__aeabi_dsub+0x430>
 8002462:	003a      	movs	r2, r7
 8002464:	4302      	orrs	r2, r0
 8002466:	d100      	bne.n	800246a <__aeabi_dsub+0x202>
 8002468:	e0e4      	b.n	8002634 <__aeabi_dsub+0x3cc>
 800246a:	0022      	movs	r2, r4
 800246c:	3a01      	subs	r2, #1
 800246e:	2c01      	cmp	r4, #1
 8002470:	d100      	bne.n	8002474 <__aeabi_dsub+0x20c>
 8002472:	e1c3      	b.n	80027fc <__aeabi_dsub+0x594>
 8002474:	4956      	ldr	r1, [pc, #344]	; (80025d0 <__aeabi_dsub+0x368>)
 8002476:	428c      	cmp	r4, r1
 8002478:	d100      	bne.n	800247c <__aeabi_dsub+0x214>
 800247a:	e0b1      	b.n	80025e0 <__aeabi_dsub+0x378>
 800247c:	4694      	mov	ip, r2
 800247e:	e72b      	b.n	80022d8 <__aeabi_dsub+0x70>
 8002480:	2401      	movs	r4, #1
 8002482:	4061      	eors	r1, r4
 8002484:	468b      	mov	fp, r1
 8002486:	428d      	cmp	r5, r1
 8002488:	d000      	beq.n	800248c <__aeabi_dsub+0x224>
 800248a:	e716      	b.n	80022ba <__aeabi_dsub+0x52>
 800248c:	4952      	ldr	r1, [pc, #328]	; (80025d8 <__aeabi_dsub+0x370>)
 800248e:	468c      	mov	ip, r1
 8002490:	44b4      	add	ip, r6
 8002492:	4664      	mov	r4, ip
 8002494:	2c00      	cmp	r4, #0
 8002496:	d100      	bne.n	800249a <__aeabi_dsub+0x232>
 8002498:	e0d3      	b.n	8002642 <__aeabi_dsub+0x3da>
 800249a:	1b91      	subs	r1, r2, r6
 800249c:	468c      	mov	ip, r1
 800249e:	2e00      	cmp	r6, #0
 80024a0:	d100      	bne.n	80024a4 <__aeabi_dsub+0x23c>
 80024a2:	e15e      	b.n	8002762 <__aeabi_dsub+0x4fa>
 80024a4:	494a      	ldr	r1, [pc, #296]	; (80025d0 <__aeabi_dsub+0x368>)
 80024a6:	428a      	cmp	r2, r1
 80024a8:	d100      	bne.n	80024ac <__aeabi_dsub+0x244>
 80024aa:	e1be      	b.n	800282a <__aeabi_dsub+0x5c2>
 80024ac:	2180      	movs	r1, #128	; 0x80
 80024ae:	464c      	mov	r4, r9
 80024b0:	0409      	lsls	r1, r1, #16
 80024b2:	430c      	orrs	r4, r1
 80024b4:	46a1      	mov	r9, r4
 80024b6:	4661      	mov	r1, ip
 80024b8:	2938      	cmp	r1, #56	; 0x38
 80024ba:	dd00      	ble.n	80024be <__aeabi_dsub+0x256>
 80024bc:	e1ba      	b.n	8002834 <__aeabi_dsub+0x5cc>
 80024be:	291f      	cmp	r1, #31
 80024c0:	dd00      	ble.n	80024c4 <__aeabi_dsub+0x25c>
 80024c2:	e227      	b.n	8002914 <__aeabi_dsub+0x6ac>
 80024c4:	2420      	movs	r4, #32
 80024c6:	1a64      	subs	r4, r4, r1
 80024c8:	4649      	mov	r1, r9
 80024ca:	40a1      	lsls	r1, r4
 80024cc:	001e      	movs	r6, r3
 80024ce:	4688      	mov	r8, r1
 80024d0:	4661      	mov	r1, ip
 80024d2:	40a3      	lsls	r3, r4
 80024d4:	40ce      	lsrs	r6, r1
 80024d6:	4641      	mov	r1, r8
 80024d8:	1e5c      	subs	r4, r3, #1
 80024da:	41a3      	sbcs	r3, r4
 80024dc:	4331      	orrs	r1, r6
 80024de:	4319      	orrs	r1, r3
 80024e0:	000c      	movs	r4, r1
 80024e2:	4663      	mov	r3, ip
 80024e4:	4649      	mov	r1, r9
 80024e6:	40d9      	lsrs	r1, r3
 80024e8:	187f      	adds	r7, r7, r1
 80024ea:	1824      	adds	r4, r4, r0
 80024ec:	4284      	cmp	r4, r0
 80024ee:	419b      	sbcs	r3, r3
 80024f0:	425b      	negs	r3, r3
 80024f2:	469a      	mov	sl, r3
 80024f4:	0016      	movs	r6, r2
 80024f6:	44ba      	add	sl, r7
 80024f8:	e05d      	b.n	80025b6 <__aeabi_dsub+0x34e>
 80024fa:	4c38      	ldr	r4, [pc, #224]	; (80025dc <__aeabi_dsub+0x374>)
 80024fc:	1c72      	adds	r2, r6, #1
 80024fe:	4222      	tst	r2, r4
 8002500:	d000      	beq.n	8002504 <__aeabi_dsub+0x29c>
 8002502:	e0df      	b.n	80026c4 <__aeabi_dsub+0x45c>
 8002504:	464a      	mov	r2, r9
 8002506:	431a      	orrs	r2, r3
 8002508:	2e00      	cmp	r6, #0
 800250a:	d000      	beq.n	800250e <__aeabi_dsub+0x2a6>
 800250c:	e15c      	b.n	80027c8 <__aeabi_dsub+0x560>
 800250e:	2a00      	cmp	r2, #0
 8002510:	d100      	bne.n	8002514 <__aeabi_dsub+0x2ac>
 8002512:	e1cf      	b.n	80028b4 <__aeabi_dsub+0x64c>
 8002514:	003a      	movs	r2, r7
 8002516:	4302      	orrs	r2, r0
 8002518:	d100      	bne.n	800251c <__aeabi_dsub+0x2b4>
 800251a:	e17f      	b.n	800281c <__aeabi_dsub+0x5b4>
 800251c:	1a1c      	subs	r4, r3, r0
 800251e:	464a      	mov	r2, r9
 8002520:	42a3      	cmp	r3, r4
 8002522:	4189      	sbcs	r1, r1
 8002524:	1bd2      	subs	r2, r2, r7
 8002526:	4249      	negs	r1, r1
 8002528:	1a52      	subs	r2, r2, r1
 800252a:	4692      	mov	sl, r2
 800252c:	0212      	lsls	r2, r2, #8
 800252e:	d400      	bmi.n	8002532 <__aeabi_dsub+0x2ca>
 8002530:	e20a      	b.n	8002948 <__aeabi_dsub+0x6e0>
 8002532:	1ac4      	subs	r4, r0, r3
 8002534:	42a0      	cmp	r0, r4
 8002536:	4180      	sbcs	r0, r0
 8002538:	464b      	mov	r3, r9
 800253a:	4240      	negs	r0, r0
 800253c:	1aff      	subs	r7, r7, r3
 800253e:	1a3b      	subs	r3, r7, r0
 8002540:	469a      	mov	sl, r3
 8002542:	465d      	mov	r5, fp
 8002544:	e71a      	b.n	800237c <__aeabi_dsub+0x114>
 8002546:	003a      	movs	r2, r7
 8002548:	4302      	orrs	r2, r0
 800254a:	d073      	beq.n	8002634 <__aeabi_dsub+0x3cc>
 800254c:	0022      	movs	r2, r4
 800254e:	3a01      	subs	r2, #1
 8002550:	2c01      	cmp	r4, #1
 8002552:	d100      	bne.n	8002556 <__aeabi_dsub+0x2ee>
 8002554:	e0cb      	b.n	80026ee <__aeabi_dsub+0x486>
 8002556:	4554      	cmp	r4, sl
 8002558:	d042      	beq.n	80025e0 <__aeabi_dsub+0x378>
 800255a:	4694      	mov	ip, r2
 800255c:	e748      	b.n	80023f0 <__aeabi_dsub+0x188>
 800255e:	0010      	movs	r0, r2
 8002560:	3b1f      	subs	r3, #31
 8002562:	40d8      	lsrs	r0, r3
 8002564:	2920      	cmp	r1, #32
 8002566:	d003      	beq.n	8002570 <__aeabi_dsub+0x308>
 8002568:	2340      	movs	r3, #64	; 0x40
 800256a:	1a5b      	subs	r3, r3, r1
 800256c:	409a      	lsls	r2, r3
 800256e:	4314      	orrs	r4, r2
 8002570:	1e63      	subs	r3, r4, #1
 8002572:	419c      	sbcs	r4, r3
 8002574:	2300      	movs	r3, #0
 8002576:	2600      	movs	r6, #0
 8002578:	469a      	mov	sl, r3
 800257a:	4304      	orrs	r4, r0
 800257c:	0763      	lsls	r3, r4, #29
 800257e:	d000      	beq.n	8002582 <__aeabi_dsub+0x31a>
 8002580:	e6fe      	b.n	8002380 <__aeabi_dsub+0x118>
 8002582:	4652      	mov	r2, sl
 8002584:	08e3      	lsrs	r3, r4, #3
 8002586:	0752      	lsls	r2, r2, #29
 8002588:	4313      	orrs	r3, r2
 800258a:	4652      	mov	r2, sl
 800258c:	46b4      	mov	ip, r6
 800258e:	08d2      	lsrs	r2, r2, #3
 8002590:	490f      	ldr	r1, [pc, #60]	; (80025d0 <__aeabi_dsub+0x368>)
 8002592:	458c      	cmp	ip, r1
 8002594:	d02a      	beq.n	80025ec <__aeabi_dsub+0x384>
 8002596:	0312      	lsls	r2, r2, #12
 8002598:	0b14      	lsrs	r4, r2, #12
 800259a:	4662      	mov	r2, ip
 800259c:	0552      	lsls	r2, r2, #21
 800259e:	0d52      	lsrs	r2, r2, #21
 80025a0:	e70c      	b.n	80023bc <__aeabi_dsub+0x154>
 80025a2:	003c      	movs	r4, r7
 80025a4:	4304      	orrs	r4, r0
 80025a6:	1e62      	subs	r2, r4, #1
 80025a8:	4194      	sbcs	r4, r2
 80025aa:	18e4      	adds	r4, r4, r3
 80025ac:	429c      	cmp	r4, r3
 80025ae:	4192      	sbcs	r2, r2
 80025b0:	4252      	negs	r2, r2
 80025b2:	444a      	add	r2, r9
 80025b4:	4692      	mov	sl, r2
 80025b6:	4653      	mov	r3, sl
 80025b8:	021b      	lsls	r3, r3, #8
 80025ba:	d5df      	bpl.n	800257c <__aeabi_dsub+0x314>
 80025bc:	4b04      	ldr	r3, [pc, #16]	; (80025d0 <__aeabi_dsub+0x368>)
 80025be:	3601      	adds	r6, #1
 80025c0:	429e      	cmp	r6, r3
 80025c2:	d000      	beq.n	80025c6 <__aeabi_dsub+0x35e>
 80025c4:	e0a0      	b.n	8002708 <__aeabi_dsub+0x4a0>
 80025c6:	0032      	movs	r2, r6
 80025c8:	2400      	movs	r4, #0
 80025ca:	2300      	movs	r3, #0
 80025cc:	e6f6      	b.n	80023bc <__aeabi_dsub+0x154>
 80025ce:	46c0      	nop			; (mov r8, r8)
 80025d0:	000007ff 	.word	0x000007ff
 80025d4:	ff7fffff 	.word	0xff7fffff
 80025d8:	fffff801 	.word	0xfffff801
 80025dc:	000007fe 	.word	0x000007fe
 80025e0:	08db      	lsrs	r3, r3, #3
 80025e2:	464a      	mov	r2, r9
 80025e4:	0752      	lsls	r2, r2, #29
 80025e6:	4313      	orrs	r3, r2
 80025e8:	464a      	mov	r2, r9
 80025ea:	08d2      	lsrs	r2, r2, #3
 80025ec:	0019      	movs	r1, r3
 80025ee:	4311      	orrs	r1, r2
 80025f0:	d100      	bne.n	80025f4 <__aeabi_dsub+0x38c>
 80025f2:	e1b5      	b.n	8002960 <__aeabi_dsub+0x6f8>
 80025f4:	2480      	movs	r4, #128	; 0x80
 80025f6:	0324      	lsls	r4, r4, #12
 80025f8:	4314      	orrs	r4, r2
 80025fa:	0324      	lsls	r4, r4, #12
 80025fc:	4ad5      	ldr	r2, [pc, #852]	; (8002954 <__aeabi_dsub+0x6ec>)
 80025fe:	0b24      	lsrs	r4, r4, #12
 8002600:	e6dc      	b.n	80023bc <__aeabi_dsub+0x154>
 8002602:	0020      	movs	r0, r4
 8002604:	f000 face 	bl	8002ba4 <__clzsi2>
 8002608:	0003      	movs	r3, r0
 800260a:	3318      	adds	r3, #24
 800260c:	2b1f      	cmp	r3, #31
 800260e:	dc00      	bgt.n	8002612 <__aeabi_dsub+0x3aa>
 8002610:	e695      	b.n	800233e <__aeabi_dsub+0xd6>
 8002612:	0022      	movs	r2, r4
 8002614:	3808      	subs	r0, #8
 8002616:	4082      	lsls	r2, r0
 8002618:	2400      	movs	r4, #0
 800261a:	429e      	cmp	r6, r3
 800261c:	dc00      	bgt.n	8002620 <__aeabi_dsub+0x3b8>
 800261e:	e69a      	b.n	8002356 <__aeabi_dsub+0xee>
 8002620:	1af6      	subs	r6, r6, r3
 8002622:	4bcd      	ldr	r3, [pc, #820]	; (8002958 <__aeabi_dsub+0x6f0>)
 8002624:	401a      	ands	r2, r3
 8002626:	4692      	mov	sl, r2
 8002628:	e6a8      	b.n	800237c <__aeabi_dsub+0x114>
 800262a:	003c      	movs	r4, r7
 800262c:	4304      	orrs	r4, r0
 800262e:	1e62      	subs	r2, r4, #1
 8002630:	4194      	sbcs	r4, r2
 8002632:	e66c      	b.n	800230e <__aeabi_dsub+0xa6>
 8002634:	464a      	mov	r2, r9
 8002636:	08db      	lsrs	r3, r3, #3
 8002638:	0752      	lsls	r2, r2, #29
 800263a:	4313      	orrs	r3, r2
 800263c:	464a      	mov	r2, r9
 800263e:	08d2      	lsrs	r2, r2, #3
 8002640:	e7a6      	b.n	8002590 <__aeabi_dsub+0x328>
 8002642:	4cc6      	ldr	r4, [pc, #792]	; (800295c <__aeabi_dsub+0x6f4>)
 8002644:	1c72      	adds	r2, r6, #1
 8002646:	4222      	tst	r2, r4
 8002648:	d000      	beq.n	800264c <__aeabi_dsub+0x3e4>
 800264a:	e0ac      	b.n	80027a6 <__aeabi_dsub+0x53e>
 800264c:	464a      	mov	r2, r9
 800264e:	431a      	orrs	r2, r3
 8002650:	2e00      	cmp	r6, #0
 8002652:	d000      	beq.n	8002656 <__aeabi_dsub+0x3ee>
 8002654:	e105      	b.n	8002862 <__aeabi_dsub+0x5fa>
 8002656:	2a00      	cmp	r2, #0
 8002658:	d100      	bne.n	800265c <__aeabi_dsub+0x3f4>
 800265a:	e156      	b.n	800290a <__aeabi_dsub+0x6a2>
 800265c:	003a      	movs	r2, r7
 800265e:	4302      	orrs	r2, r0
 8002660:	d100      	bne.n	8002664 <__aeabi_dsub+0x3fc>
 8002662:	e0db      	b.n	800281c <__aeabi_dsub+0x5b4>
 8002664:	181c      	adds	r4, r3, r0
 8002666:	429c      	cmp	r4, r3
 8002668:	419b      	sbcs	r3, r3
 800266a:	444f      	add	r7, r9
 800266c:	46ba      	mov	sl, r7
 800266e:	425b      	negs	r3, r3
 8002670:	449a      	add	sl, r3
 8002672:	4653      	mov	r3, sl
 8002674:	021b      	lsls	r3, r3, #8
 8002676:	d400      	bmi.n	800267a <__aeabi_dsub+0x412>
 8002678:	e780      	b.n	800257c <__aeabi_dsub+0x314>
 800267a:	4652      	mov	r2, sl
 800267c:	4bb6      	ldr	r3, [pc, #728]	; (8002958 <__aeabi_dsub+0x6f0>)
 800267e:	2601      	movs	r6, #1
 8002680:	401a      	ands	r2, r3
 8002682:	4692      	mov	sl, r2
 8002684:	e77a      	b.n	800257c <__aeabi_dsub+0x314>
 8002686:	4cb3      	ldr	r4, [pc, #716]	; (8002954 <__aeabi_dsub+0x6ec>)
 8002688:	42a2      	cmp	r2, r4
 800268a:	d100      	bne.n	800268e <__aeabi_dsub+0x426>
 800268c:	e0c0      	b.n	8002810 <__aeabi_dsub+0x5a8>
 800268e:	2480      	movs	r4, #128	; 0x80
 8002690:	464d      	mov	r5, r9
 8002692:	0424      	lsls	r4, r4, #16
 8002694:	4325      	orrs	r5, r4
 8002696:	46a9      	mov	r9, r5
 8002698:	4664      	mov	r4, ip
 800269a:	2c38      	cmp	r4, #56	; 0x38
 800269c:	dc53      	bgt.n	8002746 <__aeabi_dsub+0x4de>
 800269e:	4661      	mov	r1, ip
 80026a0:	2c1f      	cmp	r4, #31
 80026a2:	dd00      	ble.n	80026a6 <__aeabi_dsub+0x43e>
 80026a4:	e0cd      	b.n	8002842 <__aeabi_dsub+0x5da>
 80026a6:	2520      	movs	r5, #32
 80026a8:	001e      	movs	r6, r3
 80026aa:	1b2d      	subs	r5, r5, r4
 80026ac:	464c      	mov	r4, r9
 80026ae:	40ab      	lsls	r3, r5
 80026b0:	40ac      	lsls	r4, r5
 80026b2:	40ce      	lsrs	r6, r1
 80026b4:	1e5d      	subs	r5, r3, #1
 80026b6:	41ab      	sbcs	r3, r5
 80026b8:	4334      	orrs	r4, r6
 80026ba:	4323      	orrs	r3, r4
 80026bc:	464c      	mov	r4, r9
 80026be:	40cc      	lsrs	r4, r1
 80026c0:	1b3f      	subs	r7, r7, r4
 80026c2:	e045      	b.n	8002750 <__aeabi_dsub+0x4e8>
 80026c4:	464a      	mov	r2, r9
 80026c6:	1a1c      	subs	r4, r3, r0
 80026c8:	1bd1      	subs	r1, r2, r7
 80026ca:	42a3      	cmp	r3, r4
 80026cc:	4192      	sbcs	r2, r2
 80026ce:	4252      	negs	r2, r2
 80026d0:	4692      	mov	sl, r2
 80026d2:	000a      	movs	r2, r1
 80026d4:	4651      	mov	r1, sl
 80026d6:	1a52      	subs	r2, r2, r1
 80026d8:	4692      	mov	sl, r2
 80026da:	0212      	lsls	r2, r2, #8
 80026dc:	d500      	bpl.n	80026e0 <__aeabi_dsub+0x478>
 80026de:	e083      	b.n	80027e8 <__aeabi_dsub+0x580>
 80026e0:	4653      	mov	r3, sl
 80026e2:	4323      	orrs	r3, r4
 80026e4:	d000      	beq.n	80026e8 <__aeabi_dsub+0x480>
 80026e6:	e621      	b.n	800232c <__aeabi_dsub+0xc4>
 80026e8:	2200      	movs	r2, #0
 80026ea:	2500      	movs	r5, #0
 80026ec:	e753      	b.n	8002596 <__aeabi_dsub+0x32e>
 80026ee:	181c      	adds	r4, r3, r0
 80026f0:	429c      	cmp	r4, r3
 80026f2:	419b      	sbcs	r3, r3
 80026f4:	444f      	add	r7, r9
 80026f6:	46ba      	mov	sl, r7
 80026f8:	425b      	negs	r3, r3
 80026fa:	449a      	add	sl, r3
 80026fc:	4653      	mov	r3, sl
 80026fe:	2601      	movs	r6, #1
 8002700:	021b      	lsls	r3, r3, #8
 8002702:	d400      	bmi.n	8002706 <__aeabi_dsub+0x49e>
 8002704:	e73a      	b.n	800257c <__aeabi_dsub+0x314>
 8002706:	2602      	movs	r6, #2
 8002708:	4652      	mov	r2, sl
 800270a:	4b93      	ldr	r3, [pc, #588]	; (8002958 <__aeabi_dsub+0x6f0>)
 800270c:	2101      	movs	r1, #1
 800270e:	401a      	ands	r2, r3
 8002710:	0013      	movs	r3, r2
 8002712:	4021      	ands	r1, r4
 8002714:	0862      	lsrs	r2, r4, #1
 8002716:	430a      	orrs	r2, r1
 8002718:	07dc      	lsls	r4, r3, #31
 800271a:	085b      	lsrs	r3, r3, #1
 800271c:	469a      	mov	sl, r3
 800271e:	4314      	orrs	r4, r2
 8002720:	e62c      	b.n	800237c <__aeabi_dsub+0x114>
 8002722:	0039      	movs	r1, r7
 8002724:	3a20      	subs	r2, #32
 8002726:	40d1      	lsrs	r1, r2
 8002728:	4662      	mov	r2, ip
 800272a:	2a20      	cmp	r2, #32
 800272c:	d006      	beq.n	800273c <__aeabi_dsub+0x4d4>
 800272e:	4664      	mov	r4, ip
 8002730:	2240      	movs	r2, #64	; 0x40
 8002732:	1b12      	subs	r2, r2, r4
 8002734:	003c      	movs	r4, r7
 8002736:	4094      	lsls	r4, r2
 8002738:	4304      	orrs	r4, r0
 800273a:	9401      	str	r4, [sp, #4]
 800273c:	9c01      	ldr	r4, [sp, #4]
 800273e:	1e62      	subs	r2, r4, #1
 8002740:	4194      	sbcs	r4, r2
 8002742:	430c      	orrs	r4, r1
 8002744:	e5e3      	b.n	800230e <__aeabi_dsub+0xa6>
 8002746:	4649      	mov	r1, r9
 8002748:	4319      	orrs	r1, r3
 800274a:	000b      	movs	r3, r1
 800274c:	1e5c      	subs	r4, r3, #1
 800274e:	41a3      	sbcs	r3, r4
 8002750:	1ac4      	subs	r4, r0, r3
 8002752:	42a0      	cmp	r0, r4
 8002754:	419b      	sbcs	r3, r3
 8002756:	425b      	negs	r3, r3
 8002758:	1afb      	subs	r3, r7, r3
 800275a:	469a      	mov	sl, r3
 800275c:	465d      	mov	r5, fp
 800275e:	0016      	movs	r6, r2
 8002760:	e5dc      	b.n	800231c <__aeabi_dsub+0xb4>
 8002762:	4649      	mov	r1, r9
 8002764:	4319      	orrs	r1, r3
 8002766:	d100      	bne.n	800276a <__aeabi_dsub+0x502>
 8002768:	e0ae      	b.n	80028c8 <__aeabi_dsub+0x660>
 800276a:	4661      	mov	r1, ip
 800276c:	4664      	mov	r4, ip
 800276e:	3901      	subs	r1, #1
 8002770:	2c01      	cmp	r4, #1
 8002772:	d100      	bne.n	8002776 <__aeabi_dsub+0x50e>
 8002774:	e0e0      	b.n	8002938 <__aeabi_dsub+0x6d0>
 8002776:	4c77      	ldr	r4, [pc, #476]	; (8002954 <__aeabi_dsub+0x6ec>)
 8002778:	45a4      	cmp	ip, r4
 800277a:	d056      	beq.n	800282a <__aeabi_dsub+0x5c2>
 800277c:	468c      	mov	ip, r1
 800277e:	e69a      	b.n	80024b6 <__aeabi_dsub+0x24e>
 8002780:	4661      	mov	r1, ip
 8002782:	2220      	movs	r2, #32
 8002784:	003c      	movs	r4, r7
 8002786:	1a52      	subs	r2, r2, r1
 8002788:	4094      	lsls	r4, r2
 800278a:	0001      	movs	r1, r0
 800278c:	4090      	lsls	r0, r2
 800278e:	46a0      	mov	r8, r4
 8002790:	4664      	mov	r4, ip
 8002792:	1e42      	subs	r2, r0, #1
 8002794:	4190      	sbcs	r0, r2
 8002796:	4662      	mov	r2, ip
 8002798:	40e1      	lsrs	r1, r4
 800279a:	4644      	mov	r4, r8
 800279c:	40d7      	lsrs	r7, r2
 800279e:	430c      	orrs	r4, r1
 80027a0:	4304      	orrs	r4, r0
 80027a2:	44b9      	add	r9, r7
 80027a4:	e701      	b.n	80025aa <__aeabi_dsub+0x342>
 80027a6:	496b      	ldr	r1, [pc, #428]	; (8002954 <__aeabi_dsub+0x6ec>)
 80027a8:	428a      	cmp	r2, r1
 80027aa:	d100      	bne.n	80027ae <__aeabi_dsub+0x546>
 80027ac:	e70c      	b.n	80025c8 <__aeabi_dsub+0x360>
 80027ae:	1818      	adds	r0, r3, r0
 80027b0:	4298      	cmp	r0, r3
 80027b2:	419b      	sbcs	r3, r3
 80027b4:	444f      	add	r7, r9
 80027b6:	425b      	negs	r3, r3
 80027b8:	18fb      	adds	r3, r7, r3
 80027ba:	07dc      	lsls	r4, r3, #31
 80027bc:	0840      	lsrs	r0, r0, #1
 80027be:	085b      	lsrs	r3, r3, #1
 80027c0:	469a      	mov	sl, r3
 80027c2:	0016      	movs	r6, r2
 80027c4:	4304      	orrs	r4, r0
 80027c6:	e6d9      	b.n	800257c <__aeabi_dsub+0x314>
 80027c8:	2a00      	cmp	r2, #0
 80027ca:	d000      	beq.n	80027ce <__aeabi_dsub+0x566>
 80027cc:	e081      	b.n	80028d2 <__aeabi_dsub+0x66a>
 80027ce:	003b      	movs	r3, r7
 80027d0:	4303      	orrs	r3, r0
 80027d2:	d11d      	bne.n	8002810 <__aeabi_dsub+0x5a8>
 80027d4:	2280      	movs	r2, #128	; 0x80
 80027d6:	2500      	movs	r5, #0
 80027d8:	0312      	lsls	r2, r2, #12
 80027da:	e70b      	b.n	80025f4 <__aeabi_dsub+0x38c>
 80027dc:	08c0      	lsrs	r0, r0, #3
 80027de:	077b      	lsls	r3, r7, #29
 80027e0:	465d      	mov	r5, fp
 80027e2:	4303      	orrs	r3, r0
 80027e4:	08fa      	lsrs	r2, r7, #3
 80027e6:	e6d3      	b.n	8002590 <__aeabi_dsub+0x328>
 80027e8:	1ac4      	subs	r4, r0, r3
 80027ea:	42a0      	cmp	r0, r4
 80027ec:	4180      	sbcs	r0, r0
 80027ee:	464b      	mov	r3, r9
 80027f0:	4240      	negs	r0, r0
 80027f2:	1aff      	subs	r7, r7, r3
 80027f4:	1a3b      	subs	r3, r7, r0
 80027f6:	469a      	mov	sl, r3
 80027f8:	465d      	mov	r5, fp
 80027fa:	e597      	b.n	800232c <__aeabi_dsub+0xc4>
 80027fc:	1a1c      	subs	r4, r3, r0
 80027fe:	464a      	mov	r2, r9
 8002800:	42a3      	cmp	r3, r4
 8002802:	419b      	sbcs	r3, r3
 8002804:	1bd7      	subs	r7, r2, r7
 8002806:	425b      	negs	r3, r3
 8002808:	1afb      	subs	r3, r7, r3
 800280a:	469a      	mov	sl, r3
 800280c:	2601      	movs	r6, #1
 800280e:	e585      	b.n	800231c <__aeabi_dsub+0xb4>
 8002810:	08c0      	lsrs	r0, r0, #3
 8002812:	077b      	lsls	r3, r7, #29
 8002814:	465d      	mov	r5, fp
 8002816:	4303      	orrs	r3, r0
 8002818:	08fa      	lsrs	r2, r7, #3
 800281a:	e6e7      	b.n	80025ec <__aeabi_dsub+0x384>
 800281c:	464a      	mov	r2, r9
 800281e:	08db      	lsrs	r3, r3, #3
 8002820:	0752      	lsls	r2, r2, #29
 8002822:	4313      	orrs	r3, r2
 8002824:	464a      	mov	r2, r9
 8002826:	08d2      	lsrs	r2, r2, #3
 8002828:	e6b5      	b.n	8002596 <__aeabi_dsub+0x32e>
 800282a:	08c0      	lsrs	r0, r0, #3
 800282c:	077b      	lsls	r3, r7, #29
 800282e:	4303      	orrs	r3, r0
 8002830:	08fa      	lsrs	r2, r7, #3
 8002832:	e6db      	b.n	80025ec <__aeabi_dsub+0x384>
 8002834:	4649      	mov	r1, r9
 8002836:	4319      	orrs	r1, r3
 8002838:	000b      	movs	r3, r1
 800283a:	1e59      	subs	r1, r3, #1
 800283c:	418b      	sbcs	r3, r1
 800283e:	001c      	movs	r4, r3
 8002840:	e653      	b.n	80024ea <__aeabi_dsub+0x282>
 8002842:	464d      	mov	r5, r9
 8002844:	3c20      	subs	r4, #32
 8002846:	40e5      	lsrs	r5, r4
 8002848:	2920      	cmp	r1, #32
 800284a:	d005      	beq.n	8002858 <__aeabi_dsub+0x5f0>
 800284c:	2440      	movs	r4, #64	; 0x40
 800284e:	1a64      	subs	r4, r4, r1
 8002850:	4649      	mov	r1, r9
 8002852:	40a1      	lsls	r1, r4
 8002854:	430b      	orrs	r3, r1
 8002856:	4698      	mov	r8, r3
 8002858:	4643      	mov	r3, r8
 800285a:	1e5c      	subs	r4, r3, #1
 800285c:	41a3      	sbcs	r3, r4
 800285e:	432b      	orrs	r3, r5
 8002860:	e776      	b.n	8002750 <__aeabi_dsub+0x4e8>
 8002862:	2a00      	cmp	r2, #0
 8002864:	d0e1      	beq.n	800282a <__aeabi_dsub+0x5c2>
 8002866:	003a      	movs	r2, r7
 8002868:	08db      	lsrs	r3, r3, #3
 800286a:	4302      	orrs	r2, r0
 800286c:	d100      	bne.n	8002870 <__aeabi_dsub+0x608>
 800286e:	e6b8      	b.n	80025e2 <__aeabi_dsub+0x37a>
 8002870:	464a      	mov	r2, r9
 8002872:	0752      	lsls	r2, r2, #29
 8002874:	2480      	movs	r4, #128	; 0x80
 8002876:	4313      	orrs	r3, r2
 8002878:	464a      	mov	r2, r9
 800287a:	0324      	lsls	r4, r4, #12
 800287c:	08d2      	lsrs	r2, r2, #3
 800287e:	4222      	tst	r2, r4
 8002880:	d007      	beq.n	8002892 <__aeabi_dsub+0x62a>
 8002882:	08fe      	lsrs	r6, r7, #3
 8002884:	4226      	tst	r6, r4
 8002886:	d104      	bne.n	8002892 <__aeabi_dsub+0x62a>
 8002888:	465d      	mov	r5, fp
 800288a:	0032      	movs	r2, r6
 800288c:	08c3      	lsrs	r3, r0, #3
 800288e:	077f      	lsls	r7, r7, #29
 8002890:	433b      	orrs	r3, r7
 8002892:	0f59      	lsrs	r1, r3, #29
 8002894:	00db      	lsls	r3, r3, #3
 8002896:	0749      	lsls	r1, r1, #29
 8002898:	08db      	lsrs	r3, r3, #3
 800289a:	430b      	orrs	r3, r1
 800289c:	e6a6      	b.n	80025ec <__aeabi_dsub+0x384>
 800289e:	1ac4      	subs	r4, r0, r3
 80028a0:	42a0      	cmp	r0, r4
 80028a2:	4180      	sbcs	r0, r0
 80028a4:	464b      	mov	r3, r9
 80028a6:	4240      	negs	r0, r0
 80028a8:	1aff      	subs	r7, r7, r3
 80028aa:	1a3b      	subs	r3, r7, r0
 80028ac:	469a      	mov	sl, r3
 80028ae:	465d      	mov	r5, fp
 80028b0:	2601      	movs	r6, #1
 80028b2:	e533      	b.n	800231c <__aeabi_dsub+0xb4>
 80028b4:	003b      	movs	r3, r7
 80028b6:	4303      	orrs	r3, r0
 80028b8:	d100      	bne.n	80028bc <__aeabi_dsub+0x654>
 80028ba:	e715      	b.n	80026e8 <__aeabi_dsub+0x480>
 80028bc:	08c0      	lsrs	r0, r0, #3
 80028be:	077b      	lsls	r3, r7, #29
 80028c0:	465d      	mov	r5, fp
 80028c2:	4303      	orrs	r3, r0
 80028c4:	08fa      	lsrs	r2, r7, #3
 80028c6:	e666      	b.n	8002596 <__aeabi_dsub+0x32e>
 80028c8:	08c0      	lsrs	r0, r0, #3
 80028ca:	077b      	lsls	r3, r7, #29
 80028cc:	4303      	orrs	r3, r0
 80028ce:	08fa      	lsrs	r2, r7, #3
 80028d0:	e65e      	b.n	8002590 <__aeabi_dsub+0x328>
 80028d2:	003a      	movs	r2, r7
 80028d4:	08db      	lsrs	r3, r3, #3
 80028d6:	4302      	orrs	r2, r0
 80028d8:	d100      	bne.n	80028dc <__aeabi_dsub+0x674>
 80028da:	e682      	b.n	80025e2 <__aeabi_dsub+0x37a>
 80028dc:	464a      	mov	r2, r9
 80028de:	0752      	lsls	r2, r2, #29
 80028e0:	2480      	movs	r4, #128	; 0x80
 80028e2:	4313      	orrs	r3, r2
 80028e4:	464a      	mov	r2, r9
 80028e6:	0324      	lsls	r4, r4, #12
 80028e8:	08d2      	lsrs	r2, r2, #3
 80028ea:	4222      	tst	r2, r4
 80028ec:	d007      	beq.n	80028fe <__aeabi_dsub+0x696>
 80028ee:	08fe      	lsrs	r6, r7, #3
 80028f0:	4226      	tst	r6, r4
 80028f2:	d104      	bne.n	80028fe <__aeabi_dsub+0x696>
 80028f4:	465d      	mov	r5, fp
 80028f6:	0032      	movs	r2, r6
 80028f8:	08c3      	lsrs	r3, r0, #3
 80028fa:	077f      	lsls	r7, r7, #29
 80028fc:	433b      	orrs	r3, r7
 80028fe:	0f59      	lsrs	r1, r3, #29
 8002900:	00db      	lsls	r3, r3, #3
 8002902:	08db      	lsrs	r3, r3, #3
 8002904:	0749      	lsls	r1, r1, #29
 8002906:	430b      	orrs	r3, r1
 8002908:	e670      	b.n	80025ec <__aeabi_dsub+0x384>
 800290a:	08c0      	lsrs	r0, r0, #3
 800290c:	077b      	lsls	r3, r7, #29
 800290e:	4303      	orrs	r3, r0
 8002910:	08fa      	lsrs	r2, r7, #3
 8002912:	e640      	b.n	8002596 <__aeabi_dsub+0x32e>
 8002914:	464c      	mov	r4, r9
 8002916:	3920      	subs	r1, #32
 8002918:	40cc      	lsrs	r4, r1
 800291a:	4661      	mov	r1, ip
 800291c:	2920      	cmp	r1, #32
 800291e:	d006      	beq.n	800292e <__aeabi_dsub+0x6c6>
 8002920:	4666      	mov	r6, ip
 8002922:	2140      	movs	r1, #64	; 0x40
 8002924:	1b89      	subs	r1, r1, r6
 8002926:	464e      	mov	r6, r9
 8002928:	408e      	lsls	r6, r1
 800292a:	4333      	orrs	r3, r6
 800292c:	4698      	mov	r8, r3
 800292e:	4643      	mov	r3, r8
 8002930:	1e59      	subs	r1, r3, #1
 8002932:	418b      	sbcs	r3, r1
 8002934:	431c      	orrs	r4, r3
 8002936:	e5d8      	b.n	80024ea <__aeabi_dsub+0x282>
 8002938:	181c      	adds	r4, r3, r0
 800293a:	4284      	cmp	r4, r0
 800293c:	4180      	sbcs	r0, r0
 800293e:	444f      	add	r7, r9
 8002940:	46ba      	mov	sl, r7
 8002942:	4240      	negs	r0, r0
 8002944:	4482      	add	sl, r0
 8002946:	e6d9      	b.n	80026fc <__aeabi_dsub+0x494>
 8002948:	4653      	mov	r3, sl
 800294a:	4323      	orrs	r3, r4
 800294c:	d100      	bne.n	8002950 <__aeabi_dsub+0x6e8>
 800294e:	e6cb      	b.n	80026e8 <__aeabi_dsub+0x480>
 8002950:	e614      	b.n	800257c <__aeabi_dsub+0x314>
 8002952:	46c0      	nop			; (mov r8, r8)
 8002954:	000007ff 	.word	0x000007ff
 8002958:	ff7fffff 	.word	0xff7fffff
 800295c:	000007fe 	.word	0x000007fe
 8002960:	2300      	movs	r3, #0
 8002962:	4a01      	ldr	r2, [pc, #4]	; (8002968 <__aeabi_dsub+0x700>)
 8002964:	001c      	movs	r4, r3
 8002966:	e529      	b.n	80023bc <__aeabi_dsub+0x154>
 8002968:	000007ff 	.word	0x000007ff

0800296c <__aeabi_dcmpun>:
 800296c:	b570      	push	{r4, r5, r6, lr}
 800296e:	0005      	movs	r5, r0
 8002970:	480c      	ldr	r0, [pc, #48]	; (80029a4 <__aeabi_dcmpun+0x38>)
 8002972:	031c      	lsls	r4, r3, #12
 8002974:	0016      	movs	r6, r2
 8002976:	005b      	lsls	r3, r3, #1
 8002978:	030a      	lsls	r2, r1, #12
 800297a:	0049      	lsls	r1, r1, #1
 800297c:	0b12      	lsrs	r2, r2, #12
 800297e:	0d49      	lsrs	r1, r1, #21
 8002980:	0b24      	lsrs	r4, r4, #12
 8002982:	0d5b      	lsrs	r3, r3, #21
 8002984:	4281      	cmp	r1, r0
 8002986:	d008      	beq.n	800299a <__aeabi_dcmpun+0x2e>
 8002988:	4a06      	ldr	r2, [pc, #24]	; (80029a4 <__aeabi_dcmpun+0x38>)
 800298a:	2000      	movs	r0, #0
 800298c:	4293      	cmp	r3, r2
 800298e:	d103      	bne.n	8002998 <__aeabi_dcmpun+0x2c>
 8002990:	0020      	movs	r0, r4
 8002992:	4330      	orrs	r0, r6
 8002994:	1e43      	subs	r3, r0, #1
 8002996:	4198      	sbcs	r0, r3
 8002998:	bd70      	pop	{r4, r5, r6, pc}
 800299a:	2001      	movs	r0, #1
 800299c:	432a      	orrs	r2, r5
 800299e:	d1fb      	bne.n	8002998 <__aeabi_dcmpun+0x2c>
 80029a0:	e7f2      	b.n	8002988 <__aeabi_dcmpun+0x1c>
 80029a2:	46c0      	nop			; (mov r8, r8)
 80029a4:	000007ff 	.word	0x000007ff

080029a8 <__aeabi_i2d>:
 80029a8:	b570      	push	{r4, r5, r6, lr}
 80029aa:	2800      	cmp	r0, #0
 80029ac:	d016      	beq.n	80029dc <__aeabi_i2d+0x34>
 80029ae:	17c3      	asrs	r3, r0, #31
 80029b0:	18c5      	adds	r5, r0, r3
 80029b2:	405d      	eors	r5, r3
 80029b4:	0fc4      	lsrs	r4, r0, #31
 80029b6:	0028      	movs	r0, r5
 80029b8:	f000 f8f4 	bl	8002ba4 <__clzsi2>
 80029bc:	4b11      	ldr	r3, [pc, #68]	; (8002a04 <__aeabi_i2d+0x5c>)
 80029be:	1a1b      	subs	r3, r3, r0
 80029c0:	280a      	cmp	r0, #10
 80029c2:	dc16      	bgt.n	80029f2 <__aeabi_i2d+0x4a>
 80029c4:	0002      	movs	r2, r0
 80029c6:	002e      	movs	r6, r5
 80029c8:	3215      	adds	r2, #21
 80029ca:	4096      	lsls	r6, r2
 80029cc:	220b      	movs	r2, #11
 80029ce:	1a12      	subs	r2, r2, r0
 80029d0:	40d5      	lsrs	r5, r2
 80029d2:	055b      	lsls	r3, r3, #21
 80029d4:	032d      	lsls	r5, r5, #12
 80029d6:	0b2d      	lsrs	r5, r5, #12
 80029d8:	0d5b      	lsrs	r3, r3, #21
 80029da:	e003      	b.n	80029e4 <__aeabi_i2d+0x3c>
 80029dc:	2400      	movs	r4, #0
 80029de:	2300      	movs	r3, #0
 80029e0:	2500      	movs	r5, #0
 80029e2:	2600      	movs	r6, #0
 80029e4:	051b      	lsls	r3, r3, #20
 80029e6:	432b      	orrs	r3, r5
 80029e8:	07e4      	lsls	r4, r4, #31
 80029ea:	4323      	orrs	r3, r4
 80029ec:	0030      	movs	r0, r6
 80029ee:	0019      	movs	r1, r3
 80029f0:	bd70      	pop	{r4, r5, r6, pc}
 80029f2:	380b      	subs	r0, #11
 80029f4:	4085      	lsls	r5, r0
 80029f6:	055b      	lsls	r3, r3, #21
 80029f8:	032d      	lsls	r5, r5, #12
 80029fa:	2600      	movs	r6, #0
 80029fc:	0b2d      	lsrs	r5, r5, #12
 80029fe:	0d5b      	lsrs	r3, r3, #21
 8002a00:	e7f0      	b.n	80029e4 <__aeabi_i2d+0x3c>
 8002a02:	46c0      	nop			; (mov r8, r8)
 8002a04:	0000041e 	.word	0x0000041e

08002a08 <__aeabi_f2d>:
 8002a08:	b570      	push	{r4, r5, r6, lr}
 8002a0a:	0242      	lsls	r2, r0, #9
 8002a0c:	0043      	lsls	r3, r0, #1
 8002a0e:	0fc4      	lsrs	r4, r0, #31
 8002a10:	20fe      	movs	r0, #254	; 0xfe
 8002a12:	0e1b      	lsrs	r3, r3, #24
 8002a14:	1c59      	adds	r1, r3, #1
 8002a16:	0a55      	lsrs	r5, r2, #9
 8002a18:	4208      	tst	r0, r1
 8002a1a:	d00c      	beq.n	8002a36 <__aeabi_f2d+0x2e>
 8002a1c:	21e0      	movs	r1, #224	; 0xe0
 8002a1e:	0089      	lsls	r1, r1, #2
 8002a20:	468c      	mov	ip, r1
 8002a22:	076d      	lsls	r5, r5, #29
 8002a24:	0b12      	lsrs	r2, r2, #12
 8002a26:	4463      	add	r3, ip
 8002a28:	051b      	lsls	r3, r3, #20
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	07e4      	lsls	r4, r4, #31
 8002a2e:	4323      	orrs	r3, r4
 8002a30:	0028      	movs	r0, r5
 8002a32:	0019      	movs	r1, r3
 8002a34:	bd70      	pop	{r4, r5, r6, pc}
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d114      	bne.n	8002a64 <__aeabi_f2d+0x5c>
 8002a3a:	2d00      	cmp	r5, #0
 8002a3c:	d01b      	beq.n	8002a76 <__aeabi_f2d+0x6e>
 8002a3e:	0028      	movs	r0, r5
 8002a40:	f000 f8b0 	bl	8002ba4 <__clzsi2>
 8002a44:	280a      	cmp	r0, #10
 8002a46:	dc1c      	bgt.n	8002a82 <__aeabi_f2d+0x7a>
 8002a48:	230b      	movs	r3, #11
 8002a4a:	002a      	movs	r2, r5
 8002a4c:	1a1b      	subs	r3, r3, r0
 8002a4e:	40da      	lsrs	r2, r3
 8002a50:	0003      	movs	r3, r0
 8002a52:	3315      	adds	r3, #21
 8002a54:	409d      	lsls	r5, r3
 8002a56:	4b0e      	ldr	r3, [pc, #56]	; (8002a90 <__aeabi_f2d+0x88>)
 8002a58:	0312      	lsls	r2, r2, #12
 8002a5a:	1a1b      	subs	r3, r3, r0
 8002a5c:	055b      	lsls	r3, r3, #21
 8002a5e:	0b12      	lsrs	r2, r2, #12
 8002a60:	0d5b      	lsrs	r3, r3, #21
 8002a62:	e7e1      	b.n	8002a28 <__aeabi_f2d+0x20>
 8002a64:	2d00      	cmp	r5, #0
 8002a66:	d009      	beq.n	8002a7c <__aeabi_f2d+0x74>
 8002a68:	0b13      	lsrs	r3, r2, #12
 8002a6a:	2280      	movs	r2, #128	; 0x80
 8002a6c:	0312      	lsls	r2, r2, #12
 8002a6e:	431a      	orrs	r2, r3
 8002a70:	076d      	lsls	r5, r5, #29
 8002a72:	4b08      	ldr	r3, [pc, #32]	; (8002a94 <__aeabi_f2d+0x8c>)
 8002a74:	e7d8      	b.n	8002a28 <__aeabi_f2d+0x20>
 8002a76:	2300      	movs	r3, #0
 8002a78:	2200      	movs	r2, #0
 8002a7a:	e7d5      	b.n	8002a28 <__aeabi_f2d+0x20>
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	4b05      	ldr	r3, [pc, #20]	; (8002a94 <__aeabi_f2d+0x8c>)
 8002a80:	e7d2      	b.n	8002a28 <__aeabi_f2d+0x20>
 8002a82:	0003      	movs	r3, r0
 8002a84:	002a      	movs	r2, r5
 8002a86:	3b0b      	subs	r3, #11
 8002a88:	409a      	lsls	r2, r3
 8002a8a:	2500      	movs	r5, #0
 8002a8c:	e7e3      	b.n	8002a56 <__aeabi_f2d+0x4e>
 8002a8e:	46c0      	nop			; (mov r8, r8)
 8002a90:	00000389 	.word	0x00000389
 8002a94:	000007ff 	.word	0x000007ff

08002a98 <__aeabi_d2f>:
 8002a98:	0002      	movs	r2, r0
 8002a9a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a9c:	004b      	lsls	r3, r1, #1
 8002a9e:	030d      	lsls	r5, r1, #12
 8002aa0:	0f40      	lsrs	r0, r0, #29
 8002aa2:	0d5b      	lsrs	r3, r3, #21
 8002aa4:	0fcc      	lsrs	r4, r1, #31
 8002aa6:	0a6d      	lsrs	r5, r5, #9
 8002aa8:	493a      	ldr	r1, [pc, #232]	; (8002b94 <__aeabi_d2f+0xfc>)
 8002aaa:	4305      	orrs	r5, r0
 8002aac:	1c58      	adds	r0, r3, #1
 8002aae:	00d7      	lsls	r7, r2, #3
 8002ab0:	4208      	tst	r0, r1
 8002ab2:	d00a      	beq.n	8002aca <__aeabi_d2f+0x32>
 8002ab4:	4938      	ldr	r1, [pc, #224]	; (8002b98 <__aeabi_d2f+0x100>)
 8002ab6:	1859      	adds	r1, r3, r1
 8002ab8:	29fe      	cmp	r1, #254	; 0xfe
 8002aba:	dd16      	ble.n	8002aea <__aeabi_d2f+0x52>
 8002abc:	20ff      	movs	r0, #255	; 0xff
 8002abe:	2200      	movs	r2, #0
 8002ac0:	05c0      	lsls	r0, r0, #23
 8002ac2:	4310      	orrs	r0, r2
 8002ac4:	07e4      	lsls	r4, r4, #31
 8002ac6:	4320      	orrs	r0, r4
 8002ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d106      	bne.n	8002adc <__aeabi_d2f+0x44>
 8002ace:	433d      	orrs	r5, r7
 8002ad0:	d026      	beq.n	8002b20 <__aeabi_d2f+0x88>
 8002ad2:	2205      	movs	r2, #5
 8002ad4:	0192      	lsls	r2, r2, #6
 8002ad6:	0a52      	lsrs	r2, r2, #9
 8002ad8:	b2d8      	uxtb	r0, r3
 8002ada:	e7f1      	b.n	8002ac0 <__aeabi_d2f+0x28>
 8002adc:	432f      	orrs	r7, r5
 8002ade:	d0ed      	beq.n	8002abc <__aeabi_d2f+0x24>
 8002ae0:	2280      	movs	r2, #128	; 0x80
 8002ae2:	03d2      	lsls	r2, r2, #15
 8002ae4:	20ff      	movs	r0, #255	; 0xff
 8002ae6:	432a      	orrs	r2, r5
 8002ae8:	e7ea      	b.n	8002ac0 <__aeabi_d2f+0x28>
 8002aea:	2900      	cmp	r1, #0
 8002aec:	dd1b      	ble.n	8002b26 <__aeabi_d2f+0x8e>
 8002aee:	0192      	lsls	r2, r2, #6
 8002af0:	1e50      	subs	r0, r2, #1
 8002af2:	4182      	sbcs	r2, r0
 8002af4:	00ed      	lsls	r5, r5, #3
 8002af6:	0f7f      	lsrs	r7, r7, #29
 8002af8:	432a      	orrs	r2, r5
 8002afa:	433a      	orrs	r2, r7
 8002afc:	0753      	lsls	r3, r2, #29
 8002afe:	d047      	beq.n	8002b90 <__aeabi_d2f+0xf8>
 8002b00:	230f      	movs	r3, #15
 8002b02:	4013      	ands	r3, r2
 8002b04:	2b04      	cmp	r3, #4
 8002b06:	d000      	beq.n	8002b0a <__aeabi_d2f+0x72>
 8002b08:	3204      	adds	r2, #4
 8002b0a:	2380      	movs	r3, #128	; 0x80
 8002b0c:	04db      	lsls	r3, r3, #19
 8002b0e:	4013      	ands	r3, r2
 8002b10:	d03e      	beq.n	8002b90 <__aeabi_d2f+0xf8>
 8002b12:	1c48      	adds	r0, r1, #1
 8002b14:	29fe      	cmp	r1, #254	; 0xfe
 8002b16:	d0d1      	beq.n	8002abc <__aeabi_d2f+0x24>
 8002b18:	0192      	lsls	r2, r2, #6
 8002b1a:	0a52      	lsrs	r2, r2, #9
 8002b1c:	b2c0      	uxtb	r0, r0
 8002b1e:	e7cf      	b.n	8002ac0 <__aeabi_d2f+0x28>
 8002b20:	2000      	movs	r0, #0
 8002b22:	2200      	movs	r2, #0
 8002b24:	e7cc      	b.n	8002ac0 <__aeabi_d2f+0x28>
 8002b26:	000a      	movs	r2, r1
 8002b28:	3217      	adds	r2, #23
 8002b2a:	db2f      	blt.n	8002b8c <__aeabi_d2f+0xf4>
 8002b2c:	2680      	movs	r6, #128	; 0x80
 8002b2e:	0436      	lsls	r6, r6, #16
 8002b30:	432e      	orrs	r6, r5
 8002b32:	251e      	movs	r5, #30
 8002b34:	1a6d      	subs	r5, r5, r1
 8002b36:	2d1f      	cmp	r5, #31
 8002b38:	dd11      	ble.n	8002b5e <__aeabi_d2f+0xc6>
 8002b3a:	2202      	movs	r2, #2
 8002b3c:	4252      	negs	r2, r2
 8002b3e:	1a52      	subs	r2, r2, r1
 8002b40:	0031      	movs	r1, r6
 8002b42:	40d1      	lsrs	r1, r2
 8002b44:	2d20      	cmp	r5, #32
 8002b46:	d004      	beq.n	8002b52 <__aeabi_d2f+0xba>
 8002b48:	4a14      	ldr	r2, [pc, #80]	; (8002b9c <__aeabi_d2f+0x104>)
 8002b4a:	4694      	mov	ip, r2
 8002b4c:	4463      	add	r3, ip
 8002b4e:	409e      	lsls	r6, r3
 8002b50:	4337      	orrs	r7, r6
 8002b52:	003a      	movs	r2, r7
 8002b54:	1e53      	subs	r3, r2, #1
 8002b56:	419a      	sbcs	r2, r3
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	2100      	movs	r1, #0
 8002b5c:	e7ce      	b.n	8002afc <__aeabi_d2f+0x64>
 8002b5e:	4a10      	ldr	r2, [pc, #64]	; (8002ba0 <__aeabi_d2f+0x108>)
 8002b60:	0038      	movs	r0, r7
 8002b62:	4694      	mov	ip, r2
 8002b64:	4463      	add	r3, ip
 8002b66:	4098      	lsls	r0, r3
 8002b68:	003a      	movs	r2, r7
 8002b6a:	1e41      	subs	r1, r0, #1
 8002b6c:	4188      	sbcs	r0, r1
 8002b6e:	409e      	lsls	r6, r3
 8002b70:	40ea      	lsrs	r2, r5
 8002b72:	4330      	orrs	r0, r6
 8002b74:	4302      	orrs	r2, r0
 8002b76:	2100      	movs	r1, #0
 8002b78:	0753      	lsls	r3, r2, #29
 8002b7a:	d1c1      	bne.n	8002b00 <__aeabi_d2f+0x68>
 8002b7c:	2180      	movs	r1, #128	; 0x80
 8002b7e:	0013      	movs	r3, r2
 8002b80:	04c9      	lsls	r1, r1, #19
 8002b82:	2001      	movs	r0, #1
 8002b84:	400b      	ands	r3, r1
 8002b86:	420a      	tst	r2, r1
 8002b88:	d1c6      	bne.n	8002b18 <__aeabi_d2f+0x80>
 8002b8a:	e7a3      	b.n	8002ad4 <__aeabi_d2f+0x3c>
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	e7a0      	b.n	8002ad2 <__aeabi_d2f+0x3a>
 8002b90:	000b      	movs	r3, r1
 8002b92:	e79f      	b.n	8002ad4 <__aeabi_d2f+0x3c>
 8002b94:	000007fe 	.word	0x000007fe
 8002b98:	fffffc80 	.word	0xfffffc80
 8002b9c:	fffffca2 	.word	0xfffffca2
 8002ba0:	fffffc82 	.word	0xfffffc82

08002ba4 <__clzsi2>:
 8002ba4:	211c      	movs	r1, #28
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	041b      	lsls	r3, r3, #16
 8002baa:	4298      	cmp	r0, r3
 8002bac:	d301      	bcc.n	8002bb2 <__clzsi2+0xe>
 8002bae:	0c00      	lsrs	r0, r0, #16
 8002bb0:	3910      	subs	r1, #16
 8002bb2:	0a1b      	lsrs	r3, r3, #8
 8002bb4:	4298      	cmp	r0, r3
 8002bb6:	d301      	bcc.n	8002bbc <__clzsi2+0x18>
 8002bb8:	0a00      	lsrs	r0, r0, #8
 8002bba:	3908      	subs	r1, #8
 8002bbc:	091b      	lsrs	r3, r3, #4
 8002bbe:	4298      	cmp	r0, r3
 8002bc0:	d301      	bcc.n	8002bc6 <__clzsi2+0x22>
 8002bc2:	0900      	lsrs	r0, r0, #4
 8002bc4:	3904      	subs	r1, #4
 8002bc6:	a202      	add	r2, pc, #8	; (adr r2, 8002bd0 <__clzsi2+0x2c>)
 8002bc8:	5c10      	ldrb	r0, [r2, r0]
 8002bca:	1840      	adds	r0, r0, r1
 8002bcc:	4770      	bx	lr
 8002bce:	46c0      	nop			; (mov r8, r8)
 8002bd0:	02020304 	.word	0x02020304
 8002bd4:	01010101 	.word	0x01010101
	...

08002be0 <LCD_SendCommand>:
 *  Created on: Sep 11, 2023
 *      Author: fervi
 */
// Function to send a command to the LCD
#include "lcd1.h"
void LCD_SendCommand(uint8_t cmd) {
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	0002      	movs	r2, r0
 8002be8:	1dfb      	adds	r3, r7, #7
 8002bea:	701a      	strb	r2, [r3, #0]
    // Set RS (Register Select) low for command mode
    HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, GPIO_PIN_RESET);
 8002bec:	4b44      	ldr	r3, [pc, #272]	; (8002d00 <LCD_SendCommand+0x120>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	2108      	movs	r1, #8
 8002bf2:	0018      	movs	r0, r3
 8002bf4:	f002 ff54 	bl	8005aa0 <HAL_GPIO_WritePin>

    // Send the higher nibble of the command
    HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, (cmd >> 4) & 0x01);
 8002bf8:	1dfb      	adds	r3, r7, #7
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	091b      	lsrs	r3, r3, #4
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	2201      	movs	r2, #1
 8002c02:	4013      	ands	r3, r2
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	483f      	ldr	r0, [pc, #252]	; (8002d04 <LCD_SendCommand+0x124>)
 8002c08:	001a      	movs	r2, r3
 8002c0a:	2140      	movs	r1, #64	; 0x40
 8002c0c:	f002 ff48 	bl	8005aa0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, (cmd >> 5) & 0x01);
 8002c10:	1dfb      	adds	r3, r7, #7
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	095b      	lsrs	r3, r3, #5
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	2201      	movs	r2, #1
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	4839      	ldr	r0, [pc, #228]	; (8002d04 <LCD_SendCommand+0x124>)
 8002c20:	001a      	movs	r2, r3
 8002c22:	2180      	movs	r1, #128	; 0x80
 8002c24:	f002 ff3c 	bl	8005aa0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, (cmd >> 6) & 0x01);
 8002c28:	1dfb      	adds	r3, r7, #7
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	099b      	lsrs	r3, r3, #6
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	2201      	movs	r2, #1
 8002c32:	4013      	ands	r3, r2
 8002c34:	b2da      	uxtb	r2, r3
 8002c36:	2380      	movs	r3, #128	; 0x80
 8002c38:	005b      	lsls	r3, r3, #1
 8002c3a:	4832      	ldr	r0, [pc, #200]	; (8002d04 <LCD_SendCommand+0x124>)
 8002c3c:	0019      	movs	r1, r3
 8002c3e:	f002 ff2f 	bl	8005aa0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, (cmd >> 7) & 0x01);
 8002c42:	1dfb      	adds	r3, r7, #7
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	09db      	lsrs	r3, r3, #7
 8002c48:	b2da      	uxtb	r2, r3
 8002c4a:	2380      	movs	r3, #128	; 0x80
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	482d      	ldr	r0, [pc, #180]	; (8002d04 <LCD_SendCommand+0x124>)
 8002c50:	0019      	movs	r1, r3
 8002c52:	f002 ff25 	bl	8005aa0 <HAL_GPIO_WritePin>

    // Toggle the EN (Enable) Pin
    HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_SET);
 8002c56:	4b2b      	ldr	r3, [pc, #172]	; (8002d04 <LCD_SendCommand+0x124>)
 8002c58:	2201      	movs	r2, #1
 8002c5a:	2120      	movs	r1, #32
 8002c5c:	0018      	movs	r0, r3
 8002c5e:	f002 ff1f 	bl	8005aa0 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8002c62:	2001      	movs	r0, #1
 8002c64:	f001 f8b0 	bl	8003dc8 <HAL_Delay>
    HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_RESET);
 8002c68:	4b26      	ldr	r3, [pc, #152]	; (8002d04 <LCD_SendCommand+0x124>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	2120      	movs	r1, #32
 8002c6e:	0018      	movs	r0, r3
 8002c70:	f002 ff16 	bl	8005aa0 <HAL_GPIO_WritePin>

    // Send the lower nibble of the command
    HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, (cmd >> 0) & 0x01);
 8002c74:	1dfb      	adds	r3, r7, #7
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	2201      	movs	r2, #1
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	4821      	ldr	r0, [pc, #132]	; (8002d04 <LCD_SendCommand+0x124>)
 8002c80:	001a      	movs	r2, r3
 8002c82:	2140      	movs	r1, #64	; 0x40
 8002c84:	f002 ff0c 	bl	8005aa0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, (cmd >> 1) & 0x01);
 8002c88:	1dfb      	adds	r3, r7, #7
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	085b      	lsrs	r3, r3, #1
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	2201      	movs	r2, #1
 8002c92:	4013      	ands	r3, r2
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	481b      	ldr	r0, [pc, #108]	; (8002d04 <LCD_SendCommand+0x124>)
 8002c98:	001a      	movs	r2, r3
 8002c9a:	2180      	movs	r1, #128	; 0x80
 8002c9c:	f002 ff00 	bl	8005aa0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, (cmd >> 2) & 0x01);
 8002ca0:	1dfb      	adds	r3, r7, #7
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	089b      	lsrs	r3, r3, #2
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	2201      	movs	r2, #1
 8002caa:	4013      	ands	r3, r2
 8002cac:	b2da      	uxtb	r2, r3
 8002cae:	2380      	movs	r3, #128	; 0x80
 8002cb0:	005b      	lsls	r3, r3, #1
 8002cb2:	4814      	ldr	r0, [pc, #80]	; (8002d04 <LCD_SendCommand+0x124>)
 8002cb4:	0019      	movs	r1, r3
 8002cb6:	f002 fef3 	bl	8005aa0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, (cmd >> 3) & 0x01);
 8002cba:	1dfb      	adds	r3, r7, #7
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	08db      	lsrs	r3, r3, #3
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	b2da      	uxtb	r2, r3
 8002cc8:	2380      	movs	r3, #128	; 0x80
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	480d      	ldr	r0, [pc, #52]	; (8002d04 <LCD_SendCommand+0x124>)
 8002cce:	0019      	movs	r1, r3
 8002cd0:	f002 fee6 	bl	8005aa0 <HAL_GPIO_WritePin>

    // Toggle the EN (Enable) Pin
    HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_SET);
 8002cd4:	4b0b      	ldr	r3, [pc, #44]	; (8002d04 <LCD_SendCommand+0x124>)
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	2120      	movs	r1, #32
 8002cda:	0018      	movs	r0, r3
 8002cdc:	f002 fee0 	bl	8005aa0 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8002ce0:	2001      	movs	r0, #1
 8002ce2:	f001 f871 	bl	8003dc8 <HAL_Delay>
    HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_RESET);
 8002ce6:	4b07      	ldr	r3, [pc, #28]	; (8002d04 <LCD_SendCommand+0x124>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	2120      	movs	r1, #32
 8002cec:	0018      	movs	r0, r3
 8002cee:	f002 fed7 	bl	8005aa0 <HAL_GPIO_WritePin>

    // Delay for the command to complete
    HAL_Delay(2);
 8002cf2:	2002      	movs	r0, #2
 8002cf4:	f001 f868 	bl	8003dc8 <HAL_Delay>
}
 8002cf8:	46c0      	nop			; (mov r8, r8)
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	b002      	add	sp, #8
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	50000c00 	.word	0x50000c00
 8002d04:	50000400 	.word	0x50000400

08002d08 <LCD_SendData>:

// Function to send data to the LCD
void LCD_SendData(uint8_t data) {
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	0002      	movs	r2, r0
 8002d10:	1dfb      	adds	r3, r7, #7
 8002d12:	701a      	strb	r2, [r3, #0]
    // Set RS (Register Select) high for data mode
    HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, GPIO_PIN_SET);
 8002d14:	4b44      	ldr	r3, [pc, #272]	; (8002e28 <LCD_SendData+0x120>)
 8002d16:	2201      	movs	r2, #1
 8002d18:	2108      	movs	r1, #8
 8002d1a:	0018      	movs	r0, r3
 8002d1c:	f002 fec0 	bl	8005aa0 <HAL_GPIO_WritePin>

    // Send the higher nibble of the data
    HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, (data >> 4) & 0x01);
 8002d20:	1dfb      	adds	r3, r7, #7
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	091b      	lsrs	r3, r3, #4
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	2201      	movs	r2, #1
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	483f      	ldr	r0, [pc, #252]	; (8002e2c <LCD_SendData+0x124>)
 8002d30:	001a      	movs	r2, r3
 8002d32:	2140      	movs	r1, #64	; 0x40
 8002d34:	f002 feb4 	bl	8005aa0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, (data >> 5) & 0x01);
 8002d38:	1dfb      	adds	r3, r7, #7
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	095b      	lsrs	r3, r3, #5
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	2201      	movs	r2, #1
 8002d42:	4013      	ands	r3, r2
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	4839      	ldr	r0, [pc, #228]	; (8002e2c <LCD_SendData+0x124>)
 8002d48:	001a      	movs	r2, r3
 8002d4a:	2180      	movs	r1, #128	; 0x80
 8002d4c:	f002 fea8 	bl	8005aa0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, (data >> 6) & 0x01);
 8002d50:	1dfb      	adds	r3, r7, #7
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	099b      	lsrs	r3, r3, #6
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	2201      	movs	r2, #1
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	b2da      	uxtb	r2, r3
 8002d5e:	2380      	movs	r3, #128	; 0x80
 8002d60:	005b      	lsls	r3, r3, #1
 8002d62:	4832      	ldr	r0, [pc, #200]	; (8002e2c <LCD_SendData+0x124>)
 8002d64:	0019      	movs	r1, r3
 8002d66:	f002 fe9b 	bl	8005aa0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, (data >> 7) & 0x01);
 8002d6a:	1dfb      	adds	r3, r7, #7
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	09db      	lsrs	r3, r3, #7
 8002d70:	b2da      	uxtb	r2, r3
 8002d72:	2380      	movs	r3, #128	; 0x80
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	482d      	ldr	r0, [pc, #180]	; (8002e2c <LCD_SendData+0x124>)
 8002d78:	0019      	movs	r1, r3
 8002d7a:	f002 fe91 	bl	8005aa0 <HAL_GPIO_WritePin>

    // Toggle the EN (Enable) Pin
    HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_SET);
 8002d7e:	4b2b      	ldr	r3, [pc, #172]	; (8002e2c <LCD_SendData+0x124>)
 8002d80:	2201      	movs	r2, #1
 8002d82:	2120      	movs	r1, #32
 8002d84:	0018      	movs	r0, r3
 8002d86:	f002 fe8b 	bl	8005aa0 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8002d8a:	2001      	movs	r0, #1
 8002d8c:	f001 f81c 	bl	8003dc8 <HAL_Delay>
    HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_RESET);
 8002d90:	4b26      	ldr	r3, [pc, #152]	; (8002e2c <LCD_SendData+0x124>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	2120      	movs	r1, #32
 8002d96:	0018      	movs	r0, r3
 8002d98:	f002 fe82 	bl	8005aa0 <HAL_GPIO_WritePin>

    // Send the lower nibble of the data
    HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, (data >> 0) & 0x01);
 8002d9c:	1dfb      	adds	r3, r7, #7
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	2201      	movs	r2, #1
 8002da2:	4013      	ands	r3, r2
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	4821      	ldr	r0, [pc, #132]	; (8002e2c <LCD_SendData+0x124>)
 8002da8:	001a      	movs	r2, r3
 8002daa:	2140      	movs	r1, #64	; 0x40
 8002dac:	f002 fe78 	bl	8005aa0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, (data >> 1) & 0x01);
 8002db0:	1dfb      	adds	r3, r7, #7
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	085b      	lsrs	r3, r3, #1
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	2201      	movs	r2, #1
 8002dba:	4013      	ands	r3, r2
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	481b      	ldr	r0, [pc, #108]	; (8002e2c <LCD_SendData+0x124>)
 8002dc0:	001a      	movs	r2, r3
 8002dc2:	2180      	movs	r1, #128	; 0x80
 8002dc4:	f002 fe6c 	bl	8005aa0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, (data >> 2) & 0x01);
 8002dc8:	1dfb      	adds	r3, r7, #7
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	089b      	lsrs	r3, r3, #2
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	b2da      	uxtb	r2, r3
 8002dd6:	2380      	movs	r3, #128	; 0x80
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	4814      	ldr	r0, [pc, #80]	; (8002e2c <LCD_SendData+0x124>)
 8002ddc:	0019      	movs	r1, r3
 8002dde:	f002 fe5f 	bl	8005aa0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, (data >> 3) & 0x01);
 8002de2:	1dfb      	adds	r3, r7, #7
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	08db      	lsrs	r3, r3, #3
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2201      	movs	r2, #1
 8002dec:	4013      	ands	r3, r2
 8002dee:	b2da      	uxtb	r2, r3
 8002df0:	2380      	movs	r3, #128	; 0x80
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	480d      	ldr	r0, [pc, #52]	; (8002e2c <LCD_SendData+0x124>)
 8002df6:	0019      	movs	r1, r3
 8002df8:	f002 fe52 	bl	8005aa0 <HAL_GPIO_WritePin>

    // Toggle the EN (Enable) Pin
    HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_SET);
 8002dfc:	4b0b      	ldr	r3, [pc, #44]	; (8002e2c <LCD_SendData+0x124>)
 8002dfe:	2201      	movs	r2, #1
 8002e00:	2120      	movs	r1, #32
 8002e02:	0018      	movs	r0, r3
 8002e04:	f002 fe4c 	bl	8005aa0 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8002e08:	2001      	movs	r0, #1
 8002e0a:	f000 ffdd 	bl	8003dc8 <HAL_Delay>
    HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_RESET);
 8002e0e:	4b07      	ldr	r3, [pc, #28]	; (8002e2c <LCD_SendData+0x124>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	2120      	movs	r1, #32
 8002e14:	0018      	movs	r0, r3
 8002e16:	f002 fe43 	bl	8005aa0 <HAL_GPIO_WritePin>

    // Delay for data to be written
    HAL_Delay(2);
 8002e1a:	2002      	movs	r0, #2
 8002e1c:	f000 ffd4 	bl	8003dc8 <HAL_Delay>
}
 8002e20:	46c0      	nop			; (mov r8, r8)
 8002e22:	46bd      	mov	sp, r7
 8002e24:	b002      	add	sp, #8
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	50000c00 	.word	0x50000c00
 8002e2c:	50000400 	.word	0x50000400

08002e30 <LCD_Init>:

// Initialize the LCD
void LCD_Init(void) {
 8002e30:	b580      	push	{r7, lr}
 8002e32:	af00      	add	r7, sp, #0
//    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
//    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
//    HAL_GPIO_Init(LCD_GPIO_Port, &GPIO_InitStruct);

    // Initialize the LCD in 4-bit mode
    HAL_Delay(15); // Wait for power-up
 8002e34:	200f      	movs	r0, #15
 8002e36:	f000 ffc7 	bl	8003dc8 <HAL_Delay>
    LCD_SendCommand(0x33); // Initialize
 8002e3a:	2033      	movs	r0, #51	; 0x33
 8002e3c:	f7ff fed0 	bl	8002be0 <LCD_SendCommand>
    LCD_SendCommand(0x32); // Set to 4-bit mode
 8002e40:	2032      	movs	r0, #50	; 0x32
 8002e42:	f7ff fecd 	bl	8002be0 <LCD_SendCommand>
    LCD_SendCommand(0x28); // 2 lines, 5x8 font
 8002e46:	2028      	movs	r0, #40	; 0x28
 8002e48:	f7ff feca 	bl	8002be0 <LCD_SendCommand>
    LCD_SendCommand(0x0C); // Display on, cursor off, blink off
 8002e4c:	200c      	movs	r0, #12
 8002e4e:	f7ff fec7 	bl	8002be0 <LCD_SendCommand>
    LCD_SendCommand(0x01); // Clear display
 8002e52:	2001      	movs	r0, #1
 8002e54:	f7ff fec4 	bl	8002be0 <LCD_SendCommand>
    HAL_Delay(2); // Clear display delay
 8002e58:	2002      	movs	r0, #2
 8002e5a:	f000 ffb5 	bl	8003dc8 <HAL_Delay>
    LCD_SendCommand(0x06); // Entry mode: Increment cursor position, no display shift
 8002e5e:	2006      	movs	r0, #6
 8002e60:	f7ff febe 	bl	8002be0 <LCD_SendCommand>
}
 8002e64:	46c0      	nop			; (mov r8, r8)
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <LCD_Clear>:

// Clear the LCD display
void LCD_Clear(void) {
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	af00      	add	r7, sp, #0
    LCD_SendCommand(0x01);
 8002e6e:	2001      	movs	r0, #1
 8002e70:	f7ff feb6 	bl	8002be0 <LCD_SendCommand>
    HAL_Delay(2); // Clear display delay
 8002e74:	2002      	movs	r0, #2
 8002e76:	f000 ffa7 	bl	8003dc8 <HAL_Delay>
}
 8002e7a:	46c0      	nop			; (mov r8, r8)
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <LCD_SetCursor>:

// Set the cursor position (row and column)
void LCD_SetCursor(uint8_t row, uint8_t col) {
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	0002      	movs	r2, r0
 8002e88:	1dfb      	adds	r3, r7, #7
 8002e8a:	701a      	strb	r2, [r3, #0]
 8002e8c:	1dbb      	adds	r3, r7, #6
 8002e8e:	1c0a      	adds	r2, r1, #0
 8002e90:	701a      	strb	r2, [r3, #0]
    uint8_t row_offsets[] = {0x00, 0x40};
 8002e92:	230c      	movs	r3, #12
 8002e94:	18fb      	adds	r3, r7, r3
 8002e96:	2280      	movs	r2, #128	; 0x80
 8002e98:	01d2      	lsls	r2, r2, #7
 8002e9a:	801a      	strh	r2, [r3, #0]
    if (row >= 2) {
 8002e9c:	1dfb      	adds	r3, r7, #7
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d902      	bls.n	8002eaa <LCD_SetCursor+0x2a>
        row = 1; // Avoid out-of-bounds access
 8002ea4:	1dfb      	adds	r3, r7, #7
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	701a      	strb	r2, [r3, #0]
    }
    LCD_SendCommand(0x80 | (col + row_offsets[row]));
 8002eaa:	1dfb      	adds	r3, r7, #7
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	220c      	movs	r2, #12
 8002eb0:	18ba      	adds	r2, r7, r2
 8002eb2:	5cd2      	ldrb	r2, [r2, r3]
 8002eb4:	1dbb      	adds	r3, r7, #6
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	18d3      	adds	r3, r2, r3
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	b25b      	sxtb	r3, r3
 8002ebe:	2280      	movs	r2, #128	; 0x80
 8002ec0:	4252      	negs	r2, r2
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	b25b      	sxtb	r3, r3
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	0018      	movs	r0, r3
 8002eca:	f7ff fe89 	bl	8002be0 <LCD_SendCommand>
}
 8002ece:	46c0      	nop			; (mov r8, r8)
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	b004      	add	sp, #16
 8002ed4:	bd80      	pop	{r7, pc}

08002ed6 <LCD_Print>:

// Print a string to the LCD
void LCD_Print(char *str) {
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	b082      	sub	sp, #8
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
    while (*str) {
 8002ede:	e007      	b.n	8002ef0 <LCD_Print+0x1a>
        LCD_SendData(*str);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	0018      	movs	r0, r3
 8002ee6:	f7ff ff0f 	bl	8002d08 <LCD_SendData>
        str++;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	3301      	adds	r3, #1
 8002eee:	607b      	str	r3, [r7, #4]
    while (*str) {
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d1f3      	bne.n	8002ee0 <LCD_Print+0xa>
    }
}
 8002ef8:	46c0      	nop			; (mov r8, r8)
 8002efa:	46c0      	nop			; (mov r8, r8)
 8002efc:	46bd      	mov	sp, r7
 8002efe:	b002      	add	sp, #8
 8002f00:	bd80      	pop	{r7, pc}
	...

08002f04 <Vrefint_init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Vrefint_init(ADC_HandleTypeDef* HADC)
{
 8002f04:	b590      	push	{r4, r7, lr}
 8002f06:	b087      	sub	sp, #28
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002f0c:	240c      	movs	r4, #12
 8002f0e:	193b      	adds	r3, r7, r4
 8002f10:	0018      	movs	r0, r3
 8002f12:	230c      	movs	r3, #12
 8002f14:	001a      	movs	r2, r3
 8002f16:	2100      	movs	r1, #0
 8002f18:	f003 fe98 	bl	8006c4c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  HADC->Instance = ADC1;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4a29      	ldr	r2, [pc, #164]	; (8002fc4 <Vrefint_init+0xc0>)
 8002f20:	601a      	str	r2, [r3, #0]
  HADC->Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2280      	movs	r2, #128	; 0x80
 8002f26:	05d2      	lsls	r2, r2, #23
 8002f28:	605a      	str	r2, [r3, #4]
  HADC->Init.Resolution = ADC_RESOLUTION_12B;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	609a      	str	r2, [r3, #8]
  HADC->Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	60da      	str	r2, [r3, #12]
  HADC->Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	611a      	str	r2, [r3, #16]
  HADC->Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2204      	movs	r2, #4
 8002f40:	615a      	str	r2, [r3, #20]
  HADC->Init.LowPowerAutoWait = DISABLE;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	761a      	strb	r2, [r3, #24]
  HADC->Init.LowPowerAutoPowerOff = DISABLE;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	765a      	strb	r2, [r3, #25]
  HADC->Init.ContinuousConvMode = DISABLE;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	769a      	strb	r2, [r3, #26]
  HADC->Init.NbrOfConversion = 1;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	61da      	str	r2, [r3, #28]
  HADC->Init.DiscontinuousConvMode = DISABLE;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2220      	movs	r2, #32
 8002f5e:	2100      	movs	r1, #0
 8002f60:	5499      	strb	r1, [r3, r2]
  HADC->Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	625a      	str	r2, [r3, #36]	; 0x24
  HADC->Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	629a      	str	r2, [r3, #40]	; 0x28
  HADC->Init.DMAContinuousRequests = DISABLE;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	222c      	movs	r2, #44	; 0x2c
 8002f72:	2100      	movs	r1, #0
 8002f74:	5499      	strb	r1, [r3, r2]
  HADC->Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	631a      	str	r2, [r3, #48]	; 0x30
  HADC->Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2207      	movs	r2, #7
 8002f80:	635a      	str	r2, [r3, #52]	; 0x34
  HADC->Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	639a      	str	r2, [r3, #56]	; 0x38
  HADC->Init.OversamplingMode = DISABLE;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	223c      	movs	r2, #60	; 0x3c
 8002f8c:	2100      	movs	r1, #0
 8002f8e:	5499      	strb	r1, [r3, r2]
  HADC->Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002f96:	4b0c      	ldr	r3, [pc, #48]	; (8002fc8 <Vrefint_init+0xc4>)
 8002f98:	0018      	movs	r0, r3
 8002f9a:	f001 f8a3 	bl	80040e4 <HAL_ADC_Init>

  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8002f9e:	193b      	adds	r3, r7, r4
 8002fa0:	4a0a      	ldr	r2, [pc, #40]	; (8002fcc <Vrefint_init+0xc8>)
 8002fa2:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002fa4:	193b      	adds	r3, r7, r4
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8002faa:	193b      	adds	r3, r7, r4
 8002fac:	2200      	movs	r2, #0
 8002fae:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002fb0:	193a      	adds	r2, r7, r4
 8002fb2:	4b05      	ldr	r3, [pc, #20]	; (8002fc8 <Vrefint_init+0xc4>)
 8002fb4:	0011      	movs	r1, r2
 8002fb6:	0018      	movs	r0, r3
 8002fb8:	f001 fbfc 	bl	80047b4 <HAL_ADC_ConfigChannel>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002fbc:	46c0      	nop			; (mov r8, r8)
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	b007      	add	sp, #28
 8002fc2:	bd90      	pop	{r4, r7, pc}
 8002fc4:	40012400 	.word	0x40012400
 8002fc8:	2000008c 	.word	0x2000008c
 8002fcc:	b4002000 	.word	0xb4002000

08002fd0 <GetVref>:

Fun_Status GetVref(ADCPar * ADCValues)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
	  Vrefint_init(ADCValues->HADC);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fdc:	0018      	movs	r0, r3
 8002fde:	f7ff ff91 	bl	8002f04 <Vrefint_init>
	  if(HAL_ADC_Start(ADCValues->HADC) != HAL_OK)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe6:	0018      	movs	r0, r3
 8002fe8:	f001 fa24 	bl	8004434 <HAL_ADC_Start>
 8002fec:	1e03      	subs	r3, r0, #0
 8002fee:	d001      	beq.n	8002ff4 <GetVref+0x24>
	  {
		return Fun_Error;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e04b      	b.n	800308c <GetVref+0xbc>
	  }
	  if(HAL_ADC_PollForConversion(ADCValues->HADC, HAL_MAX_DELAY) != HAL_OK)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	4252      	negs	r2, r2
 8002ffc:	0011      	movs	r1, r2
 8002ffe:	0018      	movs	r0, r3
 8003000:	f001 faa2 	bl	8004548 <HAL_ADC_PollForConversion>
 8003004:	1e03      	subs	r3, r0, #0
 8003006:	d001      	beq.n	800300c <GetVref+0x3c>
	  {
		  return Fun_Error;
 8003008:	2301      	movs	r3, #1
 800300a:	e03f      	b.n	800308c <GetVref+0xbc>
	  }
	  ADCValues->Vref = HAL_ADC_GetValue(ADCValues->HADC);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003010:	0018      	movs	r0, r3
 8003012:	f001 fbbb 	bl	800478c <HAL_ADC_GetValue>
 8003016:	0003      	movs	r3, r0
 8003018:	0018      	movs	r0, r3
 800301a:	f7fd fec1 	bl	8000da0 <__aeabi_ui2f>
 800301e:	1c02      	adds	r2, r0, #0
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	60da      	str	r2, [r3, #12]
	  if(HAL_ADC_Stop(ADCValues->HADC) != HAL_OK)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003028:	0018      	movs	r0, r3
 800302a:	f001 fa51 	bl	80044d0 <HAL_ADC_Stop>
 800302e:	1e03      	subs	r3, r0, #0
 8003030:	d001      	beq.n	8003036 <GetVref+0x66>
	  {
		  return Fun_Error;
 8003032:	2301      	movs	r3, #1
 8003034:	e02a      	b.n	800308c <GetVref+0xbc>
	  }
	  ADCValues->Vref =(fact_val * fact_val_addr)/ADCValues->Vref;
 8003036:	4b17      	ldr	r3, [pc, #92]	; (8003094 <GetVref+0xc4>)
 8003038:	881b      	ldrh	r3, [r3, #0]
 800303a:	001a      	movs	r2, r3
 800303c:	0013      	movs	r3, r2
 800303e:	005b      	lsls	r3, r3, #1
 8003040:	189b      	adds	r3, r3, r2
 8003042:	0018      	movs	r0, r3
 8003044:	f7fd fe5a 	bl	8000cfc <__aeabi_i2f>
 8003048:	1c02      	adds	r2, r0, #0
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	1c19      	adds	r1, r3, #0
 8003050:	1c10      	adds	r0, r2, #0
 8003052:	f7fd f97b 	bl	800034c <__aeabi_fdiv>
 8003056:	1c03      	adds	r3, r0, #0
 8003058:	1c1a      	adds	r2, r3, #0
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	60da      	str	r2, [r3, #12]
	  ADCValues->K=ADCValues->Vref/Reso;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	490d      	ldr	r1, [pc, #52]	; (8003098 <GetVref+0xc8>)
 8003064:	1c18      	adds	r0, r3, #0
 8003066:	f7fd f971 	bl	800034c <__aeabi_fdiv>
 800306a:	1c03      	adds	r3, r0, #0
 800306c:	1c1a      	adds	r2, r3, #0
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	611a      	str	r2, [r3, #16]
	  //3 channel init
	  MX_ADC1_Init();
 8003072:	f000 fb3f 	bl	80036f4 <MX_ADC1_Init>
	  HAL_Delay(10);
 8003076:	200a      	movs	r0, #10
 8003078:	f000 fea6 	bl	8003dc8 <HAL_Delay>
	  HAL_ADCEx_Calibration_Start(&hadc1);
 800307c:	4b07      	ldr	r3, [pc, #28]	; (800309c <GetVref+0xcc>)
 800307e:	0018      	movs	r0, r3
 8003080:	f001 ffa4 	bl	8004fcc <HAL_ADCEx_Calibration_Start>
	  HAL_Delay(10);
 8003084:	200a      	movs	r0, #10
 8003086:	f000 fe9f 	bl	8003dc8 <HAL_Delay>
	  return Fun_Ok;
 800308a:	2300      	movs	r3, #0
}
 800308c:	0018      	movs	r0, r3
 800308e:	46bd      	mov	sp, r7
 8003090:	b002      	add	sp, #8
 8003092:	bd80      	pop	{r7, pc}
 8003094:	1fff75aa 	.word	0x1fff75aa
 8003098:	457ff000 	.word	0x457ff000
 800309c:	2000008c 	.word	0x2000008c

080030a0 <FADC_Get_VRMS>:

Fun_Status FADC_Get_VRMS(ADCPar* FADC_p){
 80030a0:	b5b0      	push	{r4, r5, r7, lr}
 80030a2:	b08a      	sub	sp, #40	; 0x28
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]


    if((FADC_p->StatusDMA==ADC_DMA_Ready)||(FADC_p->StatusDMA==ADC_DMA_ERROR))
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2224      	movs	r2, #36	; 0x24
 80030ac:	5c9b      	ldrb	r3, [r3, r2]
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d004      	beq.n	80030bc <FADC_Get_VRMS+0x1c>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2224      	movs	r2, #36	; 0x24
 80030b6:	5c9b      	ldrb	r3, [r3, r2]
 80030b8:	2b04      	cmp	r3, #4
 80030ba:	d111      	bne.n	80030e0 <FADC_Get_VRMS+0x40>
    {
        //
        Start_Time=HAL_GetTick();
 80030bc:	f000 fe7a 	bl	8003db4 <HAL_GetTick>
 80030c0:	0002      	movs	r2, r0
 80030c2:	4bd7      	ldr	r3, [pc, #860]	; (8003420 <FADC_Get_VRMS+0x380>)
 80030c4:	601a      	str	r2, [r3, #0]
        HAL_ADC_Start_DMA(FADC_p->HADC, (uint32_t*)&FADC_p->ADC_DMA_Sample,NumOfADCChan*EachChanSample);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	332c      	adds	r3, #44	; 0x2c
 80030ce:	22f0      	movs	r2, #240	; 0xf0
 80030d0:	0052      	lsls	r2, r2, #1
 80030d2:	0019      	movs	r1, r3
 80030d4:	f001 facc 	bl	8004670 <HAL_ADC_Start_DMA>
        FADC_p->StatusDMA=ADC_DMA_Started;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2224      	movs	r2, #36	; 0x24
 80030dc:	2102      	movs	r1, #2
 80030de:	5499      	strb	r1, [r3, r2]
    }

    if(FADC_p->StatusDMA==ADC_DMA_Completed)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2224      	movs	r2, #36	; 0x24
 80030e4:	5c9b      	ldrb	r3, [r3, r2]
 80030e6:	2b03      	cmp	r3, #3
 80030e8:	d000      	beq.n	80030ec <FADC_Get_VRMS+0x4c>
 80030ea:	e193      	b.n	8003414 <FADC_Get_VRMS+0x374>
    {
        uint16_t id=0;
 80030ec:	2126      	movs	r1, #38	; 0x26
 80030ee:	187b      	adds	r3, r7, r1
 80030f0:	2200      	movs	r2, #0
 80030f2:	801a      	strh	r2, [r3, #0]
        long double Vrmssqr1=0,Vrmssqr2=0,Vrmssqr3=0;
 80030f4:	2200      	movs	r2, #0
 80030f6:	2300      	movs	r3, #0
 80030f8:	61ba      	str	r2, [r7, #24]
 80030fa:	61fb      	str	r3, [r7, #28]
 80030fc:	2200      	movs	r2, #0
 80030fe:	2300      	movs	r3, #0
 8003100:	613a      	str	r2, [r7, #16]
 8003102:	617b      	str	r3, [r7, #20]
 8003104:	2200      	movs	r2, #0
 8003106:	2300      	movs	r3, #0
 8003108:	60ba      	str	r2, [r7, #8]
 800310a:	60fb      	str	r3, [r7, #12]
         for(id=0;id<EachChanSample;id++)
 800310c:	187b      	adds	r3, r7, r1
 800310e:	2200      	movs	r2, #0
 8003110:	801a      	strh	r2, [r3, #0]
 8003112:	e09a      	b.n	800324a <FADC_Get_VRMS+0x1aa>
         {
             FADC_p->Vrms1 = FADC_p->ADC_DMA_Sample[id*3];
 8003114:	2426      	movs	r4, #38	; 0x26
 8003116:	193b      	adds	r3, r7, r4
 8003118:	881a      	ldrh	r2, [r3, #0]
 800311a:	0013      	movs	r3, r2
 800311c:	005b      	lsls	r3, r3, #1
 800311e:	189b      	adds	r3, r3, r2
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	3314      	adds	r3, #20
 8003124:	005b      	lsls	r3, r3, #1
 8003126:	18d3      	adds	r3, r2, r3
 8003128:	3304      	adds	r3, #4
 800312a:	881b      	ldrh	r3, [r3, #0]
 800312c:	0018      	movs	r0, r3
 800312e:	f7fd fe37 	bl	8000da0 <__aeabi_ui2f>
 8003132:	1c02      	adds	r2, r0, #0
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	619a      	str	r2, [r3, #24]
             FADC_p->Vrms2 = FADC_p->ADC_DMA_Sample[(id*3)+1];
 8003138:	193b      	adds	r3, r7, r4
 800313a:	881a      	ldrh	r2, [r3, #0]
 800313c:	0013      	movs	r3, r2
 800313e:	005b      	lsls	r3, r3, #1
 8003140:	189b      	adds	r3, r3, r2
 8003142:	3301      	adds	r3, #1
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	3314      	adds	r3, #20
 8003148:	005b      	lsls	r3, r3, #1
 800314a:	18d3      	adds	r3, r2, r3
 800314c:	3304      	adds	r3, #4
 800314e:	881b      	ldrh	r3, [r3, #0]
 8003150:	0018      	movs	r0, r3
 8003152:	f7fd fe25 	bl	8000da0 <__aeabi_ui2f>
 8003156:	1c02      	adds	r2, r0, #0
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	61da      	str	r2, [r3, #28]
             FADC_p->Vrms3 = FADC_p->ADC_DMA_Sample[(id*3)+2];
 800315c:	193b      	adds	r3, r7, r4
 800315e:	881a      	ldrh	r2, [r3, #0]
 8003160:	0013      	movs	r3, r2
 8003162:	005b      	lsls	r3, r3, #1
 8003164:	189b      	adds	r3, r3, r2
 8003166:	3302      	adds	r3, #2
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	3314      	adds	r3, #20
 800316c:	005b      	lsls	r3, r3, #1
 800316e:	18d3      	adds	r3, r2, r3
 8003170:	3304      	adds	r3, #4
 8003172:	881b      	ldrh	r3, [r3, #0]
 8003174:	0018      	movs	r0, r3
 8003176:	f7fd fe13 	bl	8000da0 <__aeabi_ui2f>
 800317a:	1c02      	adds	r2, r0, #0
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	621a      	str	r2, [r3, #32]

             FADC_p->Vrms1  =  (FADC_p->Vrms1)-2047.5;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	699b      	ldr	r3, [r3, #24]
 8003184:	49a7      	ldr	r1, [pc, #668]	; (8003424 <FADC_Get_VRMS+0x384>)
 8003186:	1c18      	adds	r0, r3, #0
 8003188:	f7fd fbf8 	bl	800097c <__aeabi_fsub>
 800318c:	1c03      	adds	r3, r0, #0
 800318e:	1c1a      	adds	r2, r3, #0
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	619a      	str	r2, [r3, #24]
             FADC_p->Vrms2  =  (FADC_p->Vrms2)-2047.5;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	69db      	ldr	r3, [r3, #28]
 8003198:	49a2      	ldr	r1, [pc, #648]	; (8003424 <FADC_Get_VRMS+0x384>)
 800319a:	1c18      	adds	r0, r3, #0
 800319c:	f7fd fbee 	bl	800097c <__aeabi_fsub>
 80031a0:	1c03      	adds	r3, r0, #0
 80031a2:	1c1a      	adds	r2, r3, #0
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	61da      	str	r2, [r3, #28]
             FADC_p->Vrms3  =  (FADC_p->Vrms3)-2047.5;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a1b      	ldr	r3, [r3, #32]
 80031ac:	499d      	ldr	r1, [pc, #628]	; (8003424 <FADC_Get_VRMS+0x384>)
 80031ae:	1c18      	adds	r0, r3, #0
 80031b0:	f7fd fbe4 	bl	800097c <__aeabi_fsub>
 80031b4:	1c03      	adds	r3, r0, #0
 80031b6:	1c1a      	adds	r2, r3, #0
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	621a      	str	r2, [r3, #32]

             Vrmssqr1+=FADC_p->Vrms1*FADC_p->Vrms1 ;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	699a      	ldr	r2, [r3, #24]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	699b      	ldr	r3, [r3, #24]
 80031c4:	1c19      	adds	r1, r3, #0
 80031c6:	1c10      	adds	r0, r2, #0
 80031c8:	f7fd fa8a 	bl	80006e0 <__aeabi_fmul>
 80031cc:	1c03      	adds	r3, r0, #0
 80031ce:	1c18      	adds	r0, r3, #0
 80031d0:	f7ff fc1a 	bl	8002a08 <__aeabi_f2d>
 80031d4:	0002      	movs	r2, r0
 80031d6:	000b      	movs	r3, r1
 80031d8:	69b8      	ldr	r0, [r7, #24]
 80031da:	69f9      	ldr	r1, [r7, #28]
 80031dc:	f7fd fe28 	bl	8000e30 <__aeabi_dadd>
 80031e0:	0002      	movs	r2, r0
 80031e2:	000b      	movs	r3, r1
 80031e4:	61ba      	str	r2, [r7, #24]
 80031e6:	61fb      	str	r3, [r7, #28]
             Vrmssqr2+=FADC_p->Vrms2*FADC_p->Vrms2 ;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	69da      	ldr	r2, [r3, #28]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	69db      	ldr	r3, [r3, #28]
 80031f0:	1c19      	adds	r1, r3, #0
 80031f2:	1c10      	adds	r0, r2, #0
 80031f4:	f7fd fa74 	bl	80006e0 <__aeabi_fmul>
 80031f8:	1c03      	adds	r3, r0, #0
 80031fa:	1c18      	adds	r0, r3, #0
 80031fc:	f7ff fc04 	bl	8002a08 <__aeabi_f2d>
 8003200:	0002      	movs	r2, r0
 8003202:	000b      	movs	r3, r1
 8003204:	6938      	ldr	r0, [r7, #16]
 8003206:	6979      	ldr	r1, [r7, #20]
 8003208:	f7fd fe12 	bl	8000e30 <__aeabi_dadd>
 800320c:	0002      	movs	r2, r0
 800320e:	000b      	movs	r3, r1
 8003210:	613a      	str	r2, [r7, #16]
 8003212:	617b      	str	r3, [r7, #20]
             Vrmssqr3+=FADC_p->Vrms3*FADC_p->Vrms3 ;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a1a      	ldr	r2, [r3, #32]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a1b      	ldr	r3, [r3, #32]
 800321c:	1c19      	adds	r1, r3, #0
 800321e:	1c10      	adds	r0, r2, #0
 8003220:	f7fd fa5e 	bl	80006e0 <__aeabi_fmul>
 8003224:	1c03      	adds	r3, r0, #0
 8003226:	1c18      	adds	r0, r3, #0
 8003228:	f7ff fbee 	bl	8002a08 <__aeabi_f2d>
 800322c:	0002      	movs	r2, r0
 800322e:	000b      	movs	r3, r1
 8003230:	68b8      	ldr	r0, [r7, #8]
 8003232:	68f9      	ldr	r1, [r7, #12]
 8003234:	f7fd fdfc 	bl	8000e30 <__aeabi_dadd>
 8003238:	0002      	movs	r2, r0
 800323a:	000b      	movs	r3, r1
 800323c:	60ba      	str	r2, [r7, #8]
 800323e:	60fb      	str	r3, [r7, #12]
         for(id=0;id<EachChanSample;id++)
 8003240:	193b      	adds	r3, r7, r4
 8003242:	881a      	ldrh	r2, [r3, #0]
 8003244:	193b      	adds	r3, r7, r4
 8003246:	3201      	adds	r2, #1
 8003248:	801a      	strh	r2, [r3, #0]
 800324a:	2426      	movs	r4, #38	; 0x26
 800324c:	193b      	adds	r3, r7, r4
 800324e:	881b      	ldrh	r3, [r3, #0]
 8003250:	2b9f      	cmp	r3, #159	; 0x9f
 8003252:	d800      	bhi.n	8003256 <FADC_Get_VRMS+0x1b6>
 8003254:	e75e      	b.n	8003114 <FADC_Get_VRMS+0x74>
         }

         //each channel mean
         Vrmssqr1=Vrmssqr1/id;
 8003256:	193b      	adds	r3, r7, r4
 8003258:	881b      	ldrh	r3, [r3, #0]
 800325a:	0018      	movs	r0, r3
 800325c:	f7ff fba4 	bl	80029a8 <__aeabi_i2d>
 8003260:	0002      	movs	r2, r0
 8003262:	000b      	movs	r3, r1
 8003264:	69b8      	ldr	r0, [r7, #24]
 8003266:	69f9      	ldr	r1, [r7, #28]
 8003268:	f7fe f942 	bl	80014f0 <__aeabi_ddiv>
 800326c:	0002      	movs	r2, r0
 800326e:	000b      	movs	r3, r1
 8003270:	61ba      	str	r2, [r7, #24]
 8003272:	61fb      	str	r3, [r7, #28]
         Vrmssqr2=Vrmssqr2/id;
 8003274:	193b      	adds	r3, r7, r4
 8003276:	881b      	ldrh	r3, [r3, #0]
 8003278:	0018      	movs	r0, r3
 800327a:	f7ff fb95 	bl	80029a8 <__aeabi_i2d>
 800327e:	0002      	movs	r2, r0
 8003280:	000b      	movs	r3, r1
 8003282:	6938      	ldr	r0, [r7, #16]
 8003284:	6979      	ldr	r1, [r7, #20]
 8003286:	f7fe f933 	bl	80014f0 <__aeabi_ddiv>
 800328a:	0002      	movs	r2, r0
 800328c:	000b      	movs	r3, r1
 800328e:	613a      	str	r2, [r7, #16]
 8003290:	617b      	str	r3, [r7, #20]
         Vrmssqr3=Vrmssqr3/id;
 8003292:	193b      	adds	r3, r7, r4
 8003294:	881b      	ldrh	r3, [r3, #0]
 8003296:	0018      	movs	r0, r3
 8003298:	f7ff fb86 	bl	80029a8 <__aeabi_i2d>
 800329c:	0002      	movs	r2, r0
 800329e:	000b      	movs	r3, r1
 80032a0:	68b8      	ldr	r0, [r7, #8]
 80032a2:	68f9      	ldr	r1, [r7, #12]
 80032a4:	f7fe f924 	bl	80014f0 <__aeabi_ddiv>
 80032a8:	0002      	movs	r2, r0
 80032aa:	000b      	movs	r3, r1
 80032ac:	60ba      	str	r2, [r7, #8]
 80032ae:	60fb      	str	r3, [r7, #12]

         FADC_p->Vrms1 = sqrt(Vrmssqr1);
 80032b0:	69ba      	ldr	r2, [r7, #24]
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	0010      	movs	r0, r2
 80032b6:	0019      	movs	r1, r3
 80032b8:	f004 f94d 	bl	8007556 <sqrt>
 80032bc:	0002      	movs	r2, r0
 80032be:	000b      	movs	r3, r1
 80032c0:	0010      	movs	r0, r2
 80032c2:	0019      	movs	r1, r3
 80032c4:	f7ff fbe8 	bl	8002a98 <__aeabi_d2f>
 80032c8:	1c02      	adds	r2, r0, #0
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	619a      	str	r2, [r3, #24]
         FADC_p->Vrms2 = sqrt(Vrmssqr2);
 80032ce:	693a      	ldr	r2, [r7, #16]
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	0010      	movs	r0, r2
 80032d4:	0019      	movs	r1, r3
 80032d6:	f004 f93e 	bl	8007556 <sqrt>
 80032da:	0002      	movs	r2, r0
 80032dc:	000b      	movs	r3, r1
 80032de:	0010      	movs	r0, r2
 80032e0:	0019      	movs	r1, r3
 80032e2:	f7ff fbd9 	bl	8002a98 <__aeabi_d2f>
 80032e6:	1c02      	adds	r2, r0, #0
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	61da      	str	r2, [r3, #28]
         FADC_p->Vrms3 = sqrt(Vrmssqr3);
 80032ec:	68ba      	ldr	r2, [r7, #8]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	0010      	movs	r0, r2
 80032f2:	0019      	movs	r1, r3
 80032f4:	f004 f92f 	bl	8007556 <sqrt>
 80032f8:	0002      	movs	r2, r0
 80032fa:	000b      	movs	r3, r1
 80032fc:	0010      	movs	r0, r2
 80032fe:	0019      	movs	r1, r3
 8003300:	f7ff fbca 	bl	8002a98 <__aeabi_d2f>
 8003304:	1c02      	adds	r2, r0, #0
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	621a      	str	r2, [r3, #32]

         FADC_p->Vraw1 = FADC_p->Vrms1;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	699a      	ldr	r2, [r3, #24]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	601a      	str	r2, [r3, #0]
         FADC_p->Vraw2 = FADC_p->Vrms2;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	69da      	ldr	r2, [r3, #28]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	605a      	str	r2, [r3, #4]
         FADC_p->Vraw3 = FADC_p->Vrms3;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a1a      	ldr	r2, [r3, #32]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	609a      	str	r2, [r3, #8]


         FADC_p->Vrms1 *= ((0.3543)*(FADC_p->Vref/3.3));
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	699b      	ldr	r3, [r3, #24]
 8003326:	1c18      	adds	r0, r3, #0
 8003328:	f7ff fb6e 	bl	8002a08 <__aeabi_f2d>
 800332c:	0004      	movs	r4, r0
 800332e:	000d      	movs	r5, r1
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	1c18      	adds	r0, r3, #0
 8003336:	f7ff fb67 	bl	8002a08 <__aeabi_f2d>
 800333a:	4a3b      	ldr	r2, [pc, #236]	; (8003428 <FADC_Get_VRMS+0x388>)
 800333c:	4b3b      	ldr	r3, [pc, #236]	; (800342c <FADC_Get_VRMS+0x38c>)
 800333e:	f7fe f8d7 	bl	80014f0 <__aeabi_ddiv>
 8003342:	0002      	movs	r2, r0
 8003344:	000b      	movs	r3, r1
 8003346:	0010      	movs	r0, r2
 8003348:	0019      	movs	r1, r3
 800334a:	4a39      	ldr	r2, [pc, #228]	; (8003430 <FADC_Get_VRMS+0x390>)
 800334c:	4b39      	ldr	r3, [pc, #228]	; (8003434 <FADC_Get_VRMS+0x394>)
 800334e:	f7fe fcc9 	bl	8001ce4 <__aeabi_dmul>
 8003352:	0002      	movs	r2, r0
 8003354:	000b      	movs	r3, r1
 8003356:	0020      	movs	r0, r4
 8003358:	0029      	movs	r1, r5
 800335a:	f7fe fcc3 	bl	8001ce4 <__aeabi_dmul>
 800335e:	0002      	movs	r2, r0
 8003360:	000b      	movs	r3, r1
 8003362:	0010      	movs	r0, r2
 8003364:	0019      	movs	r1, r3
 8003366:	f7ff fb97 	bl	8002a98 <__aeabi_d2f>
 800336a:	1c02      	adds	r2, r0, #0
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	619a      	str	r2, [r3, #24]
         FADC_p->Vrms2 *= ((0.4966)*(FADC_p->Vref/3.3));
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	69db      	ldr	r3, [r3, #28]
 8003374:	1c18      	adds	r0, r3, #0
 8003376:	f7ff fb47 	bl	8002a08 <__aeabi_f2d>
 800337a:	0004      	movs	r4, r0
 800337c:	000d      	movs	r5, r1
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	1c18      	adds	r0, r3, #0
 8003384:	f7ff fb40 	bl	8002a08 <__aeabi_f2d>
 8003388:	4a27      	ldr	r2, [pc, #156]	; (8003428 <FADC_Get_VRMS+0x388>)
 800338a:	4b28      	ldr	r3, [pc, #160]	; (800342c <FADC_Get_VRMS+0x38c>)
 800338c:	f7fe f8b0 	bl	80014f0 <__aeabi_ddiv>
 8003390:	0002      	movs	r2, r0
 8003392:	000b      	movs	r3, r1
 8003394:	0010      	movs	r0, r2
 8003396:	0019      	movs	r1, r3
 8003398:	4a27      	ldr	r2, [pc, #156]	; (8003438 <FADC_Get_VRMS+0x398>)
 800339a:	4b28      	ldr	r3, [pc, #160]	; (800343c <FADC_Get_VRMS+0x39c>)
 800339c:	f7fe fca2 	bl	8001ce4 <__aeabi_dmul>
 80033a0:	0002      	movs	r2, r0
 80033a2:	000b      	movs	r3, r1
 80033a4:	0020      	movs	r0, r4
 80033a6:	0029      	movs	r1, r5
 80033a8:	f7fe fc9c 	bl	8001ce4 <__aeabi_dmul>
 80033ac:	0002      	movs	r2, r0
 80033ae:	000b      	movs	r3, r1
 80033b0:	0010      	movs	r0, r2
 80033b2:	0019      	movs	r1, r3
 80033b4:	f7ff fb70 	bl	8002a98 <__aeabi_d2f>
 80033b8:	1c02      	adds	r2, r0, #0
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	61da      	str	r2, [r3, #28]
         FADC_p->Vrms3 *= ((0.4966)*(FADC_p->Vref/3.3));
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a1b      	ldr	r3, [r3, #32]
 80033c2:	1c18      	adds	r0, r3, #0
 80033c4:	f7ff fb20 	bl	8002a08 <__aeabi_f2d>
 80033c8:	0004      	movs	r4, r0
 80033ca:	000d      	movs	r5, r1
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	1c18      	adds	r0, r3, #0
 80033d2:	f7ff fb19 	bl	8002a08 <__aeabi_f2d>
 80033d6:	4a14      	ldr	r2, [pc, #80]	; (8003428 <FADC_Get_VRMS+0x388>)
 80033d8:	4b14      	ldr	r3, [pc, #80]	; (800342c <FADC_Get_VRMS+0x38c>)
 80033da:	f7fe f889 	bl	80014f0 <__aeabi_ddiv>
 80033de:	0002      	movs	r2, r0
 80033e0:	000b      	movs	r3, r1
 80033e2:	0010      	movs	r0, r2
 80033e4:	0019      	movs	r1, r3
 80033e6:	4a14      	ldr	r2, [pc, #80]	; (8003438 <FADC_Get_VRMS+0x398>)
 80033e8:	4b14      	ldr	r3, [pc, #80]	; (800343c <FADC_Get_VRMS+0x39c>)
 80033ea:	f7fe fc7b 	bl	8001ce4 <__aeabi_dmul>
 80033ee:	0002      	movs	r2, r0
 80033f0:	000b      	movs	r3, r1
 80033f2:	0020      	movs	r0, r4
 80033f4:	0029      	movs	r1, r5
 80033f6:	f7fe fc75 	bl	8001ce4 <__aeabi_dmul>
 80033fa:	0002      	movs	r2, r0
 80033fc:	000b      	movs	r3, r1
 80033fe:	0010      	movs	r0, r2
 8003400:	0019      	movs	r1, r3
 8003402:	f7ff fb49 	bl	8002a98 <__aeabi_d2f>
 8003406:	1c02      	adds	r2, r0, #0
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	621a      	str	r2, [r3, #32]
         FADC_p->StatusDMA=ADC_DMA_Ready;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2224      	movs	r2, #36	; 0x24
 8003410:	2101      	movs	r1, #1
 8003412:	5499      	strb	r1, [r3, r2]

         //check condition

    }
    return Fun_Ok;
 8003414:	2300      	movs	r3, #0
}
 8003416:	0018      	movs	r0, r3
 8003418:	46bd      	mov	sp, r7
 800341a:	b00a      	add	sp, #40	; 0x28
 800341c:	bdb0      	pop	{r4, r5, r7, pc}
 800341e:	46c0      	nop			; (mov r8, r8)
 8003420:	20000200 	.word	0x20000200
 8003424:	44fff000 	.word	0x44fff000
 8003428:	66666666 	.word	0x66666666
 800342c:	400a6666 	.word	0x400a6666
 8003430:	e83e425b 	.word	0xe83e425b
 8003434:	3fd6acd9 	.word	0x3fd6acd9
 8003438:	5dcc63f1 	.word	0x5dcc63f1
 800343c:	3fdfc84b 	.word	0x3fdfc84b

08003440 <HAL_ADC_ConvCpltCallback>:
        }
    }

}
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  if(hadc->Instance == ADC1)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a0a      	ldr	r2, [pc, #40]	; (8003478 <HAL_ADC_ConvCpltCallback+0x38>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d10e      	bne.n	8003470 <HAL_ADC_ConvCpltCallback+0x30>
  {
	  ADCVar.StatusDMA = ADC_DMA_Completed;
 8003452:	4b0a      	ldr	r3, [pc, #40]	; (800347c <HAL_ADC_ConvCpltCallback+0x3c>)
 8003454:	2224      	movs	r2, #36	; 0x24
 8003456:	2103      	movs	r1, #3
 8003458:	5499      	strb	r1, [r3, r2]
    // This function will be called when ADC conversion is complete
    // You can process the ADC data here
      Diff_Time=HAL_GetTick()-Start_Time;
 800345a:	f000 fcab 	bl	8003db4 <HAL_GetTick>
 800345e:	0003      	movs	r3, r0
 8003460:	b29a      	uxth	r2, r3
 8003462:	4b07      	ldr	r3, [pc, #28]	; (8003480 <HAL_ADC_ConvCpltCallback+0x40>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	b29b      	uxth	r3, r3
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	b29a      	uxth	r2, r3
 800346c:	4b05      	ldr	r3, [pc, #20]	; (8003484 <HAL_ADC_ConvCpltCallback+0x44>)
 800346e:	801a      	strh	r2, [r3, #0]

  }
}
 8003470:	46c0      	nop			; (mov r8, r8)
 8003472:	46bd      	mov	sp, r7
 8003474:	b002      	add	sp, #8
 8003476:	bd80      	pop	{r7, pc}
 8003478:	40012400 	.word	0x40012400
 800347c:	20000208 	.word	0x20000208
 8003480:	20000200 	.word	0x20000200
 8003484:	20000204 	.word	0x20000204

08003488 <HAL_ADC_ErrorCallback>:
void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
	  if(hadc->Instance == ADC1)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a0a      	ldr	r2, [pc, #40]	; (80034c0 <HAL_ADC_ErrorCallback+0x38>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d10e      	bne.n	80034b8 <HAL_ADC_ErrorCallback+0x30>
	  {
		  ADCVar.StatusDMA = ADC_DMA_ERROR;
 800349a:	4b0a      	ldr	r3, [pc, #40]	; (80034c4 <HAL_ADC_ErrorCallback+0x3c>)
 800349c:	2224      	movs	r2, #36	; 0x24
 800349e:	2104      	movs	r1, #4
 80034a0:	5499      	strb	r1, [r3, r2]
		  Diff_Time=HAL_GetTick()-Start_Time;
 80034a2:	f000 fc87 	bl	8003db4 <HAL_GetTick>
 80034a6:	0003      	movs	r3, r0
 80034a8:	b29a      	uxth	r2, r3
 80034aa:	4b07      	ldr	r3, [pc, #28]	; (80034c8 <HAL_ADC_ErrorCallback+0x40>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	b29a      	uxth	r2, r3
 80034b4:	4b05      	ldr	r3, [pc, #20]	; (80034cc <HAL_ADC_ErrorCallback+0x44>)
 80034b6:	801a      	strh	r2, [r3, #0]
	  }
}
 80034b8:	46c0      	nop			; (mov r8, r8)
 80034ba:	46bd      	mov	sp, r7
 80034bc:	b002      	add	sp, #8
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	40012400 	.word	0x40012400
 80034c4:	20000208 	.word	0x20000208
 80034c8:	20000200 	.word	0x20000200
 80034cc:	20000204 	.word	0x20000204

080034d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80034d0:	b5b0      	push	{r4, r5, r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80034d6:	f000 fbf1 	bl	8003cbc <HAL_Init>
//uint8_t Sample = 0;
//float SampleVolatge = 0;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80034da:	f000 f8b1 	bl	8003640 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80034de:	f000 fa0f 	bl	8003900 <MX_GPIO_Init>
  MX_DMA_Init();
 80034e2:	f000 f9ef 	bl	80038c4 <MX_DMA_Init>
  MX_TIM1_Init();
 80034e6:	f000 f991 	bl	800380c <MX_TIM1_Init>
  MX_ADC1_Init();
 80034ea:	f000 f903 	bl	80036f4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  LCD_Init();
 80034ee:	f7ff fc9f 	bl	8002e30 <LCD_Init>
  LCD_Clear();
 80034f2:	f7ff fcba 	bl	8002e6a <LCD_Clear>
  LCD_SetCursor(0, 0);
 80034f6:	2100      	movs	r1, #0
 80034f8:	2000      	movs	r0, #0
 80034fa:	f7ff fcc1 	bl	8002e80 <LCD_SetCursor>
  LCD_Print("  LOL....");
 80034fe:	4b45      	ldr	r3, [pc, #276]	; (8003614 <main+0x144>)
 8003500:	0018      	movs	r0, r3
 8003502:	f7ff fce8 	bl	8002ed6 <LCD_Print>
  HAL_Delay(1000);
 8003506:	23fa      	movs	r3, #250	; 0xfa
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	0018      	movs	r0, r3
 800350c:	f000 fc5c 	bl	8003dc8 <HAL_Delay>
  HAL_ADCEx_Calibration_Start(&hadc1);
 8003510:	4b41      	ldr	r3, [pc, #260]	; (8003618 <main+0x148>)
 8003512:	0018      	movs	r0, r3
 8003514:	f001 fd5a 	bl	8004fcc <HAL_ADCEx_Calibration_Start>
  HAL_Delay(10);
 8003518:	200a      	movs	r0, #10
 800351a:	f000 fc55 	bl	8003dc8 <HAL_Delay>
  ADCVar.StatusDMA = ADC_DMA_Ready;
 800351e:	4b3f      	ldr	r3, [pc, #252]	; (800361c <main+0x14c>)
 8003520:	2224      	movs	r2, #36	; 0x24
 8003522:	2101      	movs	r1, #1
 8003524:	5499      	strb	r1, [r3, r2]
  ADCVar.HADC =&hadc1;
 8003526:	4b3d      	ldr	r3, [pc, #244]	; (800361c <main+0x14c>)
 8003528:	4a3b      	ldr	r2, [pc, #236]	; (8003618 <main+0x148>)
 800352a:	629a      	str	r2, [r3, #40]	; 0x28
  //Set the Limit values
  AbnormaVar.NrmVolt = normalVoltagevalue;
 800352c:	4b3c      	ldr	r3, [pc, #240]	; (8003620 <main+0x150>)
 800352e:	22a2      	movs	r2, #162	; 0xa2
 8003530:	809a      	strh	r2, [r3, #4]
  AbnormaVar.OvVolt = OverVoltagetripvalue;
 8003532:	4b3b      	ldr	r3, [pc, #236]	; (8003620 <main+0x150>)
 8003534:	2204      	movs	r2, #4
 8003536:	32ff      	adds	r2, #255	; 0xff
 8003538:	80da      	strh	r2, [r3, #6]
  AbnormaVar.UnVlt = UnderVoltagetripvalue;
 800353a:	4b39      	ldr	r3, [pc, #228]	; (8003620 <main+0x150>)
 800353c:	22a5      	movs	r2, #165	; 0xa5
 800353e:	811a      	strh	r2, [r3, #8]
  AbnormaVar.ctmxLt = OverCurrenttripvalue;
 8003540:	4b37      	ldr	r3, [pc, #220]	; (8003620 <main+0x150>)
 8003542:	220f      	movs	r2, #15
 8003544:	705a      	strb	r2, [r3, #1]
  AbnormaVar.diffV = normalDiffvalue;
 8003546:	4b36      	ldr	r3, [pc, #216]	; (8003620 <main+0x150>)
 8003548:	2201      	movs	r2, #1
 800354a:	701a      	strb	r2, [r3, #0]
  AbnormaVar.OutPutStatus = DeviceInit;
 800354c:	4b34      	ldr	r3, [pc, #208]	; (8003620 <main+0x150>)
 800354e:	2200      	movs	r2, #0
 8003550:	709a      	strb	r2, [r3, #2]



  GetVref(&ADCVar);
 8003552:	4b32      	ldr	r3, [pc, #200]	; (800361c <main+0x14c>)
 8003554:	0018      	movs	r0, r3
 8003556:	f7ff fd3b 	bl	8002fd0 <GetVref>
//	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
//	  HAL_GPIO_WritePin(M_RV_GPIO_Port, M_RV_Pin, GPIO_PIN_RESET);
//	  HAL_GPIO_WritePin(M_FW_GPIO_Port, M_FW_Pin, GPIO_PIN_SET);
	  //HAL_GPIO_TogglePin(Relay_GPIO_Port, Relay_Pin);

	  uint32_t timeout = HAL_GetTick();
 800355a:	f000 fc2b 	bl	8003db4 <HAL_GetTick>
 800355e:	0003      	movs	r3, r0
 8003560:	607b      	str	r3, [r7, #4]
	  while((HAL_GetTick()-timeout)<1000)
 8003562:	e003      	b.n	800356c <main+0x9c>
	  {
//		  GetVref(&ADCVar);
		  FADC_Get_VRMS(&ADCVar);
 8003564:	4b2d      	ldr	r3, [pc, #180]	; (800361c <main+0x14c>)
 8003566:	0018      	movs	r0, r3
 8003568:	f7ff fd9a 	bl	80030a0 <FADC_Get_VRMS>
	  while((HAL_GetTick()-timeout)<1000)
 800356c:	f000 fc22 	bl	8003db4 <HAL_GetTick>
 8003570:	0002      	movs	r2, r0
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	1ad2      	subs	r2, r2, r3
 8003576:	23fa      	movs	r3, #250	; 0xfa
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	429a      	cmp	r2, r3
 800357c:	d3f2      	bcc.n	8003564 <main+0x94>





	  LCD_Clear();
 800357e:	f7ff fc74 	bl	8002e6a <LCD_Clear>
	  LCD_SetCursor(0, 0);
 8003582:	2100      	movs	r1, #0
 8003584:	2000      	movs	r0, #0
 8003586:	f7ff fc7b 	bl	8002e80 <LCD_SetCursor>
	  sprintf(text,"Voltage %d,%d",Diff_Time,(uint16_t)(ADCVar.Vraw1*100));
 800358a:	4b26      	ldr	r3, [pc, #152]	; (8003624 <main+0x154>)
 800358c:	881b      	ldrh	r3, [r3, #0]
 800358e:	001c      	movs	r4, r3
 8003590:	4b22      	ldr	r3, [pc, #136]	; (800361c <main+0x14c>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4924      	ldr	r1, [pc, #144]	; (8003628 <main+0x158>)
 8003596:	1c18      	adds	r0, r3, #0
 8003598:	f7fd f8a2 	bl	80006e0 <__aeabi_fmul>
 800359c:	1c03      	adds	r3, r0, #0
 800359e:	1c18      	adds	r0, r3, #0
 80035a0:	f7fc febc 	bl	800031c <__aeabi_f2uiz>
 80035a4:	0003      	movs	r3, r0
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	4920      	ldr	r1, [pc, #128]	; (800362c <main+0x15c>)
 80035aa:	4821      	ldr	r0, [pc, #132]	; (8003630 <main+0x160>)
 80035ac:	0022      	movs	r2, r4
 80035ae:	f003 fb2d 	bl	8006c0c <siprintf>
	  LCD_Print(text);
 80035b2:	4b1f      	ldr	r3, [pc, #124]	; (8003630 <main+0x160>)
 80035b4:	0018      	movs	r0, r3
 80035b6:	f7ff fc8e 	bl	8002ed6 <LCD_Print>
	  LCD_SetCursor(1, 0);
 80035ba:	2100      	movs	r1, #0
 80035bc:	2001      	movs	r0, #1
 80035be:	f7ff fc5f 	bl	8002e80 <LCD_SetCursor>
	  sprintf(text,"%d,%d,%d",(uint16_t)(ADCVar.Vrms1),Id,(uint16_t)(ADCVar.Vref*10));
 80035c2:	4b16      	ldr	r3, [pc, #88]	; (800361c <main+0x14c>)
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	1c18      	adds	r0, r3, #0
 80035c8:	f7fc fea8 	bl	800031c <__aeabi_f2uiz>
 80035cc:	0003      	movs	r3, r0
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	001c      	movs	r4, r3
 80035d2:	4b18      	ldr	r3, [pc, #96]	; (8003634 <main+0x164>)
 80035d4:	881b      	ldrh	r3, [r3, #0]
 80035d6:	001d      	movs	r5, r3
 80035d8:	4b10      	ldr	r3, [pc, #64]	; (800361c <main+0x14c>)
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	4916      	ldr	r1, [pc, #88]	; (8003638 <main+0x168>)
 80035de:	1c18      	adds	r0, r3, #0
 80035e0:	f7fd f87e 	bl	80006e0 <__aeabi_fmul>
 80035e4:	1c03      	adds	r3, r0, #0
 80035e6:	1c18      	adds	r0, r3, #0
 80035e8:	f7fc fe98 	bl	800031c <__aeabi_f2uiz>
 80035ec:	0003      	movs	r3, r0
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	4912      	ldr	r1, [pc, #72]	; (800363c <main+0x16c>)
 80035f2:	480f      	ldr	r0, [pc, #60]	; (8003630 <main+0x160>)
 80035f4:	9300      	str	r3, [sp, #0]
 80035f6:	002b      	movs	r3, r5
 80035f8:	0022      	movs	r2, r4
 80035fa:	f003 fb07 	bl	8006c0c <siprintf>
	  LCD_Print(text);
 80035fe:	4b0c      	ldr	r3, [pc, #48]	; (8003630 <main+0x160>)
 8003600:	0018      	movs	r0, r3
 8003602:	f7ff fc68 	bl	8002ed6 <LCD_Print>
	  HAL_Delay(500);
 8003606:	23fa      	movs	r3, #250	; 0xfa
 8003608:	005b      	lsls	r3, r3, #1
 800360a:	0018      	movs	r0, r3
 800360c:	f000 fbdc 	bl	8003dc8 <HAL_Delay>
  {
 8003610:	e7a3      	b.n	800355a <main+0x8a>
 8003612:	46c0      	nop			; (mov r8, r8)
 8003614:	08007794 	.word	0x08007794
 8003618:	2000008c 	.word	0x2000008c
 800361c:	20000208 	.word	0x20000208
 8003620:	200005f4 	.word	0x200005f4
 8003624:	20000204 	.word	0x20000204
 8003628:	42c80000 	.word	0x42c80000
 800362c:	080077a0 	.word	0x080077a0
 8003630:	20000198 	.word	0x20000198
 8003634:	200001fc 	.word	0x200001fc
 8003638:	41200000 	.word	0x41200000
 800363c:	080077b0 	.word	0x080077b0

08003640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003640:	b590      	push	{r4, r7, lr}
 8003642:	b093      	sub	sp, #76	; 0x4c
 8003644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003646:	2414      	movs	r4, #20
 8003648:	193b      	adds	r3, r7, r4
 800364a:	0018      	movs	r0, r3
 800364c:	2334      	movs	r3, #52	; 0x34
 800364e:	001a      	movs	r2, r3
 8003650:	2100      	movs	r1, #0
 8003652:	f003 fafb 	bl	8006c4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003656:	1d3b      	adds	r3, r7, #4
 8003658:	0018      	movs	r0, r3
 800365a:	2310      	movs	r3, #16
 800365c:	001a      	movs	r2, r3
 800365e:	2100      	movs	r1, #0
 8003660:	f003 faf4 	bl	8006c4c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003664:	2380      	movs	r3, #128	; 0x80
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	0018      	movs	r0, r3
 800366a:	f002 fa37 	bl	8005adc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800366e:	193b      	adds	r3, r7, r4
 8003670:	2202      	movs	r2, #2
 8003672:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003674:	193b      	adds	r3, r7, r4
 8003676:	2280      	movs	r2, #128	; 0x80
 8003678:	0052      	lsls	r2, r2, #1
 800367a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800367c:	0021      	movs	r1, r4
 800367e:	187b      	adds	r3, r7, r1
 8003680:	2200      	movs	r2, #0
 8003682:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003684:	187b      	adds	r3, r7, r1
 8003686:	2240      	movs	r2, #64	; 0x40
 8003688:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800368a:	187b      	adds	r3, r7, r1
 800368c:	2202      	movs	r2, #2
 800368e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003690:	187b      	adds	r3, r7, r1
 8003692:	2202      	movs	r2, #2
 8003694:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8003696:	187b      	adds	r3, r7, r1
 8003698:	2200      	movs	r2, #0
 800369a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 800369c:	187b      	adds	r3, r7, r1
 800369e:	2208      	movs	r2, #8
 80036a0:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80036a2:	187b      	adds	r3, r7, r1
 80036a4:	2280      	movs	r2, #128	; 0x80
 80036a6:	0292      	lsls	r2, r2, #10
 80036a8:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80036aa:	187b      	adds	r3, r7, r1
 80036ac:	2280      	movs	r2, #128	; 0x80
 80036ae:	0592      	lsls	r2, r2, #22
 80036b0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80036b2:	187b      	adds	r3, r7, r1
 80036b4:	0018      	movs	r0, r3
 80036b6:	f002 fa51 	bl	8005b5c <HAL_RCC_OscConfig>
 80036ba:	1e03      	subs	r3, r0, #0
 80036bc:	d001      	beq.n	80036c2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80036be:	f000 f99f 	bl	8003a00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80036c2:	1d3b      	adds	r3, r7, #4
 80036c4:	2207      	movs	r2, #7
 80036c6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80036c8:	1d3b      	adds	r3, r7, #4
 80036ca:	2202      	movs	r2, #2
 80036cc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80036ce:	1d3b      	adds	r3, r7, #4
 80036d0:	2200      	movs	r2, #0
 80036d2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80036d4:	1d3b      	adds	r3, r7, #4
 80036d6:	2200      	movs	r2, #0
 80036d8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80036da:	1d3b      	adds	r3, r7, #4
 80036dc:	2102      	movs	r1, #2
 80036de:	0018      	movs	r0, r3
 80036e0:	f002 fd4c 	bl	800617c <HAL_RCC_ClockConfig>
 80036e4:	1e03      	subs	r3, r0, #0
 80036e6:	d001      	beq.n	80036ec <SystemClock_Config+0xac>
  {
    Error_Handler();
 80036e8:	f000 f98a 	bl	8003a00 <Error_Handler>
  }
}
 80036ec:	46c0      	nop			; (mov r8, r8)
 80036ee:	46bd      	mov	sp, r7
 80036f0:	b013      	add	sp, #76	; 0x4c
 80036f2:	bd90      	pop	{r4, r7, pc}

080036f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80036fa:	1d3b      	adds	r3, r7, #4
 80036fc:	0018      	movs	r0, r3
 80036fe:	230c      	movs	r3, #12
 8003700:	001a      	movs	r2, r3
 8003702:	2100      	movs	r1, #0
 8003704:	f003 faa2 	bl	8006c4c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003708:	4b3c      	ldr	r3, [pc, #240]	; (80037fc <MX_ADC1_Init+0x108>)
 800370a:	4a3d      	ldr	r2, [pc, #244]	; (8003800 <MX_ADC1_Init+0x10c>)
 800370c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV16;
 800370e:	4b3b      	ldr	r3, [pc, #236]	; (80037fc <MX_ADC1_Init+0x108>)
 8003710:	22e0      	movs	r2, #224	; 0xe0
 8003712:	0352      	lsls	r2, r2, #13
 8003714:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003716:	4b39      	ldr	r3, [pc, #228]	; (80037fc <MX_ADC1_Init+0x108>)
 8003718:	2200      	movs	r2, #0
 800371a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800371c:	4b37      	ldr	r3, [pc, #220]	; (80037fc <MX_ADC1_Init+0x108>)
 800371e:	2200      	movs	r2, #0
 8003720:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003722:	4b36      	ldr	r3, [pc, #216]	; (80037fc <MX_ADC1_Init+0x108>)
 8003724:	2280      	movs	r2, #128	; 0x80
 8003726:	0392      	lsls	r2, r2, #14
 8003728:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800372a:	4b34      	ldr	r3, [pc, #208]	; (80037fc <MX_ADC1_Init+0x108>)
 800372c:	2204      	movs	r2, #4
 800372e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003730:	4b32      	ldr	r3, [pc, #200]	; (80037fc <MX_ADC1_Init+0x108>)
 8003732:	2200      	movs	r2, #0
 8003734:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = ENABLE;
 8003736:	4b31      	ldr	r3, [pc, #196]	; (80037fc <MX_ADC1_Init+0x108>)
 8003738:	2201      	movs	r2, #1
 800373a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800373c:	4b2f      	ldr	r3, [pc, #188]	; (80037fc <MX_ADC1_Init+0x108>)
 800373e:	2201      	movs	r2, #1
 8003740:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 3;
 8003742:	4b2e      	ldr	r3, [pc, #184]	; (80037fc <MX_ADC1_Init+0x108>)
 8003744:	2203      	movs	r2, #3
 8003746:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003748:	4b2c      	ldr	r3, [pc, #176]	; (80037fc <MX_ADC1_Init+0x108>)
 800374a:	2200      	movs	r2, #0
 800374c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800374e:	4b2b      	ldr	r3, [pc, #172]	; (80037fc <MX_ADC1_Init+0x108>)
 8003750:	2200      	movs	r2, #0
 8003752:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003754:	4b29      	ldr	r3, [pc, #164]	; (80037fc <MX_ADC1_Init+0x108>)
 8003756:	222c      	movs	r2, #44	; 0x2c
 8003758:	2100      	movs	r1, #0
 800375a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800375c:	4b27      	ldr	r3, [pc, #156]	; (80037fc <MX_ADC1_Init+0x108>)
 800375e:	2200      	movs	r2, #0
 8003760:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8003762:	4b26      	ldr	r3, [pc, #152]	; (80037fc <MX_ADC1_Init+0x108>)
 8003764:	2207      	movs	r2, #7
 8003766:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8003768:	4b24      	ldr	r3, [pc, #144]	; (80037fc <MX_ADC1_Init+0x108>)
 800376a:	2200      	movs	r2, #0
 800376c:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800376e:	4b23      	ldr	r3, [pc, #140]	; (80037fc <MX_ADC1_Init+0x108>)
 8003770:	223c      	movs	r2, #60	; 0x3c
 8003772:	2100      	movs	r1, #0
 8003774:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8003776:	4b21      	ldr	r3, [pc, #132]	; (80037fc <MX_ADC1_Init+0x108>)
 8003778:	2200      	movs	r2, #0
 800377a:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800377c:	4b1f      	ldr	r3, [pc, #124]	; (80037fc <MX_ADC1_Init+0x108>)
 800377e:	0018      	movs	r0, r3
 8003780:	f000 fcb0 	bl	80040e4 <HAL_ADC_Init>
 8003784:	1e03      	subs	r3, r0, #0
 8003786:	d001      	beq.n	800378c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8003788:	f000 f93a 	bl	8003a00 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800378c:	1d3b      	adds	r3, r7, #4
 800378e:	2201      	movs	r2, #1
 8003790:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003792:	1d3b      	adds	r3, r7, #4
 8003794:	2200      	movs	r2, #0
 8003796:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8003798:	1d3b      	adds	r3, r7, #4
 800379a:	2200      	movs	r2, #0
 800379c:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800379e:	1d3a      	adds	r2, r7, #4
 80037a0:	4b16      	ldr	r3, [pc, #88]	; (80037fc <MX_ADC1_Init+0x108>)
 80037a2:	0011      	movs	r1, r2
 80037a4:	0018      	movs	r0, r3
 80037a6:	f001 f805 	bl	80047b4 <HAL_ADC_ConfigChannel>
 80037aa:	1e03      	subs	r3, r0, #0
 80037ac:	d001      	beq.n	80037b2 <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 80037ae:	f000 f927 	bl	8003a00 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80037b2:	1d3b      	adds	r3, r7, #4
 80037b4:	4a13      	ldr	r2, [pc, #76]	; (8003804 <MX_ADC1_Init+0x110>)
 80037b6:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80037b8:	1d3b      	adds	r3, r7, #4
 80037ba:	2204      	movs	r2, #4
 80037bc:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80037be:	1d3a      	adds	r2, r7, #4
 80037c0:	4b0e      	ldr	r3, [pc, #56]	; (80037fc <MX_ADC1_Init+0x108>)
 80037c2:	0011      	movs	r1, r2
 80037c4:	0018      	movs	r0, r3
 80037c6:	f000 fff5 	bl	80047b4 <HAL_ADC_ConfigChannel>
 80037ca:	1e03      	subs	r3, r0, #0
 80037cc:	d001      	beq.n	80037d2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80037ce:	f000 f917 	bl	8003a00 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80037d2:	1d3b      	adds	r3, r7, #4
 80037d4:	4a0c      	ldr	r2, [pc, #48]	; (8003808 <MX_ADC1_Init+0x114>)
 80037d6:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80037d8:	1d3b      	adds	r3, r7, #4
 80037da:	2208      	movs	r2, #8
 80037dc:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80037de:	1d3a      	adds	r2, r7, #4
 80037e0:	4b06      	ldr	r3, [pc, #24]	; (80037fc <MX_ADC1_Init+0x108>)
 80037e2:	0011      	movs	r1, r2
 80037e4:	0018      	movs	r0, r3
 80037e6:	f000 ffe5 	bl	80047b4 <HAL_ADC_ConfigChannel>
 80037ea:	1e03      	subs	r3, r0, #0
 80037ec:	d001      	beq.n	80037f2 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 80037ee:	f000 f907 	bl	8003a00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80037f2:	46c0      	nop			; (mov r8, r8)
 80037f4:	46bd      	mov	sp, r7
 80037f6:	b004      	add	sp, #16
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	46c0      	nop			; (mov r8, r8)
 80037fc:	2000008c 	.word	0x2000008c
 8003800:	40012400 	.word	0x40012400
 8003804:	04000002 	.word	0x04000002
 8003808:	08000004 	.word	0x08000004

0800380c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b088      	sub	sp, #32
 8003810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003812:	2310      	movs	r3, #16
 8003814:	18fb      	adds	r3, r7, r3
 8003816:	0018      	movs	r0, r3
 8003818:	2310      	movs	r3, #16
 800381a:	001a      	movs	r2, r3
 800381c:	2100      	movs	r1, #0
 800381e:	f003 fa15 	bl	8006c4c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003822:	1d3b      	adds	r3, r7, #4
 8003824:	0018      	movs	r0, r3
 8003826:	230c      	movs	r3, #12
 8003828:	001a      	movs	r2, r3
 800382a:	2100      	movs	r1, #0
 800382c:	f003 fa0e 	bl	8006c4c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003830:	4b21      	ldr	r3, [pc, #132]	; (80038b8 <MX_TIM1_Init+0xac>)
 8003832:	4a22      	ldr	r2, [pc, #136]	; (80038bc <MX_TIM1_Init+0xb0>)
 8003834:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64-1;
 8003836:	4b20      	ldr	r3, [pc, #128]	; (80038b8 <MX_TIM1_Init+0xac>)
 8003838:	223f      	movs	r2, #63	; 0x3f
 800383a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800383c:	4b1e      	ldr	r3, [pc, #120]	; (80038b8 <MX_TIM1_Init+0xac>)
 800383e:	2200      	movs	r2, #0
 8003840:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003842:	4b1d      	ldr	r3, [pc, #116]	; (80038b8 <MX_TIM1_Init+0xac>)
 8003844:	4a1e      	ldr	r2, [pc, #120]	; (80038c0 <MX_TIM1_Init+0xb4>)
 8003846:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003848:	4b1b      	ldr	r3, [pc, #108]	; (80038b8 <MX_TIM1_Init+0xac>)
 800384a:	2200      	movs	r2, #0
 800384c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800384e:	4b1a      	ldr	r3, [pc, #104]	; (80038b8 <MX_TIM1_Init+0xac>)
 8003850:	2200      	movs	r2, #0
 8003852:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003854:	4b18      	ldr	r3, [pc, #96]	; (80038b8 <MX_TIM1_Init+0xac>)
 8003856:	2200      	movs	r2, #0
 8003858:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800385a:	4b17      	ldr	r3, [pc, #92]	; (80038b8 <MX_TIM1_Init+0xac>)
 800385c:	0018      	movs	r0, r3
 800385e:	f002 ff3d 	bl	80066dc <HAL_TIM_Base_Init>
 8003862:	1e03      	subs	r3, r0, #0
 8003864:	d001      	beq.n	800386a <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 8003866:	f000 f8cb 	bl	8003a00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800386a:	2110      	movs	r1, #16
 800386c:	187b      	adds	r3, r7, r1
 800386e:	2280      	movs	r2, #128	; 0x80
 8003870:	0152      	lsls	r2, r2, #5
 8003872:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003874:	187a      	adds	r2, r7, r1
 8003876:	4b10      	ldr	r3, [pc, #64]	; (80038b8 <MX_TIM1_Init+0xac>)
 8003878:	0011      	movs	r1, r2
 800387a:	0018      	movs	r0, r3
 800387c:	f002 ff86 	bl	800678c <HAL_TIM_ConfigClockSource>
 8003880:	1e03      	subs	r3, r0, #0
 8003882:	d001      	beq.n	8003888 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8003884:	f000 f8bc 	bl	8003a00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003888:	1d3b      	adds	r3, r7, #4
 800388a:	2200      	movs	r2, #0
 800388c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800388e:	1d3b      	adds	r3, r7, #4
 8003890:	2200      	movs	r2, #0
 8003892:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003894:	1d3b      	adds	r3, r7, #4
 8003896:	2200      	movs	r2, #0
 8003898:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800389a:	1d3a      	adds	r2, r7, #4
 800389c:	4b06      	ldr	r3, [pc, #24]	; (80038b8 <MX_TIM1_Init+0xac>)
 800389e:	0011      	movs	r1, r2
 80038a0:	0018      	movs	r0, r3
 80038a2:	f003 f951 	bl	8006b48 <HAL_TIMEx_MasterConfigSynchronization>
 80038a6:	1e03      	subs	r3, r0, #0
 80038a8:	d001      	beq.n	80038ae <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 80038aa:	f000 f8a9 	bl	8003a00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80038ae:	46c0      	nop			; (mov r8, r8)
 80038b0:	46bd      	mov	sp, r7
 80038b2:	b008      	add	sp, #32
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	46c0      	nop			; (mov r8, r8)
 80038b8:	2000014c 	.word	0x2000014c
 80038bc:	40012c00 	.word	0x40012c00
 80038c0:	0000ffff 	.word	0x0000ffff

080038c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80038ca:	4b0c      	ldr	r3, [pc, #48]	; (80038fc <MX_DMA_Init+0x38>)
 80038cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038ce:	4b0b      	ldr	r3, [pc, #44]	; (80038fc <MX_DMA_Init+0x38>)
 80038d0:	2101      	movs	r1, #1
 80038d2:	430a      	orrs	r2, r1
 80038d4:	639a      	str	r2, [r3, #56]	; 0x38
 80038d6:	4b09      	ldr	r3, [pc, #36]	; (80038fc <MX_DMA_Init+0x38>)
 80038d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038da:	2201      	movs	r2, #1
 80038dc:	4013      	ands	r3, r2
 80038de:	607b      	str	r3, [r7, #4]
 80038e0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80038e2:	2200      	movs	r2, #0
 80038e4:	2100      	movs	r1, #0
 80038e6:	2009      	movs	r0, #9
 80038e8:	f001 fcf2 	bl	80052d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80038ec:	2009      	movs	r0, #9
 80038ee:	f001 fd04 	bl	80052fa <HAL_NVIC_EnableIRQ>

}
 80038f2:	46c0      	nop			; (mov r8, r8)
 80038f4:	46bd      	mov	sp, r7
 80038f6:	b002      	add	sp, #8
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	46c0      	nop			; (mov r8, r8)
 80038fc:	40021000 	.word	0x40021000

08003900 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003900:	b590      	push	{r4, r7, lr}
 8003902:	b089      	sub	sp, #36	; 0x24
 8003904:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003906:	240c      	movs	r4, #12
 8003908:	193b      	adds	r3, r7, r4
 800390a:	0018      	movs	r0, r3
 800390c:	2314      	movs	r3, #20
 800390e:	001a      	movs	r2, r3
 8003910:	2100      	movs	r1, #0
 8003912:	f003 f99b 	bl	8006c4c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003916:	4b36      	ldr	r3, [pc, #216]	; (80039f0 <MX_GPIO_Init+0xf0>)
 8003918:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800391a:	4b35      	ldr	r3, [pc, #212]	; (80039f0 <MX_GPIO_Init+0xf0>)
 800391c:	2101      	movs	r1, #1
 800391e:	430a      	orrs	r2, r1
 8003920:	635a      	str	r2, [r3, #52]	; 0x34
 8003922:	4b33      	ldr	r3, [pc, #204]	; (80039f0 <MX_GPIO_Init+0xf0>)
 8003924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003926:	2201      	movs	r2, #1
 8003928:	4013      	ands	r3, r2
 800392a:	60bb      	str	r3, [r7, #8]
 800392c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800392e:	4b30      	ldr	r3, [pc, #192]	; (80039f0 <MX_GPIO_Init+0xf0>)
 8003930:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003932:	4b2f      	ldr	r3, [pc, #188]	; (80039f0 <MX_GPIO_Init+0xf0>)
 8003934:	2102      	movs	r1, #2
 8003936:	430a      	orrs	r2, r1
 8003938:	635a      	str	r2, [r3, #52]	; 0x34
 800393a:	4b2d      	ldr	r3, [pc, #180]	; (80039f0 <MX_GPIO_Init+0xf0>)
 800393c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800393e:	2202      	movs	r2, #2
 8003940:	4013      	ands	r3, r2
 8003942:	607b      	str	r3, [r7, #4]
 8003944:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003946:	4b2a      	ldr	r3, [pc, #168]	; (80039f0 <MX_GPIO_Init+0xf0>)
 8003948:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800394a:	4b29      	ldr	r3, [pc, #164]	; (80039f0 <MX_GPIO_Init+0xf0>)
 800394c:	2108      	movs	r1, #8
 800394e:	430a      	orrs	r2, r1
 8003950:	635a      	str	r2, [r3, #52]	; 0x34
 8003952:	4b27      	ldr	r3, [pc, #156]	; (80039f0 <MX_GPIO_Init+0xf0>)
 8003954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003956:	2208      	movs	r2, #8
 8003958:	4013      	ands	r3, r2
 800395a:	603b      	str	r3, [r7, #0]
 800395c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Relay_Pin|M_FW_Pin|M_RV_Pin|RW_Pin
 800395e:	4925      	ldr	r1, [pc, #148]	; (80039f4 <MX_GPIO_Init+0xf4>)
 8003960:	4b25      	ldr	r3, [pc, #148]	; (80039f8 <MX_GPIO_Init+0xf8>)
 8003962:	2200      	movs	r2, #0
 8003964:	0018      	movs	r0, r3
 8003966:	f002 f89b 	bl	8005aa0 <HAL_GPIO_WritePin>
                          |E_Pin|D4_Pin|D5_Pin|D6_Pin
                          |D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, GPIO_PIN_RESET);
 800396a:	4b24      	ldr	r3, [pc, #144]	; (80039fc <MX_GPIO_Init+0xfc>)
 800396c:	2200      	movs	r2, #0
 800396e:	2108      	movs	r1, #8
 8003970:	0018      	movs	r0, r3
 8003972:	f002 f895 	bl	8005aa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Relay_Pin M_FW_Pin M_RV_Pin */
  GPIO_InitStruct.Pin = Relay_Pin|M_FW_Pin|M_RV_Pin;
 8003976:	193b      	adds	r3, r7, r4
 8003978:	22e0      	movs	r2, #224	; 0xe0
 800397a:	0212      	lsls	r2, r2, #8
 800397c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800397e:	193b      	adds	r3, r7, r4
 8003980:	2201      	movs	r2, #1
 8003982:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003984:	193b      	adds	r3, r7, r4
 8003986:	2202      	movs	r2, #2
 8003988:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800398a:	193b      	adds	r3, r7, r4
 800398c:	2200      	movs	r2, #0
 800398e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003990:	193b      	adds	r3, r7, r4
 8003992:	4a19      	ldr	r2, [pc, #100]	; (80039f8 <MX_GPIO_Init+0xf8>)
 8003994:	0019      	movs	r1, r3
 8003996:	0010      	movs	r0, r2
 8003998:	f001 ff1e 	bl	80057d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RS_Pin */
  GPIO_InitStruct.Pin = RS_Pin;
 800399c:	193b      	adds	r3, r7, r4
 800399e:	2208      	movs	r2, #8
 80039a0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039a2:	193b      	adds	r3, r7, r4
 80039a4:	2201      	movs	r2, #1
 80039a6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039a8:	193b      	adds	r3, r7, r4
 80039aa:	2200      	movs	r2, #0
 80039ac:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039ae:	193b      	adds	r3, r7, r4
 80039b0:	2200      	movs	r2, #0
 80039b2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(RS_GPIO_Port, &GPIO_InitStruct);
 80039b4:	193b      	adds	r3, r7, r4
 80039b6:	4a11      	ldr	r2, [pc, #68]	; (80039fc <MX_GPIO_Init+0xfc>)
 80039b8:	0019      	movs	r1, r3
 80039ba:	0010      	movs	r0, r2
 80039bc:	f001 ff0c 	bl	80057d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RW_Pin E_Pin D4_Pin D5_Pin
                           D6_Pin D7_Pin */
  GPIO_InitStruct.Pin = RW_Pin|E_Pin|D4_Pin|D5_Pin
 80039c0:	0021      	movs	r1, r4
 80039c2:	187b      	adds	r3, r7, r1
 80039c4:	22fa      	movs	r2, #250	; 0xfa
 80039c6:	0092      	lsls	r2, r2, #2
 80039c8:	601a      	str	r2, [r3, #0]
                          |D6_Pin|D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039ca:	187b      	adds	r3, r7, r1
 80039cc:	2201      	movs	r2, #1
 80039ce:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039d0:	187b      	adds	r3, r7, r1
 80039d2:	2200      	movs	r2, #0
 80039d4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039d6:	187b      	adds	r3, r7, r1
 80039d8:	2200      	movs	r2, #0
 80039da:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039dc:	187b      	adds	r3, r7, r1
 80039de:	4a06      	ldr	r2, [pc, #24]	; (80039f8 <MX_GPIO_Init+0xf8>)
 80039e0:	0019      	movs	r1, r3
 80039e2:	0010      	movs	r0, r2
 80039e4:	f001 fef8 	bl	80057d8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80039e8:	46c0      	nop			; (mov r8, r8)
 80039ea:	46bd      	mov	sp, r7
 80039ec:	b009      	add	sp, #36	; 0x24
 80039ee:	bd90      	pop	{r4, r7, pc}
 80039f0:	40021000 	.word	0x40021000
 80039f4:	0000e3e8 	.word	0x0000e3e8
 80039f8:	50000400 	.word	0x50000400
 80039fc:	50000c00 	.word	0x50000c00

08003a00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a04:	b672      	cpsid	i
}
 8003a06:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003a08:	e7fe      	b.n	8003a08 <Error_Handler+0x8>
	...

08003a0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a12:	4b0f      	ldr	r3, [pc, #60]	; (8003a50 <HAL_MspInit+0x44>)
 8003a14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a16:	4b0e      	ldr	r3, [pc, #56]	; (8003a50 <HAL_MspInit+0x44>)
 8003a18:	2101      	movs	r1, #1
 8003a1a:	430a      	orrs	r2, r1
 8003a1c:	641a      	str	r2, [r3, #64]	; 0x40
 8003a1e:	4b0c      	ldr	r3, [pc, #48]	; (8003a50 <HAL_MspInit+0x44>)
 8003a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a22:	2201      	movs	r2, #1
 8003a24:	4013      	ands	r3, r2
 8003a26:	607b      	str	r3, [r7, #4]
 8003a28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a2a:	4b09      	ldr	r3, [pc, #36]	; (8003a50 <HAL_MspInit+0x44>)
 8003a2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a2e:	4b08      	ldr	r3, [pc, #32]	; (8003a50 <HAL_MspInit+0x44>)
 8003a30:	2180      	movs	r1, #128	; 0x80
 8003a32:	0549      	lsls	r1, r1, #21
 8003a34:	430a      	orrs	r2, r1
 8003a36:	63da      	str	r2, [r3, #60]	; 0x3c
 8003a38:	4b05      	ldr	r3, [pc, #20]	; (8003a50 <HAL_MspInit+0x44>)
 8003a3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a3c:	2380      	movs	r3, #128	; 0x80
 8003a3e:	055b      	lsls	r3, r3, #21
 8003a40:	4013      	ands	r3, r2
 8003a42:	603b      	str	r3, [r7, #0]
 8003a44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a46:	46c0      	nop			; (mov r8, r8)
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	b002      	add	sp, #8
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	46c0      	nop			; (mov r8, r8)
 8003a50:	40021000 	.word	0x40021000

08003a54 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003a54:	b590      	push	{r4, r7, lr}
 8003a56:	b091      	sub	sp, #68	; 0x44
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a5c:	232c      	movs	r3, #44	; 0x2c
 8003a5e:	18fb      	adds	r3, r7, r3
 8003a60:	0018      	movs	r0, r3
 8003a62:	2314      	movs	r3, #20
 8003a64:	001a      	movs	r2, r3
 8003a66:	2100      	movs	r1, #0
 8003a68:	f003 f8f0 	bl	8006c4c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003a6c:	2414      	movs	r4, #20
 8003a6e:	193b      	adds	r3, r7, r4
 8003a70:	0018      	movs	r0, r3
 8003a72:	2318      	movs	r3, #24
 8003a74:	001a      	movs	r2, r3
 8003a76:	2100      	movs	r1, #0
 8003a78:	f003 f8e8 	bl	8006c4c <memset>
  if(hadc->Instance==ADC1)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a35      	ldr	r2, [pc, #212]	; (8003b58 <HAL_ADC_MspInit+0x104>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d164      	bne.n	8003b50 <HAL_ADC_MspInit+0xfc>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003a86:	193b      	adds	r3, r7, r4
 8003a88:	2280      	movs	r2, #128	; 0x80
 8003a8a:	01d2      	lsls	r2, r2, #7
 8003a8c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8003a8e:	193b      	adds	r3, r7, r4
 8003a90:	2200      	movs	r2, #0
 8003a92:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a94:	193b      	adds	r3, r7, r4
 8003a96:	0018      	movs	r0, r3
 8003a98:	f002 fcfa 	bl	8006490 <HAL_RCCEx_PeriphCLKConfig>
 8003a9c:	1e03      	subs	r3, r0, #0
 8003a9e:	d001      	beq.n	8003aa4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8003aa0:	f7ff ffae 	bl	8003a00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003aa4:	4b2d      	ldr	r3, [pc, #180]	; (8003b5c <HAL_ADC_MspInit+0x108>)
 8003aa6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003aa8:	4b2c      	ldr	r3, [pc, #176]	; (8003b5c <HAL_ADC_MspInit+0x108>)
 8003aaa:	2180      	movs	r1, #128	; 0x80
 8003aac:	0349      	lsls	r1, r1, #13
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	641a      	str	r2, [r3, #64]	; 0x40
 8003ab2:	4b2a      	ldr	r3, [pc, #168]	; (8003b5c <HAL_ADC_MspInit+0x108>)
 8003ab4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ab6:	2380      	movs	r3, #128	; 0x80
 8003ab8:	035b      	lsls	r3, r3, #13
 8003aba:	4013      	ands	r3, r2
 8003abc:	613b      	str	r3, [r7, #16]
 8003abe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ac0:	4b26      	ldr	r3, [pc, #152]	; (8003b5c <HAL_ADC_MspInit+0x108>)
 8003ac2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ac4:	4b25      	ldr	r3, [pc, #148]	; (8003b5c <HAL_ADC_MspInit+0x108>)
 8003ac6:	2101      	movs	r1, #1
 8003ac8:	430a      	orrs	r2, r1
 8003aca:	635a      	str	r2, [r3, #52]	; 0x34
 8003acc:	4b23      	ldr	r3, [pc, #140]	; (8003b5c <HAL_ADC_MspInit+0x108>)
 8003ace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	60fb      	str	r3, [r7, #12]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8003ad8:	212c      	movs	r1, #44	; 0x2c
 8003ada:	187b      	adds	r3, r7, r1
 8003adc:	2207      	movs	r2, #7
 8003ade:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003ae0:	187b      	adds	r3, r7, r1
 8003ae2:	2203      	movs	r2, #3
 8003ae4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ae6:	187b      	adds	r3, r7, r1
 8003ae8:	2200      	movs	r2, #0
 8003aea:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003aec:	187a      	adds	r2, r7, r1
 8003aee:	23a0      	movs	r3, #160	; 0xa0
 8003af0:	05db      	lsls	r3, r3, #23
 8003af2:	0011      	movs	r1, r2
 8003af4:	0018      	movs	r0, r3
 8003af6:	f001 fe6f 	bl	80057d8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003afa:	4b19      	ldr	r3, [pc, #100]	; (8003b60 <HAL_ADC_MspInit+0x10c>)
 8003afc:	4a19      	ldr	r2, [pc, #100]	; (8003b64 <HAL_ADC_MspInit+0x110>)
 8003afe:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8003b00:	4b17      	ldr	r3, [pc, #92]	; (8003b60 <HAL_ADC_MspInit+0x10c>)
 8003b02:	2205      	movs	r2, #5
 8003b04:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003b06:	4b16      	ldr	r3, [pc, #88]	; (8003b60 <HAL_ADC_MspInit+0x10c>)
 8003b08:	2200      	movs	r2, #0
 8003b0a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b0c:	4b14      	ldr	r3, [pc, #80]	; (8003b60 <HAL_ADC_MspInit+0x10c>)
 8003b0e:	2200      	movs	r2, #0
 8003b10:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003b12:	4b13      	ldr	r3, [pc, #76]	; (8003b60 <HAL_ADC_MspInit+0x10c>)
 8003b14:	2280      	movs	r2, #128	; 0x80
 8003b16:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003b18:	4b11      	ldr	r3, [pc, #68]	; (8003b60 <HAL_ADC_MspInit+0x10c>)
 8003b1a:	2280      	movs	r2, #128	; 0x80
 8003b1c:	0052      	lsls	r2, r2, #1
 8003b1e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003b20:	4b0f      	ldr	r3, [pc, #60]	; (8003b60 <HAL_ADC_MspInit+0x10c>)
 8003b22:	2280      	movs	r2, #128	; 0x80
 8003b24:	00d2      	lsls	r2, r2, #3
 8003b26:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8003b28:	4b0d      	ldr	r3, [pc, #52]	; (8003b60 <HAL_ADC_MspInit+0x10c>)
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003b2e:	4b0c      	ldr	r3, [pc, #48]	; (8003b60 <HAL_ADC_MspInit+0x10c>)
 8003b30:	2200      	movs	r2, #0
 8003b32:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003b34:	4b0a      	ldr	r3, [pc, #40]	; (8003b60 <HAL_ADC_MspInit+0x10c>)
 8003b36:	0018      	movs	r0, r3
 8003b38:	f001 fbfc 	bl	8005334 <HAL_DMA_Init>
 8003b3c:	1e03      	subs	r3, r0, #0
 8003b3e:	d001      	beq.n	8003b44 <HAL_ADC_MspInit+0xf0>
    {
      Error_Handler();
 8003b40:	f7ff ff5e 	bl	8003a00 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	4a06      	ldr	r2, [pc, #24]	; (8003b60 <HAL_ADC_MspInit+0x10c>)
 8003b48:	651a      	str	r2, [r3, #80]	; 0x50
 8003b4a:	4b05      	ldr	r3, [pc, #20]	; (8003b60 <HAL_ADC_MspInit+0x10c>)
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003b50:	46c0      	nop			; (mov r8, r8)
 8003b52:	46bd      	mov	sp, r7
 8003b54:	b011      	add	sp, #68	; 0x44
 8003b56:	bd90      	pop	{r4, r7, pc}
 8003b58:	40012400 	.word	0x40012400
 8003b5c:	40021000 	.word	0x40021000
 8003b60:	200000f0 	.word	0x200000f0
 8003b64:	40020008 	.word	0x40020008

08003b68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b084      	sub	sp, #16
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a0a      	ldr	r2, [pc, #40]	; (8003ba0 <HAL_TIM_Base_MspInit+0x38>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d10d      	bne.n	8003b96 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003b7a:	4b0a      	ldr	r3, [pc, #40]	; (8003ba4 <HAL_TIM_Base_MspInit+0x3c>)
 8003b7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b7e:	4b09      	ldr	r3, [pc, #36]	; (8003ba4 <HAL_TIM_Base_MspInit+0x3c>)
 8003b80:	2180      	movs	r1, #128	; 0x80
 8003b82:	0109      	lsls	r1, r1, #4
 8003b84:	430a      	orrs	r2, r1
 8003b86:	641a      	str	r2, [r3, #64]	; 0x40
 8003b88:	4b06      	ldr	r3, [pc, #24]	; (8003ba4 <HAL_TIM_Base_MspInit+0x3c>)
 8003b8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b8c:	2380      	movs	r3, #128	; 0x80
 8003b8e:	011b      	lsls	r3, r3, #4
 8003b90:	4013      	ands	r3, r2
 8003b92:	60fb      	str	r3, [r7, #12]
 8003b94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003b96:	46c0      	nop			; (mov r8, r8)
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	b004      	add	sp, #16
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	46c0      	nop			; (mov r8, r8)
 8003ba0:	40012c00 	.word	0x40012c00
 8003ba4:	40021000 	.word	0x40021000

08003ba8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003bac:	e7fe      	b.n	8003bac <NMI_Handler+0x4>

08003bae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003bae:	b580      	push	{r7, lr}
 8003bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003bb2:	e7fe      	b.n	8003bb2 <HardFault_Handler+0x4>

08003bb4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003bb8:	46c0      	nop			; (mov r8, r8)
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}

08003bbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003bbe:	b580      	push	{r7, lr}
 8003bc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003bc2:	46c0      	nop			; (mov r8, r8)
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}

08003bc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003bcc:	f000 f8e0 	bl	8003d90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003bd0:	46c0      	nop			; (mov r8, r8)
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
	...

08003bd8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003bdc:	4b03      	ldr	r3, [pc, #12]	; (8003bec <DMA1_Channel1_IRQHandler+0x14>)
 8003bde:	0018      	movs	r0, r3
 8003be0:	f001 fcb8 	bl	8005554 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003be4:	46c0      	nop			; (mov r8, r8)
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	46c0      	nop			; (mov r8, r8)
 8003bec:	200000f0 	.word	0x200000f0

08003bf0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b086      	sub	sp, #24
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003bf8:	4a14      	ldr	r2, [pc, #80]	; (8003c4c <_sbrk+0x5c>)
 8003bfa:	4b15      	ldr	r3, [pc, #84]	; (8003c50 <_sbrk+0x60>)
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c04:	4b13      	ldr	r3, [pc, #76]	; (8003c54 <_sbrk+0x64>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d102      	bne.n	8003c12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c0c:	4b11      	ldr	r3, [pc, #68]	; (8003c54 <_sbrk+0x64>)
 8003c0e:	4a12      	ldr	r2, [pc, #72]	; (8003c58 <_sbrk+0x68>)
 8003c10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c12:	4b10      	ldr	r3, [pc, #64]	; (8003c54 <_sbrk+0x64>)
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	18d3      	adds	r3, r2, r3
 8003c1a:	693a      	ldr	r2, [r7, #16]
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d207      	bcs.n	8003c30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003c20:	f003 f81c 	bl	8006c5c <__errno>
 8003c24:	0003      	movs	r3, r0
 8003c26:	220c      	movs	r2, #12
 8003c28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	425b      	negs	r3, r3
 8003c2e:	e009      	b.n	8003c44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003c30:	4b08      	ldr	r3, [pc, #32]	; (8003c54 <_sbrk+0x64>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003c36:	4b07      	ldr	r3, [pc, #28]	; (8003c54 <_sbrk+0x64>)
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	18d2      	adds	r2, r2, r3
 8003c3e:	4b05      	ldr	r3, [pc, #20]	; (8003c54 <_sbrk+0x64>)
 8003c40:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003c42:	68fb      	ldr	r3, [r7, #12]
}
 8003c44:	0018      	movs	r0, r3
 8003c46:	46bd      	mov	sp, r7
 8003c48:	b006      	add	sp, #24
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	20002000 	.word	0x20002000
 8003c50:	00000400 	.word	0x00000400
 8003c54:	20000600 	.word	0x20000600
 8003c58:	20000750 	.word	0x20000750

08003c5c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003c60:	46c0      	nop			; (mov r8, r8)
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
	...

08003c68 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003c68:	480d      	ldr	r0, [pc, #52]	; (8003ca0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003c6a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003c6c:	f7ff fff6 	bl	8003c5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003c70:	480c      	ldr	r0, [pc, #48]	; (8003ca4 <LoopForever+0x6>)
  ldr r1, =_edata
 8003c72:	490d      	ldr	r1, [pc, #52]	; (8003ca8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003c74:	4a0d      	ldr	r2, [pc, #52]	; (8003cac <LoopForever+0xe>)
  movs r3, #0
 8003c76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c78:	e002      	b.n	8003c80 <LoopCopyDataInit>

08003c7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c7e:	3304      	adds	r3, #4

08003c80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c84:	d3f9      	bcc.n	8003c7a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c86:	4a0a      	ldr	r2, [pc, #40]	; (8003cb0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003c88:	4c0a      	ldr	r4, [pc, #40]	; (8003cb4 <LoopForever+0x16>)
  movs r3, #0
 8003c8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c8c:	e001      	b.n	8003c92 <LoopFillZerobss>

08003c8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c90:	3204      	adds	r2, #4

08003c92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c94:	d3fb      	bcc.n	8003c8e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003c96:	f002 ffe7 	bl	8006c68 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003c9a:	f7ff fc19 	bl	80034d0 <main>

08003c9e <LoopForever>:

LoopForever:
  b LoopForever
 8003c9e:	e7fe      	b.n	8003c9e <LoopForever>
  ldr   r0, =_estack
 8003ca0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003ca4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ca8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8003cac:	080078f8 	.word	0x080078f8
  ldr r2, =_sbss
 8003cb0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8003cb4:	20000750 	.word	0x20000750

08003cb8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003cb8:	e7fe      	b.n	8003cb8 <ADC1_IRQHandler>
	...

08003cbc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003cc2:	1dfb      	adds	r3, r7, #7
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003cc8:	4b0b      	ldr	r3, [pc, #44]	; (8003cf8 <HAL_Init+0x3c>)
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	4b0a      	ldr	r3, [pc, #40]	; (8003cf8 <HAL_Init+0x3c>)
 8003cce:	2180      	movs	r1, #128	; 0x80
 8003cd0:	0049      	lsls	r1, r1, #1
 8003cd2:	430a      	orrs	r2, r1
 8003cd4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003cd6:	2003      	movs	r0, #3
 8003cd8:	f000 f810 	bl	8003cfc <HAL_InitTick>
 8003cdc:	1e03      	subs	r3, r0, #0
 8003cde:	d003      	beq.n	8003ce8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003ce0:	1dfb      	adds	r3, r7, #7
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	701a      	strb	r2, [r3, #0]
 8003ce6:	e001      	b.n	8003cec <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8003ce8:	f7ff fe90 	bl	8003a0c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003cec:	1dfb      	adds	r3, r7, #7
 8003cee:	781b      	ldrb	r3, [r3, #0]
}
 8003cf0:	0018      	movs	r0, r3
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	b002      	add	sp, #8
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	40022000 	.word	0x40022000

08003cfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003cfc:	b590      	push	{r4, r7, lr}
 8003cfe:	b085      	sub	sp, #20
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003d04:	230f      	movs	r3, #15
 8003d06:	18fb      	adds	r3, r7, r3
 8003d08:	2200      	movs	r2, #0
 8003d0a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003d0c:	4b1d      	ldr	r3, [pc, #116]	; (8003d84 <HAL_InitTick+0x88>)
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d02b      	beq.n	8003d6c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003d14:	4b1c      	ldr	r3, [pc, #112]	; (8003d88 <HAL_InitTick+0x8c>)
 8003d16:	681c      	ldr	r4, [r3, #0]
 8003d18:	4b1a      	ldr	r3, [pc, #104]	; (8003d84 <HAL_InitTick+0x88>)
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	0019      	movs	r1, r3
 8003d1e:	23fa      	movs	r3, #250	; 0xfa
 8003d20:	0098      	lsls	r0, r3, #2
 8003d22:	f7fc f9f7 	bl	8000114 <__udivsi3>
 8003d26:	0003      	movs	r3, r0
 8003d28:	0019      	movs	r1, r3
 8003d2a:	0020      	movs	r0, r4
 8003d2c:	f7fc f9f2 	bl	8000114 <__udivsi3>
 8003d30:	0003      	movs	r3, r0
 8003d32:	0018      	movs	r0, r3
 8003d34:	f001 faf1 	bl	800531a <HAL_SYSTICK_Config>
 8003d38:	1e03      	subs	r3, r0, #0
 8003d3a:	d112      	bne.n	8003d62 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2b03      	cmp	r3, #3
 8003d40:	d80a      	bhi.n	8003d58 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d42:	6879      	ldr	r1, [r7, #4]
 8003d44:	2301      	movs	r3, #1
 8003d46:	425b      	negs	r3, r3
 8003d48:	2200      	movs	r2, #0
 8003d4a:	0018      	movs	r0, r3
 8003d4c:	f001 fac0 	bl	80052d0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003d50:	4b0e      	ldr	r3, [pc, #56]	; (8003d8c <HAL_InitTick+0x90>)
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	601a      	str	r2, [r3, #0]
 8003d56:	e00d      	b.n	8003d74 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003d58:	230f      	movs	r3, #15
 8003d5a:	18fb      	adds	r3, r7, r3
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	701a      	strb	r2, [r3, #0]
 8003d60:	e008      	b.n	8003d74 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003d62:	230f      	movs	r3, #15
 8003d64:	18fb      	adds	r3, r7, r3
 8003d66:	2201      	movs	r2, #1
 8003d68:	701a      	strb	r2, [r3, #0]
 8003d6a:	e003      	b.n	8003d74 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003d6c:	230f      	movs	r3, #15
 8003d6e:	18fb      	adds	r3, r7, r3
 8003d70:	2201      	movs	r2, #1
 8003d72:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003d74:	230f      	movs	r3, #15
 8003d76:	18fb      	adds	r3, r7, r3
 8003d78:	781b      	ldrb	r3, [r3, #0]
}
 8003d7a:	0018      	movs	r0, r3
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	b005      	add	sp, #20
 8003d80:	bd90      	pop	{r4, r7, pc}
 8003d82:	46c0      	nop			; (mov r8, r8)
 8003d84:	20000008 	.word	0x20000008
 8003d88:	20000000 	.word	0x20000000
 8003d8c:	20000004 	.word	0x20000004

08003d90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003d94:	4b05      	ldr	r3, [pc, #20]	; (8003dac <HAL_IncTick+0x1c>)
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	001a      	movs	r2, r3
 8003d9a:	4b05      	ldr	r3, [pc, #20]	; (8003db0 <HAL_IncTick+0x20>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	18d2      	adds	r2, r2, r3
 8003da0:	4b03      	ldr	r3, [pc, #12]	; (8003db0 <HAL_IncTick+0x20>)
 8003da2:	601a      	str	r2, [r3, #0]
}
 8003da4:	46c0      	nop			; (mov r8, r8)
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	46c0      	nop			; (mov r8, r8)
 8003dac:	20000008 	.word	0x20000008
 8003db0:	20000604 	.word	0x20000604

08003db4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	af00      	add	r7, sp, #0
  return uwTick;
 8003db8:	4b02      	ldr	r3, [pc, #8]	; (8003dc4 <HAL_GetTick+0x10>)
 8003dba:	681b      	ldr	r3, [r3, #0]
}
 8003dbc:	0018      	movs	r0, r3
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	46c0      	nop			; (mov r8, r8)
 8003dc4:	20000604 	.word	0x20000604

08003dc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003dd0:	f7ff fff0 	bl	8003db4 <HAL_GetTick>
 8003dd4:	0003      	movs	r3, r0
 8003dd6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	3301      	adds	r3, #1
 8003de0:	d005      	beq.n	8003dee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003de2:	4b0a      	ldr	r3, [pc, #40]	; (8003e0c <HAL_Delay+0x44>)
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	001a      	movs	r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	189b      	adds	r3, r3, r2
 8003dec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003dee:	46c0      	nop			; (mov r8, r8)
 8003df0:	f7ff ffe0 	bl	8003db4 <HAL_GetTick>
 8003df4:	0002      	movs	r2, r0
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d8f7      	bhi.n	8003df0 <HAL_Delay+0x28>
  {
  }
}
 8003e00:	46c0      	nop			; (mov r8, r8)
 8003e02:	46c0      	nop			; (mov r8, r8)
 8003e04:	46bd      	mov	sp, r7
 8003e06:	b004      	add	sp, #16
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	46c0      	nop			; (mov r8, r8)
 8003e0c:	20000008 	.word	0x20000008

08003e10 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b082      	sub	sp, #8
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a05      	ldr	r2, [pc, #20]	; (8003e34 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8003e20:	401a      	ands	r2, r3
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	431a      	orrs	r2, r3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	601a      	str	r2, [r3, #0]
}
 8003e2a:	46c0      	nop			; (mov r8, r8)
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	b002      	add	sp, #8
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	46c0      	nop			; (mov r8, r8)
 8003e34:	fe3fffff 	.word	0xfe3fffff

08003e38 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	23e0      	movs	r3, #224	; 0xe0
 8003e46:	045b      	lsls	r3, r3, #17
 8003e48:	4013      	ands	r3, r2
}
 8003e4a:	0018      	movs	r0, r3
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	b002      	add	sp, #8
 8003e50:	bd80      	pop	{r7, pc}

08003e52 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8003e52:	b580      	push	{r7, lr}
 8003e54:	b084      	sub	sp, #16
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	60f8      	str	r0, [r7, #12]
 8003e5a:	60b9      	str	r1, [r7, #8]
 8003e5c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	695b      	ldr	r3, [r3, #20]
 8003e62:	68ba      	ldr	r2, [r7, #8]
 8003e64:	2104      	movs	r1, #4
 8003e66:	400a      	ands	r2, r1
 8003e68:	2107      	movs	r1, #7
 8003e6a:	4091      	lsls	r1, r2
 8003e6c:	000a      	movs	r2, r1
 8003e6e:	43d2      	mvns	r2, r2
 8003e70:	401a      	ands	r2, r3
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	2104      	movs	r1, #4
 8003e76:	400b      	ands	r3, r1
 8003e78:	6879      	ldr	r1, [r7, #4]
 8003e7a:	4099      	lsls	r1, r3
 8003e7c:	000b      	movs	r3, r1
 8003e7e:	431a      	orrs	r2, r3
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8003e84:	46c0      	nop			; (mov r8, r8)
 8003e86:	46bd      	mov	sp, r7
 8003e88:	b004      	add	sp, #16
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	695b      	ldr	r3, [r3, #20]
 8003e9a:	683a      	ldr	r2, [r7, #0]
 8003e9c:	2104      	movs	r1, #4
 8003e9e:	400a      	ands	r2, r1
 8003ea0:	2107      	movs	r1, #7
 8003ea2:	4091      	lsls	r1, r2
 8003ea4:	000a      	movs	r2, r1
 8003ea6:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	2104      	movs	r1, #4
 8003eac:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003eae:	40da      	lsrs	r2, r3
 8003eb0:	0013      	movs	r3, r2
}
 8003eb2:	0018      	movs	r0, r3
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	b002      	add	sp, #8
 8003eb8:	bd80      	pop	{r7, pc}

08003eba <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003eba:	b580      	push	{r7, lr}
 8003ebc:	b082      	sub	sp, #8
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	68da      	ldr	r2, [r3, #12]
 8003ec6:	23c0      	movs	r3, #192	; 0xc0
 8003ec8:	011b      	lsls	r3, r3, #4
 8003eca:	4013      	ands	r3, r2
 8003ecc:	d101      	bne.n	8003ed2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e000      	b.n	8003ed4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003ed2:	2300      	movs	r3, #0
}
 8003ed4:	0018      	movs	r0, r3
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	b002      	add	sp, #8
 8003eda:	bd80      	pop	{r7, pc}

08003edc <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	60f8      	str	r0, [r7, #12]
 8003ee4:	60b9      	str	r1, [r7, #8]
 8003ee6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eec:	68ba      	ldr	r2, [r7, #8]
 8003eee:	211f      	movs	r1, #31
 8003ef0:	400a      	ands	r2, r1
 8003ef2:	210f      	movs	r1, #15
 8003ef4:	4091      	lsls	r1, r2
 8003ef6:	000a      	movs	r2, r1
 8003ef8:	43d2      	mvns	r2, r2
 8003efa:	401a      	ands	r2, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	0e9b      	lsrs	r3, r3, #26
 8003f00:	210f      	movs	r1, #15
 8003f02:	4019      	ands	r1, r3
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	201f      	movs	r0, #31
 8003f08:	4003      	ands	r3, r0
 8003f0a:	4099      	lsls	r1, r3
 8003f0c:	000b      	movs	r3, r1
 8003f0e:	431a      	orrs	r2, r3
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003f14:	46c0      	nop			; (mov r8, r8)
 8003f16:	46bd      	mov	sp, r7
 8003f18:	b004      	add	sp, #16
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	035b      	lsls	r3, r3, #13
 8003f2e:	0b5b      	lsrs	r3, r3, #13
 8003f30:	431a      	orrs	r2, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003f36:	46c0      	nop			; (mov r8, r8)
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	b002      	add	sp, #8
 8003f3c:	bd80      	pop	{r7, pc}

08003f3e <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003f3e:	b580      	push	{r7, lr}
 8003f40:	b082      	sub	sp, #8
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	6078      	str	r0, [r7, #4]
 8003f46:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f4c:	683a      	ldr	r2, [r7, #0]
 8003f4e:	0352      	lsls	r2, r2, #13
 8003f50:	0b52      	lsrs	r2, r2, #13
 8003f52:	43d2      	mvns	r2, r2
 8003f54:	401a      	ands	r2, r3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003f5a:	46c0      	nop			; (mov r8, r8)
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	b002      	add	sp, #8
 8003f60:	bd80      	pop	{r7, pc}
	...

08003f64 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	60b9      	str	r1, [r7, #8]
 8003f6e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	695b      	ldr	r3, [r3, #20]
 8003f74:	68ba      	ldr	r2, [r7, #8]
 8003f76:	0212      	lsls	r2, r2, #8
 8003f78:	43d2      	mvns	r2, r2
 8003f7a:	401a      	ands	r2, r3
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	021b      	lsls	r3, r3, #8
 8003f80:	6879      	ldr	r1, [r7, #4]
 8003f82:	400b      	ands	r3, r1
 8003f84:	4904      	ldr	r1, [pc, #16]	; (8003f98 <LL_ADC_SetChannelSamplingTime+0x34>)
 8003f86:	400b      	ands	r3, r1
 8003f88:	431a      	orrs	r2, r3
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8003f8e:	46c0      	nop			; (mov r8, r8)
 8003f90:	46bd      	mov	sp, r7
 8003f92:	b004      	add	sp, #16
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	46c0      	nop			; (mov r8, r8)
 8003f98:	07ffff00 	.word	0x07ffff00

08003f9c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b082      	sub	sp, #8
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	4a05      	ldr	r2, [pc, #20]	; (8003fc0 <LL_ADC_EnableInternalRegulator+0x24>)
 8003faa:	4013      	ands	r3, r2
 8003fac:	2280      	movs	r2, #128	; 0x80
 8003fae:	0552      	lsls	r2, r2, #21
 8003fb0:	431a      	orrs	r2, r3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003fb6:	46c0      	nop			; (mov r8, r8)
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	b002      	add	sp, #8
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	46c0      	nop			; (mov r8, r8)
 8003fc0:	6fffffe8 	.word	0x6fffffe8

08003fc4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	689a      	ldr	r2, [r3, #8]
 8003fd0:	2380      	movs	r3, #128	; 0x80
 8003fd2:	055b      	lsls	r3, r3, #21
 8003fd4:	401a      	ands	r2, r3
 8003fd6:	2380      	movs	r3, #128	; 0x80
 8003fd8:	055b      	lsls	r3, r3, #21
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d101      	bne.n	8003fe2 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e000      	b.n	8003fe4 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8003fe2:	2300      	movs	r3, #0
}
 8003fe4:	0018      	movs	r0, r3
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	b002      	add	sp, #8
 8003fea:	bd80      	pop	{r7, pc}

08003fec <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b082      	sub	sp, #8
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	4a04      	ldr	r2, [pc, #16]	; (800400c <LL_ADC_Enable+0x20>)
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	431a      	orrs	r2, r3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004004:	46c0      	nop			; (mov r8, r8)
 8004006:	46bd      	mov	sp, r7
 8004008:	b002      	add	sp, #8
 800400a:	bd80      	pop	{r7, pc}
 800400c:	7fffffe8 	.word	0x7fffffe8

08004010 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	4a04      	ldr	r2, [pc, #16]	; (8004030 <LL_ADC_Disable+0x20>)
 800401e:	4013      	ands	r3, r2
 8004020:	2202      	movs	r2, #2
 8004022:	431a      	orrs	r2, r3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004028:	46c0      	nop			; (mov r8, r8)
 800402a:	46bd      	mov	sp, r7
 800402c:	b002      	add	sp, #8
 800402e:	bd80      	pop	{r7, pc}
 8004030:	7fffffe8 	.word	0x7fffffe8

08004034 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b082      	sub	sp, #8
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	2201      	movs	r2, #1
 8004042:	4013      	ands	r3, r2
 8004044:	2b01      	cmp	r3, #1
 8004046:	d101      	bne.n	800404c <LL_ADC_IsEnabled+0x18>
 8004048:	2301      	movs	r3, #1
 800404a:	e000      	b.n	800404e <LL_ADC_IsEnabled+0x1a>
 800404c:	2300      	movs	r3, #0
}
 800404e:	0018      	movs	r0, r3
 8004050:	46bd      	mov	sp, r7
 8004052:	b002      	add	sp, #8
 8004054:	bd80      	pop	{r7, pc}

08004056 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8004056:	b580      	push	{r7, lr}
 8004058:	b082      	sub	sp, #8
 800405a:	af00      	add	r7, sp, #0
 800405c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	2202      	movs	r2, #2
 8004064:	4013      	ands	r3, r2
 8004066:	2b02      	cmp	r3, #2
 8004068:	d101      	bne.n	800406e <LL_ADC_IsDisableOngoing+0x18>
 800406a:	2301      	movs	r3, #1
 800406c:	e000      	b.n	8004070 <LL_ADC_IsDisableOngoing+0x1a>
 800406e:	2300      	movs	r3, #0
}
 8004070:	0018      	movs	r0, r3
 8004072:	46bd      	mov	sp, r7
 8004074:	b002      	add	sp, #8
 8004076:	bd80      	pop	{r7, pc}

08004078 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b082      	sub	sp, #8
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	4a04      	ldr	r2, [pc, #16]	; (8004098 <LL_ADC_REG_StartConversion+0x20>)
 8004086:	4013      	ands	r3, r2
 8004088:	2204      	movs	r2, #4
 800408a:	431a      	orrs	r2, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004090:	46c0      	nop			; (mov r8, r8)
 8004092:	46bd      	mov	sp, r7
 8004094:	b002      	add	sp, #8
 8004096:	bd80      	pop	{r7, pc}
 8004098:	7fffffe8 	.word	0x7fffffe8

0800409c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b082      	sub	sp, #8
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	4a04      	ldr	r2, [pc, #16]	; (80040bc <LL_ADC_REG_StopConversion+0x20>)
 80040aa:	4013      	ands	r3, r2
 80040ac:	2210      	movs	r2, #16
 80040ae:	431a      	orrs	r2, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80040b4:	46c0      	nop			; (mov r8, r8)
 80040b6:	46bd      	mov	sp, r7
 80040b8:	b002      	add	sp, #8
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	7fffffe8 	.word	0x7fffffe8

080040c0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	2204      	movs	r2, #4
 80040ce:	4013      	ands	r3, r2
 80040d0:	2b04      	cmp	r3, #4
 80040d2:	d101      	bne.n	80040d8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80040d4:	2301      	movs	r3, #1
 80040d6:	e000      	b.n	80040da <LL_ADC_REG_IsConversionOngoing+0x1a>
 80040d8:	2300      	movs	r3, #0
}
 80040da:	0018      	movs	r0, r3
 80040dc:	46bd      	mov	sp, r7
 80040de:	b002      	add	sp, #8
 80040e0:	bd80      	pop	{r7, pc}
	...

080040e4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b088      	sub	sp, #32
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040ec:	231f      	movs	r3, #31
 80040ee:	18fb      	adds	r3, r7, r3
 80040f0:	2200      	movs	r2, #0
 80040f2:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 80040f4:	2300      	movs	r3, #0
 80040f6:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80040f8:	2300      	movs	r3, #0
 80040fa:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80040fc:	2300      	movs	r3, #0
 80040fe:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d101      	bne.n	800410a <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e17f      	b.n	800440a <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800410e:	2b00      	cmp	r3, #0
 8004110:	d10a      	bne.n	8004128 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	0018      	movs	r0, r3
 8004116:	f7ff fc9d 	bl	8003a54 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2254      	movs	r2, #84	; 0x54
 8004124:	2100      	movs	r1, #0
 8004126:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	0018      	movs	r0, r3
 800412e:	f7ff ff49 	bl	8003fc4 <LL_ADC_IsInternalRegulatorEnabled>
 8004132:	1e03      	subs	r3, r0, #0
 8004134:	d115      	bne.n	8004162 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	0018      	movs	r0, r3
 800413c:	f7ff ff2e 	bl	8003f9c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004140:	4bb4      	ldr	r3, [pc, #720]	; (8004414 <HAL_ADC_Init+0x330>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	49b4      	ldr	r1, [pc, #720]	; (8004418 <HAL_ADC_Init+0x334>)
 8004146:	0018      	movs	r0, r3
 8004148:	f7fb ffe4 	bl	8000114 <__udivsi3>
 800414c:	0003      	movs	r3, r0
 800414e:	3301      	adds	r3, #1
 8004150:	005b      	lsls	r3, r3, #1
 8004152:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004154:	e002      	b.n	800415c <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	3b01      	subs	r3, #1
 800415a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d1f9      	bne.n	8004156 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	0018      	movs	r0, r3
 8004168:	f7ff ff2c 	bl	8003fc4 <LL_ADC_IsInternalRegulatorEnabled>
 800416c:	1e03      	subs	r3, r0, #0
 800416e:	d10f      	bne.n	8004190 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004174:	2210      	movs	r2, #16
 8004176:	431a      	orrs	r2, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004180:	2201      	movs	r2, #1
 8004182:	431a      	orrs	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004188:	231f      	movs	r3, #31
 800418a:	18fb      	adds	r3, r7, r3
 800418c:	2201      	movs	r2, #1
 800418e:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	0018      	movs	r0, r3
 8004196:	f7ff ff93 	bl	80040c0 <LL_ADC_REG_IsConversionOngoing>
 800419a:	0003      	movs	r3, r0
 800419c:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041a2:	2210      	movs	r2, #16
 80041a4:	4013      	ands	r3, r2
 80041a6:	d000      	beq.n	80041aa <HAL_ADC_Init+0xc6>
 80041a8:	e122      	b.n	80043f0 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d000      	beq.n	80041b2 <HAL_ADC_Init+0xce>
 80041b0:	e11e      	b.n	80043f0 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041b6:	4a99      	ldr	r2, [pc, #612]	; (800441c <HAL_ADC_Init+0x338>)
 80041b8:	4013      	ands	r3, r2
 80041ba:	2202      	movs	r2, #2
 80041bc:	431a      	orrs	r2, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	0018      	movs	r0, r3
 80041c8:	f7ff ff34 	bl	8004034 <LL_ADC_IsEnabled>
 80041cc:	1e03      	subs	r3, r0, #0
 80041ce:	d000      	beq.n	80041d2 <HAL_ADC_Init+0xee>
 80041d0:	e0ad      	b.n	800432e <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	7e1b      	ldrb	r3, [r3, #24]
 80041da:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80041dc:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	7e5b      	ldrb	r3, [r3, #25]
 80041e2:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80041e4:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	7e9b      	ldrb	r3, [r3, #26]
 80041ea:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80041ec:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d002      	beq.n	80041fc <HAL_ADC_Init+0x118>
 80041f6:	2380      	movs	r3, #128	; 0x80
 80041f8:	015b      	lsls	r3, r3, #5
 80041fa:	e000      	b.n	80041fe <HAL_ADC_Init+0x11a>
 80041fc:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80041fe:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8004204:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	691b      	ldr	r3, [r3, #16]
 800420a:	2b00      	cmp	r3, #0
 800420c:	da04      	bge.n	8004218 <HAL_ADC_Init+0x134>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	005b      	lsls	r3, r3, #1
 8004214:	085b      	lsrs	r3, r3, #1
 8004216:	e001      	b.n	800421c <HAL_ADC_Init+0x138>
 8004218:	2380      	movs	r3, #128	; 0x80
 800421a:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 800421c:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	212c      	movs	r1, #44	; 0x2c
 8004222:	5c5b      	ldrb	r3, [r3, r1]
 8004224:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8004226:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8004228:	69ba      	ldr	r2, [r7, #24]
 800422a:	4313      	orrs	r3, r2
 800422c:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2220      	movs	r2, #32
 8004232:	5c9b      	ldrb	r3, [r3, r2]
 8004234:	2b01      	cmp	r3, #1
 8004236:	d115      	bne.n	8004264 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	7e9b      	ldrb	r3, [r3, #26]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d105      	bne.n	800424c <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	2280      	movs	r2, #128	; 0x80
 8004244:	0252      	lsls	r2, r2, #9
 8004246:	4313      	orrs	r3, r2
 8004248:	61bb      	str	r3, [r7, #24]
 800424a:	e00b      	b.n	8004264 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004250:	2220      	movs	r2, #32
 8004252:	431a      	orrs	r2, r3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800425c:	2201      	movs	r2, #1
 800425e:	431a      	orrs	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004268:	2b00      	cmp	r3, #0
 800426a:	d00a      	beq.n	8004282 <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004270:	23e0      	movs	r3, #224	; 0xe0
 8004272:	005b      	lsls	r3, r3, #1
 8004274:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800427a:	4313      	orrs	r3, r2
 800427c:	69ba      	ldr	r2, [r7, #24]
 800427e:	4313      	orrs	r3, r2
 8004280:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	4a65      	ldr	r2, [pc, #404]	; (8004420 <HAL_ADC_Init+0x33c>)
 800428a:	4013      	ands	r3, r2
 800428c:	0019      	movs	r1, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	69ba      	ldr	r2, [r7, #24]
 8004294:	430a      	orrs	r2, r1
 8004296:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	0f9b      	lsrs	r3, r3, #30
 800429e:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80042a4:	4313      	orrs	r3, r2
 80042a6:	697a      	ldr	r2, [r7, #20]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	223c      	movs	r2, #60	; 0x3c
 80042b0:	5c9b      	ldrb	r3, [r3, r2]
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d111      	bne.n	80042da <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	0f9b      	lsrs	r3, r3, #30
 80042bc:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80042c2:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 80042c8:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80042ce:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	2201      	movs	r2, #1
 80042d6:	4313      	orrs	r3, r2
 80042d8:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	691b      	ldr	r3, [r3, #16]
 80042e0:	4a50      	ldr	r2, [pc, #320]	; (8004424 <HAL_ADC_Init+0x340>)
 80042e2:	4013      	ands	r3, r2
 80042e4:	0019      	movs	r1, r3
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	697a      	ldr	r2, [r7, #20]
 80042ec:	430a      	orrs	r2, r1
 80042ee:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	685a      	ldr	r2, [r3, #4]
 80042f4:	23c0      	movs	r3, #192	; 0xc0
 80042f6:	061b      	lsls	r3, r3, #24
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d018      	beq.n	800432e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8004300:	2380      	movs	r3, #128	; 0x80
 8004302:	05db      	lsls	r3, r3, #23
 8004304:	429a      	cmp	r2, r3
 8004306:	d012      	beq.n	800432e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800430c:	2380      	movs	r3, #128	; 0x80
 800430e:	061b      	lsls	r3, r3, #24
 8004310:	429a      	cmp	r2, r3
 8004312:	d00c      	beq.n	800432e <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8004314:	4b44      	ldr	r3, [pc, #272]	; (8004428 <HAL_ADC_Init+0x344>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a44      	ldr	r2, [pc, #272]	; (800442c <HAL_ADC_Init+0x348>)
 800431a:	4013      	ands	r3, r2
 800431c:	0019      	movs	r1, r3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	685a      	ldr	r2, [r3, #4]
 8004322:	23f0      	movs	r3, #240	; 0xf0
 8004324:	039b      	lsls	r3, r3, #14
 8004326:	401a      	ands	r2, r3
 8004328:	4b3f      	ldr	r3, [pc, #252]	; (8004428 <HAL_ADC_Init+0x344>)
 800432a:	430a      	orrs	r2, r1
 800432c:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6818      	ldr	r0, [r3, #0]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004336:	001a      	movs	r2, r3
 8004338:	2100      	movs	r1, #0
 800433a:	f7ff fd8a 	bl	8003e52 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6818      	ldr	r0, [r3, #0]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004346:	493a      	ldr	r1, [pc, #232]	; (8004430 <HAL_ADC_Init+0x34c>)
 8004348:	001a      	movs	r2, r3
 800434a:	f7ff fd82 	bl	8003e52 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d109      	bne.n	800436a <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2110      	movs	r1, #16
 8004362:	4249      	negs	r1, r1
 8004364:	430a      	orrs	r2, r1
 8004366:	629a      	str	r2, [r3, #40]	; 0x28
 8004368:	e018      	b.n	800439c <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	691a      	ldr	r2, [r3, #16]
 800436e:	2380      	movs	r3, #128	; 0x80
 8004370:	039b      	lsls	r3, r3, #14
 8004372:	429a      	cmp	r2, r3
 8004374:	d112      	bne.n	800439c <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	69db      	ldr	r3, [r3, #28]
 8004380:	3b01      	subs	r3, #1
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	221c      	movs	r2, #28
 8004386:	4013      	ands	r3, r2
 8004388:	2210      	movs	r2, #16
 800438a:	4252      	negs	r2, r2
 800438c:	409a      	lsls	r2, r3
 800438e:	0011      	movs	r1, r2
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	430a      	orrs	r2, r1
 800439a:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2100      	movs	r1, #0
 80043a2:	0018      	movs	r0, r3
 80043a4:	f7ff fd72 	bl	8003e8c <LL_ADC_GetSamplingTimeCommonChannels>
 80043a8:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d10b      	bne.n	80043ca <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043bc:	2203      	movs	r2, #3
 80043be:	4393      	bics	r3, r2
 80043c0:	2201      	movs	r2, #1
 80043c2:	431a      	orrs	r2, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80043c8:	e01c      	b.n	8004404 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ce:	2212      	movs	r2, #18
 80043d0:	4393      	bics	r3, r2
 80043d2:	2210      	movs	r2, #16
 80043d4:	431a      	orrs	r2, r3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043de:	2201      	movs	r2, #1
 80043e0:	431a      	orrs	r2, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80043e6:	231f      	movs	r3, #31
 80043e8:	18fb      	adds	r3, r7, r3
 80043ea:	2201      	movs	r2, #1
 80043ec:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80043ee:	e009      	b.n	8004404 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043f4:	2210      	movs	r2, #16
 80043f6:	431a      	orrs	r2, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80043fc:	231f      	movs	r3, #31
 80043fe:	18fb      	adds	r3, r7, r3
 8004400:	2201      	movs	r2, #1
 8004402:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8004404:	231f      	movs	r3, #31
 8004406:	18fb      	adds	r3, r7, r3
 8004408:	781b      	ldrb	r3, [r3, #0]
}
 800440a:	0018      	movs	r0, r3
 800440c:	46bd      	mov	sp, r7
 800440e:	b008      	add	sp, #32
 8004410:	bd80      	pop	{r7, pc}
 8004412:	46c0      	nop			; (mov r8, r8)
 8004414:	20000000 	.word	0x20000000
 8004418:	00030d40 	.word	0x00030d40
 800441c:	fffffefd 	.word	0xfffffefd
 8004420:	fffe0201 	.word	0xfffe0201
 8004424:	1ffffc02 	.word	0x1ffffc02
 8004428:	40012708 	.word	0x40012708
 800442c:	ffc3ffff 	.word	0xffc3ffff
 8004430:	07ffff04 	.word	0x07ffff04

08004434 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004434:	b5b0      	push	{r4, r5, r7, lr}
 8004436:	b084      	sub	sp, #16
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	0018      	movs	r0, r3
 8004442:	f7ff fe3d 	bl	80040c0 <LL_ADC_REG_IsConversionOngoing>
 8004446:	1e03      	subs	r3, r0, #0
 8004448:	d135      	bne.n	80044b6 <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2254      	movs	r2, #84	; 0x54
 800444e:	5c9b      	ldrb	r3, [r3, r2]
 8004450:	2b01      	cmp	r3, #1
 8004452:	d101      	bne.n	8004458 <HAL_ADC_Start+0x24>
 8004454:	2302      	movs	r3, #2
 8004456:	e035      	b.n	80044c4 <HAL_ADC_Start+0x90>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2254      	movs	r2, #84	; 0x54
 800445c:	2101      	movs	r1, #1
 800445e:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004460:	250f      	movs	r5, #15
 8004462:	197c      	adds	r4, r7, r5
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	0018      	movs	r0, r3
 8004468:	f000 fbbe 	bl	8004be8 <ADC_Enable>
 800446c:	0003      	movs	r3, r0
 800446e:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004470:	197b      	adds	r3, r7, r5
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d119      	bne.n	80044ac <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800447c:	4a13      	ldr	r2, [pc, #76]	; (80044cc <HAL_ADC_Start+0x98>)
 800447e:	4013      	ands	r3, r2
 8004480:	2280      	movs	r2, #128	; 0x80
 8004482:	0052      	lsls	r2, r2, #1
 8004484:	431a      	orrs	r2, r3
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	221c      	movs	r2, #28
 8004496:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2254      	movs	r2, #84	; 0x54
 800449c:	2100      	movs	r1, #0
 800449e:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	0018      	movs	r0, r3
 80044a6:	f7ff fde7 	bl	8004078 <LL_ADC_REG_StartConversion>
 80044aa:	e008      	b.n	80044be <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2254      	movs	r2, #84	; 0x54
 80044b0:	2100      	movs	r1, #0
 80044b2:	5499      	strb	r1, [r3, r2]
 80044b4:	e003      	b.n	80044be <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80044b6:	230f      	movs	r3, #15
 80044b8:	18fb      	adds	r3, r7, r3
 80044ba:	2202      	movs	r2, #2
 80044bc:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80044be:	230f      	movs	r3, #15
 80044c0:	18fb      	adds	r3, r7, r3
 80044c2:	781b      	ldrb	r3, [r3, #0]
}
 80044c4:	0018      	movs	r0, r3
 80044c6:	46bd      	mov	sp, r7
 80044c8:	b004      	add	sp, #16
 80044ca:	bdb0      	pop	{r4, r5, r7, pc}
 80044cc:	fffff0fe 	.word	0xfffff0fe

080044d0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80044d0:	b5b0      	push	{r4, r5, r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2254      	movs	r2, #84	; 0x54
 80044dc:	5c9b      	ldrb	r3, [r3, r2]
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d101      	bne.n	80044e6 <HAL_ADC_Stop+0x16>
 80044e2:	2302      	movs	r3, #2
 80044e4:	e029      	b.n	800453a <HAL_ADC_Stop+0x6a>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2254      	movs	r2, #84	; 0x54
 80044ea:	2101      	movs	r1, #1
 80044ec:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80044ee:	250f      	movs	r5, #15
 80044f0:	197c      	adds	r4, r7, r5
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	0018      	movs	r0, r3
 80044f6:	f000 fb35 	bl	8004b64 <ADC_ConversionStop>
 80044fa:	0003      	movs	r3, r0
 80044fc:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80044fe:	197b      	adds	r3, r7, r5
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d112      	bne.n	800452c <HAL_ADC_Stop+0x5c>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8004506:	197c      	adds	r4, r7, r5
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	0018      	movs	r0, r3
 800450c:	f000 fbf2 	bl	8004cf4 <ADC_Disable>
 8004510:	0003      	movs	r3, r0
 8004512:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004514:	197b      	adds	r3, r7, r5
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d107      	bne.n	800452c <HAL_ADC_Stop+0x5c>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004520:	4a08      	ldr	r2, [pc, #32]	; (8004544 <HAL_ADC_Stop+0x74>)
 8004522:	4013      	ands	r3, r2
 8004524:	2201      	movs	r2, #1
 8004526:	431a      	orrs	r2, r3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2254      	movs	r2, #84	; 0x54
 8004530:	2100      	movs	r1, #0
 8004532:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8004534:	230f      	movs	r3, #15
 8004536:	18fb      	adds	r3, r7, r3
 8004538:	781b      	ldrb	r3, [r3, #0]
}
 800453a:	0018      	movs	r0, r3
 800453c:	46bd      	mov	sp, r7
 800453e:	b004      	add	sp, #16
 8004540:	bdb0      	pop	{r4, r5, r7, pc}
 8004542:	46c0      	nop			; (mov r8, r8)
 8004544:	fffffefe 	.word	0xfffffefe

08004548 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	695b      	ldr	r3, [r3, #20]
 8004556:	2b08      	cmp	r3, #8
 8004558:	d102      	bne.n	8004560 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 800455a:	2308      	movs	r3, #8
 800455c:	60fb      	str	r3, [r7, #12]
 800455e:	e00f      	b.n	8004580 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	2201      	movs	r2, #1
 8004568:	4013      	ands	r3, r2
 800456a:	d007      	beq.n	800457c <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004570:	2220      	movs	r2, #32
 8004572:	431a      	orrs	r2, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e072      	b.n	8004662 <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 800457c:	2304      	movs	r3, #4
 800457e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8004580:	f7ff fc18 	bl	8003db4 <HAL_GetTick>
 8004584:	0003      	movs	r3, r0
 8004586:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8004588:	e01f      	b.n	80045ca <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	3301      	adds	r3, #1
 800458e:	d01c      	beq.n	80045ca <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8004590:	f7ff fc10 	bl	8003db4 <HAL_GetTick>
 8004594:	0002      	movs	r2, r0
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	683a      	ldr	r2, [r7, #0]
 800459c:	429a      	cmp	r2, r3
 800459e:	d302      	bcc.n	80045a6 <HAL_ADC_PollForConversion+0x5e>
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d111      	bne.n	80045ca <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	68fa      	ldr	r2, [r7, #12]
 80045ae:	4013      	ands	r3, r2
 80045b0:	d10b      	bne.n	80045ca <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045b6:	2204      	movs	r2, #4
 80045b8:	431a      	orrs	r2, r3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2254      	movs	r2, #84	; 0x54
 80045c2:	2100      	movs	r1, #0
 80045c4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e04b      	b.n	8004662 <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68fa      	ldr	r2, [r7, #12]
 80045d2:	4013      	ands	r3, r2
 80045d4:	d0d9      	beq.n	800458a <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045da:	2280      	movs	r2, #128	; 0x80
 80045dc:	0092      	lsls	r2, r2, #2
 80045de:	431a      	orrs	r2, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	0018      	movs	r0, r3
 80045ea:	f7ff fc66 	bl	8003eba <LL_ADC_REG_IsTriggerSourceSWStart>
 80045ee:	1e03      	subs	r3, r0, #0
 80045f0:	d02e      	beq.n	8004650 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	7e9b      	ldrb	r3, [r3, #26]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d12a      	bne.n	8004650 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2208      	movs	r2, #8
 8004602:	4013      	ands	r3, r2
 8004604:	2b08      	cmp	r3, #8
 8004606:	d123      	bne.n	8004650 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	0018      	movs	r0, r3
 800460e:	f7ff fd57 	bl	80040c0 <LL_ADC_REG_IsConversionOngoing>
 8004612:	1e03      	subs	r3, r0, #0
 8004614:	d110      	bne.n	8004638 <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	685a      	ldr	r2, [r3, #4]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	210c      	movs	r1, #12
 8004622:	438a      	bics	r2, r1
 8004624:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800462a:	4a10      	ldr	r2, [pc, #64]	; (800466c <HAL_ADC_PollForConversion+0x124>)
 800462c:	4013      	ands	r3, r2
 800462e:	2201      	movs	r2, #1
 8004630:	431a      	orrs	r2, r3
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	659a      	str	r2, [r3, #88]	; 0x58
 8004636:	e00b      	b.n	8004650 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800463c:	2220      	movs	r2, #32
 800463e:	431a      	orrs	r2, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004648:	2201      	movs	r2, #1
 800464a:	431a      	orrs	r2, r3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	7e1b      	ldrb	r3, [r3, #24]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d103      	bne.n	8004660 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	220c      	movs	r2, #12
 800465e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	0018      	movs	r0, r3
 8004664:	46bd      	mov	sp, r7
 8004666:	b004      	add	sp, #16
 8004668:	bd80      	pop	{r7, pc}
 800466a:	46c0      	nop			; (mov r8, r8)
 800466c:	fffffefe 	.word	0xfffffefe

08004670 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004670:	b5b0      	push	{r4, r5, r7, lr}
 8004672:	b086      	sub	sp, #24
 8004674:	af00      	add	r7, sp, #0
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	60b9      	str	r1, [r7, #8]
 800467a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	0018      	movs	r0, r3
 8004682:	f7ff fd1d 	bl	80040c0 <LL_ADC_REG_IsConversionOngoing>
 8004686:	1e03      	subs	r3, r0, #0
 8004688:	d16c      	bne.n	8004764 <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2254      	movs	r2, #84	; 0x54
 800468e:	5c9b      	ldrb	r3, [r3, r2]
 8004690:	2b01      	cmp	r3, #1
 8004692:	d101      	bne.n	8004698 <HAL_ADC_Start_DMA+0x28>
 8004694:	2302      	movs	r3, #2
 8004696:	e06c      	b.n	8004772 <HAL_ADC_Start_DMA+0x102>
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2254      	movs	r2, #84	; 0x54
 800469c:	2101      	movs	r1, #1
 800469e:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	2201      	movs	r2, #1
 80046a8:	4013      	ands	r3, r2
 80046aa:	d113      	bne.n	80046d4 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	0018      	movs	r0, r3
 80046b2:	f7ff fcbf 	bl	8004034 <LL_ADC_IsEnabled>
 80046b6:	1e03      	subs	r3, r0, #0
 80046b8:	d004      	beq.n	80046c4 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	0018      	movs	r0, r3
 80046c0:	f7ff fca6 	bl	8004010 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68da      	ldr	r2, [r3, #12]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	2101      	movs	r1, #1
 80046d0:	430a      	orrs	r2, r1
 80046d2:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80046d4:	2517      	movs	r5, #23
 80046d6:	197c      	adds	r4, r7, r5
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	0018      	movs	r0, r3
 80046dc:	f000 fa84 	bl	8004be8 <ADC_Enable>
 80046e0:	0003      	movs	r3, r0
 80046e2:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80046e4:	002c      	movs	r4, r5
 80046e6:	193b      	adds	r3, r7, r4
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d13e      	bne.n	800476c <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046f2:	4a22      	ldr	r2, [pc, #136]	; (800477c <HAL_ADC_Start_DMA+0x10c>)
 80046f4:	4013      	ands	r3, r2
 80046f6:	2280      	movs	r2, #128	; 0x80
 80046f8:	0052      	lsls	r2, r2, #1
 80046fa:	431a      	orrs	r2, r3
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2200      	movs	r2, #0
 8004704:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800470a:	4a1d      	ldr	r2, [pc, #116]	; (8004780 <HAL_ADC_Start_DMA+0x110>)
 800470c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004712:	4a1c      	ldr	r2, [pc, #112]	; (8004784 <HAL_ADC_Start_DMA+0x114>)
 8004714:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800471a:	4a1b      	ldr	r2, [pc, #108]	; (8004788 <HAL_ADC_Start_DMA+0x118>)
 800471c:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	221c      	movs	r2, #28
 8004724:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2254      	movs	r2, #84	; 0x54
 800472a:	2100      	movs	r1, #0
 800472c:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	685a      	ldr	r2, [r3, #4]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	2110      	movs	r1, #16
 800473a:	430a      	orrs	r2, r1
 800473c:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	3340      	adds	r3, #64	; 0x40
 8004748:	0019      	movs	r1, r3
 800474a:	68ba      	ldr	r2, [r7, #8]
 800474c:	193c      	adds	r4, r7, r4
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f000 fe7a 	bl	8005448 <HAL_DMA_Start_IT>
 8004754:	0003      	movs	r3, r0
 8004756:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	0018      	movs	r0, r3
 800475e:	f7ff fc8b 	bl	8004078 <LL_ADC_REG_StartConversion>
 8004762:	e003      	b.n	800476c <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004764:	2317      	movs	r3, #23
 8004766:	18fb      	adds	r3, r7, r3
 8004768:	2202      	movs	r2, #2
 800476a:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800476c:	2317      	movs	r3, #23
 800476e:	18fb      	adds	r3, r7, r3
 8004770:	781b      	ldrb	r3, [r3, #0]
}
 8004772:	0018      	movs	r0, r3
 8004774:	46bd      	mov	sp, r7
 8004776:	b006      	add	sp, #24
 8004778:	bdb0      	pop	{r4, r5, r7, pc}
 800477a:	46c0      	nop			; (mov r8, r8)
 800477c:	fffff0fe 	.word	0xfffff0fe
 8004780:	08004db1 	.word	0x08004db1
 8004784:	08004e79 	.word	0x08004e79
 8004788:	08004e97 	.word	0x08004e97

0800478c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b082      	sub	sp, #8
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800479a:	0018      	movs	r0, r3
 800479c:	46bd      	mov	sp, r7
 800479e:	b002      	add	sp, #8
 80047a0:	bd80      	pop	{r7, pc}

080047a2 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80047a2:	b580      	push	{r7, lr}
 80047a4:	b082      	sub	sp, #8
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80047aa:	46c0      	nop			; (mov r8, r8)
 80047ac:	46bd      	mov	sp, r7
 80047ae:	b002      	add	sp, #8
 80047b0:	bd80      	pop	{r7, pc}
	...

080047b4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b086      	sub	sp, #24
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80047be:	2317      	movs	r3, #23
 80047c0:	18fb      	adds	r3, r7, r3
 80047c2:	2200      	movs	r2, #0
 80047c4:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80047c6:	2300      	movs	r3, #0
 80047c8:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2254      	movs	r2, #84	; 0x54
 80047ce:	5c9b      	ldrb	r3, [r3, r2]
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d101      	bne.n	80047d8 <HAL_ADC_ConfigChannel+0x24>
 80047d4:	2302      	movs	r3, #2
 80047d6:	e1c0      	b.n	8004b5a <HAL_ADC_ConfigChannel+0x3a6>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2254      	movs	r2, #84	; 0x54
 80047dc:	2101      	movs	r1, #1
 80047de:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	0018      	movs	r0, r3
 80047e6:	f7ff fc6b 	bl	80040c0 <LL_ADC_REG_IsConversionOngoing>
 80047ea:	1e03      	subs	r3, r0, #0
 80047ec:	d000      	beq.n	80047f0 <HAL_ADC_ConfigChannel+0x3c>
 80047ee:	e1a3      	b.n	8004b38 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	d100      	bne.n	80047fa <HAL_ADC_ConfigChannel+0x46>
 80047f8:	e143      	b.n	8004a82 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	691a      	ldr	r2, [r3, #16]
 80047fe:	2380      	movs	r3, #128	; 0x80
 8004800:	061b      	lsls	r3, r3, #24
 8004802:	429a      	cmp	r2, r3
 8004804:	d004      	beq.n	8004810 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800480a:	4ac1      	ldr	r2, [pc, #772]	; (8004b10 <HAL_ADC_ConfigChannel+0x35c>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d108      	bne.n	8004822 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	0019      	movs	r1, r3
 800481a:	0010      	movs	r0, r2
 800481c:	f7ff fb7e 	bl	8003f1c <LL_ADC_REG_SetSequencerChAdd>
 8004820:	e0c9      	b.n	80049b6 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	211f      	movs	r1, #31
 800482c:	400b      	ands	r3, r1
 800482e:	210f      	movs	r1, #15
 8004830:	4099      	lsls	r1, r3
 8004832:	000b      	movs	r3, r1
 8004834:	43db      	mvns	r3, r3
 8004836:	4013      	ands	r3, r2
 8004838:	0019      	movs	r1, r3
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	035b      	lsls	r3, r3, #13
 8004840:	0b5b      	lsrs	r3, r3, #13
 8004842:	d105      	bne.n	8004850 <HAL_ADC_ConfigChannel+0x9c>
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	0e9b      	lsrs	r3, r3, #26
 800484a:	221f      	movs	r2, #31
 800484c:	4013      	ands	r3, r2
 800484e:	e098      	b.n	8004982 <HAL_ADC_ConfigChannel+0x1ce>
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2201      	movs	r2, #1
 8004856:	4013      	ands	r3, r2
 8004858:	d000      	beq.n	800485c <HAL_ADC_ConfigChannel+0xa8>
 800485a:	e091      	b.n	8004980 <HAL_ADC_ConfigChannel+0x1cc>
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2202      	movs	r2, #2
 8004862:	4013      	ands	r3, r2
 8004864:	d000      	beq.n	8004868 <HAL_ADC_ConfigChannel+0xb4>
 8004866:	e089      	b.n	800497c <HAL_ADC_ConfigChannel+0x1c8>
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	2204      	movs	r2, #4
 800486e:	4013      	ands	r3, r2
 8004870:	d000      	beq.n	8004874 <HAL_ADC_ConfigChannel+0xc0>
 8004872:	e081      	b.n	8004978 <HAL_ADC_ConfigChannel+0x1c4>
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2208      	movs	r2, #8
 800487a:	4013      	ands	r3, r2
 800487c:	d000      	beq.n	8004880 <HAL_ADC_ConfigChannel+0xcc>
 800487e:	e079      	b.n	8004974 <HAL_ADC_ConfigChannel+0x1c0>
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	2210      	movs	r2, #16
 8004886:	4013      	ands	r3, r2
 8004888:	d000      	beq.n	800488c <HAL_ADC_ConfigChannel+0xd8>
 800488a:	e071      	b.n	8004970 <HAL_ADC_ConfigChannel+0x1bc>
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	2220      	movs	r2, #32
 8004892:	4013      	ands	r3, r2
 8004894:	d000      	beq.n	8004898 <HAL_ADC_ConfigChannel+0xe4>
 8004896:	e069      	b.n	800496c <HAL_ADC_ConfigChannel+0x1b8>
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	2240      	movs	r2, #64	; 0x40
 800489e:	4013      	ands	r3, r2
 80048a0:	d000      	beq.n	80048a4 <HAL_ADC_ConfigChannel+0xf0>
 80048a2:	e061      	b.n	8004968 <HAL_ADC_ConfigChannel+0x1b4>
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2280      	movs	r2, #128	; 0x80
 80048aa:	4013      	ands	r3, r2
 80048ac:	d000      	beq.n	80048b0 <HAL_ADC_ConfigChannel+0xfc>
 80048ae:	e059      	b.n	8004964 <HAL_ADC_ConfigChannel+0x1b0>
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	2380      	movs	r3, #128	; 0x80
 80048b6:	005b      	lsls	r3, r3, #1
 80048b8:	4013      	ands	r3, r2
 80048ba:	d151      	bne.n	8004960 <HAL_ADC_ConfigChannel+0x1ac>
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	2380      	movs	r3, #128	; 0x80
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	4013      	ands	r3, r2
 80048c6:	d149      	bne.n	800495c <HAL_ADC_ConfigChannel+0x1a8>
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	2380      	movs	r3, #128	; 0x80
 80048ce:	00db      	lsls	r3, r3, #3
 80048d0:	4013      	ands	r3, r2
 80048d2:	d141      	bne.n	8004958 <HAL_ADC_ConfigChannel+0x1a4>
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	2380      	movs	r3, #128	; 0x80
 80048da:	011b      	lsls	r3, r3, #4
 80048dc:	4013      	ands	r3, r2
 80048de:	d139      	bne.n	8004954 <HAL_ADC_ConfigChannel+0x1a0>
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	2380      	movs	r3, #128	; 0x80
 80048e6:	015b      	lsls	r3, r3, #5
 80048e8:	4013      	ands	r3, r2
 80048ea:	d131      	bne.n	8004950 <HAL_ADC_ConfigChannel+0x19c>
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	2380      	movs	r3, #128	; 0x80
 80048f2:	019b      	lsls	r3, r3, #6
 80048f4:	4013      	ands	r3, r2
 80048f6:	d129      	bne.n	800494c <HAL_ADC_ConfigChannel+0x198>
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	2380      	movs	r3, #128	; 0x80
 80048fe:	01db      	lsls	r3, r3, #7
 8004900:	4013      	ands	r3, r2
 8004902:	d121      	bne.n	8004948 <HAL_ADC_ConfigChannel+0x194>
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	2380      	movs	r3, #128	; 0x80
 800490a:	021b      	lsls	r3, r3, #8
 800490c:	4013      	ands	r3, r2
 800490e:	d119      	bne.n	8004944 <HAL_ADC_ConfigChannel+0x190>
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	2380      	movs	r3, #128	; 0x80
 8004916:	025b      	lsls	r3, r3, #9
 8004918:	4013      	ands	r3, r2
 800491a:	d111      	bne.n	8004940 <HAL_ADC_ConfigChannel+0x18c>
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	2380      	movs	r3, #128	; 0x80
 8004922:	029b      	lsls	r3, r3, #10
 8004924:	4013      	ands	r3, r2
 8004926:	d109      	bne.n	800493c <HAL_ADC_ConfigChannel+0x188>
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	2380      	movs	r3, #128	; 0x80
 800492e:	02db      	lsls	r3, r3, #11
 8004930:	4013      	ands	r3, r2
 8004932:	d001      	beq.n	8004938 <HAL_ADC_ConfigChannel+0x184>
 8004934:	2312      	movs	r3, #18
 8004936:	e024      	b.n	8004982 <HAL_ADC_ConfigChannel+0x1ce>
 8004938:	2300      	movs	r3, #0
 800493a:	e022      	b.n	8004982 <HAL_ADC_ConfigChannel+0x1ce>
 800493c:	2311      	movs	r3, #17
 800493e:	e020      	b.n	8004982 <HAL_ADC_ConfigChannel+0x1ce>
 8004940:	2310      	movs	r3, #16
 8004942:	e01e      	b.n	8004982 <HAL_ADC_ConfigChannel+0x1ce>
 8004944:	230f      	movs	r3, #15
 8004946:	e01c      	b.n	8004982 <HAL_ADC_ConfigChannel+0x1ce>
 8004948:	230e      	movs	r3, #14
 800494a:	e01a      	b.n	8004982 <HAL_ADC_ConfigChannel+0x1ce>
 800494c:	230d      	movs	r3, #13
 800494e:	e018      	b.n	8004982 <HAL_ADC_ConfigChannel+0x1ce>
 8004950:	230c      	movs	r3, #12
 8004952:	e016      	b.n	8004982 <HAL_ADC_ConfigChannel+0x1ce>
 8004954:	230b      	movs	r3, #11
 8004956:	e014      	b.n	8004982 <HAL_ADC_ConfigChannel+0x1ce>
 8004958:	230a      	movs	r3, #10
 800495a:	e012      	b.n	8004982 <HAL_ADC_ConfigChannel+0x1ce>
 800495c:	2309      	movs	r3, #9
 800495e:	e010      	b.n	8004982 <HAL_ADC_ConfigChannel+0x1ce>
 8004960:	2308      	movs	r3, #8
 8004962:	e00e      	b.n	8004982 <HAL_ADC_ConfigChannel+0x1ce>
 8004964:	2307      	movs	r3, #7
 8004966:	e00c      	b.n	8004982 <HAL_ADC_ConfigChannel+0x1ce>
 8004968:	2306      	movs	r3, #6
 800496a:	e00a      	b.n	8004982 <HAL_ADC_ConfigChannel+0x1ce>
 800496c:	2305      	movs	r3, #5
 800496e:	e008      	b.n	8004982 <HAL_ADC_ConfigChannel+0x1ce>
 8004970:	2304      	movs	r3, #4
 8004972:	e006      	b.n	8004982 <HAL_ADC_ConfigChannel+0x1ce>
 8004974:	2303      	movs	r3, #3
 8004976:	e004      	b.n	8004982 <HAL_ADC_ConfigChannel+0x1ce>
 8004978:	2302      	movs	r3, #2
 800497a:	e002      	b.n	8004982 <HAL_ADC_ConfigChannel+0x1ce>
 800497c:	2301      	movs	r3, #1
 800497e:	e000      	b.n	8004982 <HAL_ADC_ConfigChannel+0x1ce>
 8004980:	2300      	movs	r3, #0
 8004982:	683a      	ldr	r2, [r7, #0]
 8004984:	6852      	ldr	r2, [r2, #4]
 8004986:	201f      	movs	r0, #31
 8004988:	4002      	ands	r2, r0
 800498a:	4093      	lsls	r3, r2
 800498c:	000a      	movs	r2, r1
 800498e:	431a      	orrs	r2, r3
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	089b      	lsrs	r3, r3, #2
 800499a:	1c5a      	adds	r2, r3, #1
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	69db      	ldr	r3, [r3, #28]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d808      	bhi.n	80049b6 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6818      	ldr	r0, [r3, #0]
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	6859      	ldr	r1, [r3, #4]
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	001a      	movs	r2, r3
 80049b2:	f7ff fa93 	bl	8003edc <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6818      	ldr	r0, [r3, #0]
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	6819      	ldr	r1, [r3, #0]
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	001a      	movs	r2, r3
 80049c4:	f7ff face 	bl	8003f64 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	db00      	blt.n	80049d2 <HAL_ADC_ConfigChannel+0x21e>
 80049d0:	e0bc      	b.n	8004b4c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80049d2:	4b50      	ldr	r3, [pc, #320]	; (8004b14 <HAL_ADC_ConfigChannel+0x360>)
 80049d4:	0018      	movs	r0, r3
 80049d6:	f7ff fa2f 	bl	8003e38 <LL_ADC_GetCommonPathInternalCh>
 80049da:	0003      	movs	r3, r0
 80049dc:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a4d      	ldr	r2, [pc, #308]	; (8004b18 <HAL_ADC_ConfigChannel+0x364>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d122      	bne.n	8004a2e <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80049e8:	693a      	ldr	r2, [r7, #16]
 80049ea:	2380      	movs	r3, #128	; 0x80
 80049ec:	041b      	lsls	r3, r3, #16
 80049ee:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80049f0:	d11d      	bne.n	8004a2e <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	2280      	movs	r2, #128	; 0x80
 80049f6:	0412      	lsls	r2, r2, #16
 80049f8:	4313      	orrs	r3, r2
 80049fa:	4a46      	ldr	r2, [pc, #280]	; (8004b14 <HAL_ADC_ConfigChannel+0x360>)
 80049fc:	0019      	movs	r1, r3
 80049fe:	0010      	movs	r0, r2
 8004a00:	f7ff fa06 	bl	8003e10 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004a04:	4b45      	ldr	r3, [pc, #276]	; (8004b1c <HAL_ADC_ConfigChannel+0x368>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4945      	ldr	r1, [pc, #276]	; (8004b20 <HAL_ADC_ConfigChannel+0x36c>)
 8004a0a:	0018      	movs	r0, r3
 8004a0c:	f7fb fb82 	bl	8000114 <__udivsi3>
 8004a10:	0003      	movs	r3, r0
 8004a12:	1c5a      	adds	r2, r3, #1
 8004a14:	0013      	movs	r3, r2
 8004a16:	005b      	lsls	r3, r3, #1
 8004a18:	189b      	adds	r3, r3, r2
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004a1e:	e002      	b.n	8004a26 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	3b01      	subs	r3, #1
 8004a24:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d1f9      	bne.n	8004a20 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004a2c:	e08e      	b.n	8004b4c <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a3c      	ldr	r2, [pc, #240]	; (8004b24 <HAL_ADC_ConfigChannel+0x370>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d10e      	bne.n	8004a56 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004a38:	693a      	ldr	r2, [r7, #16]
 8004a3a:	2380      	movs	r3, #128	; 0x80
 8004a3c:	045b      	lsls	r3, r3, #17
 8004a3e:	4013      	ands	r3, r2
 8004a40:	d109      	bne.n	8004a56 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	2280      	movs	r2, #128	; 0x80
 8004a46:	0452      	lsls	r2, r2, #17
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	4a32      	ldr	r2, [pc, #200]	; (8004b14 <HAL_ADC_ConfigChannel+0x360>)
 8004a4c:	0019      	movs	r1, r3
 8004a4e:	0010      	movs	r0, r2
 8004a50:	f7ff f9de 	bl	8003e10 <LL_ADC_SetCommonPathInternalCh>
 8004a54:	e07a      	b.n	8004b4c <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a33      	ldr	r2, [pc, #204]	; (8004b28 <HAL_ADC_ConfigChannel+0x374>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d000      	beq.n	8004a62 <HAL_ADC_ConfigChannel+0x2ae>
 8004a60:	e074      	b.n	8004b4c <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004a62:	693a      	ldr	r2, [r7, #16]
 8004a64:	2380      	movs	r3, #128	; 0x80
 8004a66:	03db      	lsls	r3, r3, #15
 8004a68:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004a6a:	d000      	beq.n	8004a6e <HAL_ADC_ConfigChannel+0x2ba>
 8004a6c:	e06e      	b.n	8004b4c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	2280      	movs	r2, #128	; 0x80
 8004a72:	03d2      	lsls	r2, r2, #15
 8004a74:	4313      	orrs	r3, r2
 8004a76:	4a27      	ldr	r2, [pc, #156]	; (8004b14 <HAL_ADC_ConfigChannel+0x360>)
 8004a78:	0019      	movs	r1, r3
 8004a7a:	0010      	movs	r0, r2
 8004a7c:	f7ff f9c8 	bl	8003e10 <LL_ADC_SetCommonPathInternalCh>
 8004a80:	e064      	b.n	8004b4c <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	691a      	ldr	r2, [r3, #16]
 8004a86:	2380      	movs	r3, #128	; 0x80
 8004a88:	061b      	lsls	r3, r3, #24
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d004      	beq.n	8004a98 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004a92:	4a1f      	ldr	r2, [pc, #124]	; (8004b10 <HAL_ADC_ConfigChannel+0x35c>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d107      	bne.n	8004aa8 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	0019      	movs	r1, r3
 8004aa2:	0010      	movs	r0, r2
 8004aa4:	f7ff fa4b 	bl	8003f3e <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	da4d      	bge.n	8004b4c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004ab0:	4b18      	ldr	r3, [pc, #96]	; (8004b14 <HAL_ADC_ConfigChannel+0x360>)
 8004ab2:	0018      	movs	r0, r3
 8004ab4:	f7ff f9c0 	bl	8003e38 <LL_ADC_GetCommonPathInternalCh>
 8004ab8:	0003      	movs	r3, r0
 8004aba:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a15      	ldr	r2, [pc, #84]	; (8004b18 <HAL_ADC_ConfigChannel+0x364>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d108      	bne.n	8004ad8 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	4a18      	ldr	r2, [pc, #96]	; (8004b2c <HAL_ADC_ConfigChannel+0x378>)
 8004aca:	4013      	ands	r3, r2
 8004acc:	4a11      	ldr	r2, [pc, #68]	; (8004b14 <HAL_ADC_ConfigChannel+0x360>)
 8004ace:	0019      	movs	r1, r3
 8004ad0:	0010      	movs	r0, r2
 8004ad2:	f7ff f99d 	bl	8003e10 <LL_ADC_SetCommonPathInternalCh>
 8004ad6:	e039      	b.n	8004b4c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a11      	ldr	r2, [pc, #68]	; (8004b24 <HAL_ADC_ConfigChannel+0x370>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d108      	bne.n	8004af4 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	4a12      	ldr	r2, [pc, #72]	; (8004b30 <HAL_ADC_ConfigChannel+0x37c>)
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	4a0a      	ldr	r2, [pc, #40]	; (8004b14 <HAL_ADC_ConfigChannel+0x360>)
 8004aea:	0019      	movs	r1, r3
 8004aec:	0010      	movs	r0, r2
 8004aee:	f7ff f98f 	bl	8003e10 <LL_ADC_SetCommonPathInternalCh>
 8004af2:	e02b      	b.n	8004b4c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a0b      	ldr	r2, [pc, #44]	; (8004b28 <HAL_ADC_ConfigChannel+0x374>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d126      	bne.n	8004b4c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	4a0c      	ldr	r2, [pc, #48]	; (8004b34 <HAL_ADC_ConfigChannel+0x380>)
 8004b02:	4013      	ands	r3, r2
 8004b04:	4a03      	ldr	r2, [pc, #12]	; (8004b14 <HAL_ADC_ConfigChannel+0x360>)
 8004b06:	0019      	movs	r1, r3
 8004b08:	0010      	movs	r0, r2
 8004b0a:	f7ff f981 	bl	8003e10 <LL_ADC_SetCommonPathInternalCh>
 8004b0e:	e01d      	b.n	8004b4c <HAL_ADC_ConfigChannel+0x398>
 8004b10:	80000004 	.word	0x80000004
 8004b14:	40012708 	.word	0x40012708
 8004b18:	b0001000 	.word	0xb0001000
 8004b1c:	20000000 	.word	0x20000000
 8004b20:	00030d40 	.word	0x00030d40
 8004b24:	b8004000 	.word	0xb8004000
 8004b28:	b4002000 	.word	0xb4002000
 8004b2c:	ff7fffff 	.word	0xff7fffff
 8004b30:	feffffff 	.word	0xfeffffff
 8004b34:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b3c:	2220      	movs	r2, #32
 8004b3e:	431a      	orrs	r2, r3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004b44:	2317      	movs	r3, #23
 8004b46:	18fb      	adds	r3, r7, r3
 8004b48:	2201      	movs	r2, #1
 8004b4a:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2254      	movs	r2, #84	; 0x54
 8004b50:	2100      	movs	r1, #0
 8004b52:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8004b54:	2317      	movs	r3, #23
 8004b56:	18fb      	adds	r3, r7, r3
 8004b58:	781b      	ldrb	r3, [r3, #0]
}
 8004b5a:	0018      	movs	r0, r3
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	b006      	add	sp, #24
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	46c0      	nop			; (mov r8, r8)

08004b64 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	0018      	movs	r0, r3
 8004b72:	f7ff faa5 	bl	80040c0 <LL_ADC_REG_IsConversionOngoing>
 8004b76:	1e03      	subs	r3, r0, #0
 8004b78:	d031      	beq.n	8004bde <ADC_ConversionStop+0x7a>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	0018      	movs	r0, r3
 8004b80:	f7ff fa69 	bl	8004056 <LL_ADC_IsDisableOngoing>
 8004b84:	1e03      	subs	r3, r0, #0
 8004b86:	d104      	bne.n	8004b92 <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	0018      	movs	r0, r3
 8004b8e:	f7ff fa85 	bl	800409c <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004b92:	f7ff f90f 	bl	8003db4 <HAL_GetTick>
 8004b96:	0003      	movs	r3, r0
 8004b98:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8004b9a:	e01a      	b.n	8004bd2 <ADC_ConversionStop+0x6e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004b9c:	f7ff f90a 	bl	8003db4 <HAL_GetTick>
 8004ba0:	0002      	movs	r2, r0
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d913      	bls.n	8004bd2 <ADC_ConversionStop+0x6e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	2204      	movs	r2, #4
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	d00d      	beq.n	8004bd2 <ADC_ConversionStop+0x6e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bba:	2210      	movs	r2, #16
 8004bbc:	431a      	orrs	r2, r3
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	431a      	orrs	r2, r3
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e006      	b.n	8004be0 <ADC_ConversionStop+0x7c>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	2204      	movs	r2, #4
 8004bda:	4013      	ands	r3, r2
 8004bdc:	d1de      	bne.n	8004b9c <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004bde:	2300      	movs	r3, #0
}
 8004be0:	0018      	movs	r0, r3
 8004be2:	46bd      	mov	sp, r7
 8004be4:	b004      	add	sp, #16
 8004be6:	bd80      	pop	{r7, pc}

08004be8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b084      	sub	sp, #16
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	0018      	movs	r0, r3
 8004bfa:	f7ff fa1b 	bl	8004034 <LL_ADC_IsEnabled>
 8004bfe:	1e03      	subs	r3, r0, #0
 8004c00:	d000      	beq.n	8004c04 <ADC_Enable+0x1c>
 8004c02:	e069      	b.n	8004cd8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	4a36      	ldr	r2, [pc, #216]	; (8004ce4 <ADC_Enable+0xfc>)
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	d00d      	beq.n	8004c2c <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c14:	2210      	movs	r2, #16
 8004c16:	431a      	orrs	r2, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c20:	2201      	movs	r2, #1
 8004c22:	431a      	orrs	r2, r3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e056      	b.n	8004cda <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	0018      	movs	r0, r3
 8004c32:	f7ff f9db 	bl	8003fec <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8004c36:	4b2c      	ldr	r3, [pc, #176]	; (8004ce8 <ADC_Enable+0x100>)
 8004c38:	0018      	movs	r0, r3
 8004c3a:	f7ff f8fd 	bl	8003e38 <LL_ADC_GetCommonPathInternalCh>
 8004c3e:	0002      	movs	r2, r0
 8004c40:	2380      	movs	r3, #128	; 0x80
 8004c42:	041b      	lsls	r3, r3, #16
 8004c44:	4013      	ands	r3, r2
 8004c46:	d00f      	beq.n	8004c68 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004c48:	4b28      	ldr	r3, [pc, #160]	; (8004cec <ADC_Enable+0x104>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4928      	ldr	r1, [pc, #160]	; (8004cf0 <ADC_Enable+0x108>)
 8004c4e:	0018      	movs	r0, r3
 8004c50:	f7fb fa60 	bl	8000114 <__udivsi3>
 8004c54:	0003      	movs	r3, r0
 8004c56:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8004c58:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004c5a:	e002      	b.n	8004c62 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	3b01      	subs	r3, #1
 8004c60:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d1f9      	bne.n	8004c5c <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	7e5b      	ldrb	r3, [r3, #25]
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d033      	beq.n	8004cd8 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8004c70:	f7ff f8a0 	bl	8003db4 <HAL_GetTick>
 8004c74:	0003      	movs	r3, r0
 8004c76:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004c78:	e027      	b.n	8004cca <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	0018      	movs	r0, r3
 8004c80:	f7ff f9d8 	bl	8004034 <LL_ADC_IsEnabled>
 8004c84:	1e03      	subs	r3, r0, #0
 8004c86:	d104      	bne.n	8004c92 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	0018      	movs	r0, r3
 8004c8e:	f7ff f9ad 	bl	8003fec <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004c92:	f7ff f88f 	bl	8003db4 <HAL_GetTick>
 8004c96:	0002      	movs	r2, r0
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	1ad3      	subs	r3, r2, r3
 8004c9c:	2b02      	cmp	r3, #2
 8004c9e:	d914      	bls.n	8004cca <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	4013      	ands	r3, r2
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d00d      	beq.n	8004cca <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cb2:	2210      	movs	r2, #16
 8004cb4:	431a      	orrs	r2, r3
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	431a      	orrs	r2, r3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e007      	b.n	8004cda <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d1d0      	bne.n	8004c7a <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004cd8:	2300      	movs	r3, #0
}
 8004cda:	0018      	movs	r0, r3
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	b004      	add	sp, #16
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	46c0      	nop			; (mov r8, r8)
 8004ce4:	80000017 	.word	0x80000017
 8004ce8:	40012708 	.word	0x40012708
 8004cec:	20000000 	.word	0x20000000
 8004cf0:	00030d40 	.word	0x00030d40

08004cf4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b084      	sub	sp, #16
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	0018      	movs	r0, r3
 8004d02:	f7ff f9a8 	bl	8004056 <LL_ADC_IsDisableOngoing>
 8004d06:	0003      	movs	r3, r0
 8004d08:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	0018      	movs	r0, r3
 8004d10:	f7ff f990 	bl	8004034 <LL_ADC_IsEnabled>
 8004d14:	1e03      	subs	r3, r0, #0
 8004d16:	d046      	beq.n	8004da6 <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d143      	bne.n	8004da6 <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	2205      	movs	r2, #5
 8004d26:	4013      	ands	r3, r2
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d10d      	bne.n	8004d48 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	0018      	movs	r0, r3
 8004d32:	f7ff f96d 	bl	8004010 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	2203      	movs	r2, #3
 8004d3c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004d3e:	f7ff f839 	bl	8003db4 <HAL_GetTick>
 8004d42:	0003      	movs	r3, r0
 8004d44:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004d46:	e028      	b.n	8004d9a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d4c:	2210      	movs	r2, #16
 8004d4e:	431a      	orrs	r2, r3
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d58:	2201      	movs	r2, #1
 8004d5a:	431a      	orrs	r2, r3
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	e021      	b.n	8004da8 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004d64:	f7ff f826 	bl	8003db4 <HAL_GetTick>
 8004d68:	0002      	movs	r2, r0
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	2b02      	cmp	r3, #2
 8004d70:	d913      	bls.n	8004d9a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	2201      	movs	r2, #1
 8004d7a:	4013      	ands	r3, r2
 8004d7c:	d00d      	beq.n	8004d9a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d82:	2210      	movs	r2, #16
 8004d84:	431a      	orrs	r2, r3
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d8e:	2201      	movs	r2, #1
 8004d90:	431a      	orrs	r2, r3
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e006      	b.n	8004da8 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	2201      	movs	r2, #1
 8004da2:	4013      	ands	r3, r2
 8004da4:	d1de      	bne.n	8004d64 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004da6:	2300      	movs	r3, #0
}
 8004da8:	0018      	movs	r0, r3
 8004daa:	46bd      	mov	sp, r7
 8004dac:	b004      	add	sp, #16
 8004dae:	bd80      	pop	{r7, pc}

08004db0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dbc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dc2:	2250      	movs	r2, #80	; 0x50
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	d141      	bne.n	8004e4c <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dcc:	2280      	movs	r2, #128	; 0x80
 8004dce:	0092      	lsls	r2, r2, #2
 8004dd0:	431a      	orrs	r2, r3
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	0018      	movs	r0, r3
 8004ddc:	f7ff f86d 	bl	8003eba <LL_ADC_REG_IsTriggerSourceSWStart>
 8004de0:	1e03      	subs	r3, r0, #0
 8004de2:	d02e      	beq.n	8004e42 <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	7e9b      	ldrb	r3, [r3, #26]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d12a      	bne.n	8004e42 <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	2208      	movs	r2, #8
 8004df4:	4013      	ands	r3, r2
 8004df6:	2b08      	cmp	r3, #8
 8004df8:	d123      	bne.n	8004e42 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	0018      	movs	r0, r3
 8004e00:	f7ff f95e 	bl	80040c0 <LL_ADC_REG_IsConversionOngoing>
 8004e04:	1e03      	subs	r3, r0, #0
 8004e06:	d110      	bne.n	8004e2a <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	685a      	ldr	r2, [r3, #4]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	210c      	movs	r1, #12
 8004e14:	438a      	bics	r2, r1
 8004e16:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e1c:	4a15      	ldr	r2, [pc, #84]	; (8004e74 <ADC_DMAConvCplt+0xc4>)
 8004e1e:	4013      	ands	r3, r2
 8004e20:	2201      	movs	r2, #1
 8004e22:	431a      	orrs	r2, r3
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	659a      	str	r2, [r3, #88]	; 0x58
 8004e28:	e00b      	b.n	8004e42 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e2e:	2220      	movs	r2, #32
 8004e30:	431a      	orrs	r2, r3
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	431a      	orrs	r2, r3
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	0018      	movs	r0, r3
 8004e46:	f7fe fafb 	bl	8003440 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004e4a:	e00f      	b.n	8004e6c <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e50:	2210      	movs	r2, #16
 8004e52:	4013      	ands	r3, r2
 8004e54:	d004      	beq.n	8004e60 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	0018      	movs	r0, r3
 8004e5a:	f7fe fb15 	bl	8003488 <HAL_ADC_ErrorCallback>
}
 8004e5e:	e005      	b.n	8004e6c <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	0010      	movs	r0, r2
 8004e6a:	4798      	blx	r3
}
 8004e6c:	46c0      	nop			; (mov r8, r8)
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	b004      	add	sp, #16
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	fffffefe 	.word	0xfffffefe

08004e78 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b084      	sub	sp, #16
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e84:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	0018      	movs	r0, r3
 8004e8a:	f7ff fc8a 	bl	80047a2 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004e8e:	46c0      	nop			; (mov r8, r8)
 8004e90:	46bd      	mov	sp, r7
 8004e92:	b004      	add	sp, #16
 8004e94:	bd80      	pop	{r7, pc}

08004e96 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004e96:	b580      	push	{r7, lr}
 8004e98:	b084      	sub	sp, #16
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea2:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ea8:	2240      	movs	r2, #64	; 0x40
 8004eaa:	431a      	orrs	r2, r3
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eb4:	2204      	movs	r2, #4
 8004eb6:	431a      	orrs	r2, r3
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	0018      	movs	r0, r3
 8004ec0:	f7fe fae2 	bl	8003488 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004ec4:	46c0      	nop			; (mov r8, r8)
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	b004      	add	sp, #16
 8004eca:	bd80      	pop	{r7, pc}

08004ecc <LL_ADC_SetCalibrationFactor>:
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b082      	sub	sp, #8
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	22b4      	movs	r2, #180	; 0xb4
 8004eda:	589b      	ldr	r3, [r3, r2]
 8004edc:	227f      	movs	r2, #127	; 0x7f
 8004ede:	4393      	bics	r3, r2
 8004ee0:	001a      	movs	r2, r3
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	431a      	orrs	r2, r3
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	21b4      	movs	r1, #180	; 0xb4
 8004eea:	505a      	str	r2, [r3, r1]
}
 8004eec:	46c0      	nop			; (mov r8, r8)
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	b002      	add	sp, #8
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <LL_ADC_GetCalibrationFactor>:
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b082      	sub	sp, #8
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	22b4      	movs	r2, #180	; 0xb4
 8004f00:	589b      	ldr	r3, [r3, r2]
 8004f02:	227f      	movs	r2, #127	; 0x7f
 8004f04:	4013      	ands	r3, r2
}
 8004f06:	0018      	movs	r0, r3
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	b002      	add	sp, #8
 8004f0c:	bd80      	pop	{r7, pc}
	...

08004f10 <LL_ADC_Enable>:
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b082      	sub	sp, #8
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	4a04      	ldr	r2, [pc, #16]	; (8004f30 <LL_ADC_Enable+0x20>)
 8004f1e:	4013      	ands	r3, r2
 8004f20:	2201      	movs	r2, #1
 8004f22:	431a      	orrs	r2, r3
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	609a      	str	r2, [r3, #8]
}
 8004f28:	46c0      	nop			; (mov r8, r8)
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	b002      	add	sp, #8
 8004f2e:	bd80      	pop	{r7, pc}
 8004f30:	7fffffe8 	.word	0x7fffffe8

08004f34 <LL_ADC_Disable>:
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b082      	sub	sp, #8
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	4a04      	ldr	r2, [pc, #16]	; (8004f54 <LL_ADC_Disable+0x20>)
 8004f42:	4013      	ands	r3, r2
 8004f44:	2202      	movs	r2, #2
 8004f46:	431a      	orrs	r2, r3
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	609a      	str	r2, [r3, #8]
}
 8004f4c:	46c0      	nop			; (mov r8, r8)
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	b002      	add	sp, #8
 8004f52:	bd80      	pop	{r7, pc}
 8004f54:	7fffffe8 	.word	0x7fffffe8

08004f58 <LL_ADC_IsEnabled>:
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b082      	sub	sp, #8
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	2201      	movs	r2, #1
 8004f66:	4013      	ands	r3, r2
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d101      	bne.n	8004f70 <LL_ADC_IsEnabled+0x18>
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e000      	b.n	8004f72 <LL_ADC_IsEnabled+0x1a>
 8004f70:	2300      	movs	r3, #0
}
 8004f72:	0018      	movs	r0, r3
 8004f74:	46bd      	mov	sp, r7
 8004f76:	b002      	add	sp, #8
 8004f78:	bd80      	pop	{r7, pc}
	...

08004f7c <LL_ADC_StartCalibration>:
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b082      	sub	sp, #8
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	4a05      	ldr	r2, [pc, #20]	; (8004fa0 <LL_ADC_StartCalibration+0x24>)
 8004f8a:	4013      	ands	r3, r2
 8004f8c:	2280      	movs	r2, #128	; 0x80
 8004f8e:	0612      	lsls	r2, r2, #24
 8004f90:	431a      	orrs	r2, r3
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	609a      	str	r2, [r3, #8]
}
 8004f96:	46c0      	nop			; (mov r8, r8)
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	b002      	add	sp, #8
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	46c0      	nop			; (mov r8, r8)
 8004fa0:	7fffffe8 	.word	0x7fffffe8

08004fa4 <LL_ADC_IsCalibrationOnGoing>:
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b082      	sub	sp, #8
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	0fdb      	lsrs	r3, r3, #31
 8004fb2:	07da      	lsls	r2, r3, #31
 8004fb4:	2380      	movs	r3, #128	; 0x80
 8004fb6:	061b      	lsls	r3, r3, #24
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d101      	bne.n	8004fc0 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e000      	b.n	8004fc2 <LL_ADC_IsCalibrationOnGoing+0x1e>
 8004fc0:	2300      	movs	r3, #0
}
 8004fc2:	0018      	movs	r0, r3
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	b002      	add	sp, #8
 8004fc8:	bd80      	pop	{r7, pc}
	...

08004fcc <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8004fcc:	b590      	push	{r4, r7, lr}
 8004fce:	b089      	sub	sp, #36	; 0x24
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2254      	movs	r2, #84	; 0x54
 8004fe0:	5c9b      	ldrb	r3, [r3, r2]
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d101      	bne.n	8004fea <HAL_ADCEx_Calibration_Start+0x1e>
 8004fe6:	2302      	movs	r3, #2
 8004fe8:	e0ba      	b.n	8005160 <HAL_ADCEx_Calibration_Start+0x194>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2254      	movs	r2, #84	; 0x54
 8004fee:	2101      	movs	r1, #1
 8004ff0:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004ff2:	2317      	movs	r3, #23
 8004ff4:	18fc      	adds	r4, r7, r3
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	0018      	movs	r0, r3
 8004ffa:	f7ff fe7b 	bl	8004cf4 <ADC_Disable>
 8004ffe:	0003      	movs	r3, r0
 8005000:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	0018      	movs	r0, r3
 8005008:	f7ff ffa6 	bl	8004f58 <LL_ADC_IsEnabled>
 800500c:	1e03      	subs	r3, r0, #0
 800500e:	d000      	beq.n	8005012 <HAL_ADCEx_Calibration_Start+0x46>
 8005010:	e099      	b.n	8005146 <HAL_ADCEx_Calibration_Start+0x17a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005016:	4a54      	ldr	r2, [pc, #336]	; (8005168 <HAL_ADCEx_Calibration_Start+0x19c>)
 8005018:	4013      	ands	r3, r2
 800501a:	2202      	movs	r2, #2
 800501c:	431a      	orrs	r2, r3
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	68db      	ldr	r3, [r3, #12]
 8005028:	4a50      	ldr	r2, [pc, #320]	; (800516c <HAL_ADCEx_Calibration_Start+0x1a0>)
 800502a:	4013      	ands	r3, r2
 800502c:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	68da      	ldr	r2, [r3, #12]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	494d      	ldr	r1, [pc, #308]	; (8005170 <HAL_ADCEx_Calibration_Start+0x1a4>)
 800503a:	400a      	ands	r2, r1
 800503c:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800503e:	2300      	movs	r3, #0
 8005040:	61fb      	str	r3, [r7, #28]
 8005042:	e02d      	b.n	80050a0 <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	0018      	movs	r0, r3
 800504a:	f7ff ff97 	bl	8004f7c <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800504e:	e014      	b.n	800507a <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	3301      	adds	r3, #1
 8005054:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	4a46      	ldr	r2, [pc, #280]	; (8005174 <HAL_ADCEx_Calibration_Start+0x1a8>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d90d      	bls.n	800507a <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005062:	2212      	movs	r2, #18
 8005064:	4393      	bics	r3, r2
 8005066:	2210      	movs	r2, #16
 8005068:	431a      	orrs	r2, r3
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2254      	movs	r2, #84	; 0x54
 8005072:	2100      	movs	r1, #0
 8005074:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e072      	b.n	8005160 <HAL_ADCEx_Calibration_Start+0x194>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	0018      	movs	r0, r3
 8005080:	f7ff ff90 	bl	8004fa4 <LL_ADC_IsCalibrationOnGoing>
 8005084:	1e03      	subs	r3, r0, #0
 8005086:	d1e3      	bne.n	8005050 <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	0018      	movs	r0, r3
 800508e:	f7ff ff31 	bl	8004ef4 <LL_ADC_GetCalibrationFactor>
 8005092:	0002      	movs	r2, r0
 8005094:	69bb      	ldr	r3, [r7, #24]
 8005096:	189b      	adds	r3, r3, r2
 8005098:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800509a:	69fb      	ldr	r3, [r7, #28]
 800509c:	3301      	adds	r3, #1
 800509e:	61fb      	str	r3, [r7, #28]
 80050a0:	69fb      	ldr	r3, [r7, #28]
 80050a2:	2b07      	cmp	r3, #7
 80050a4:	d9ce      	bls.n	8005044 <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 80050a6:	69f9      	ldr	r1, [r7, #28]
 80050a8:	69b8      	ldr	r0, [r7, #24]
 80050aa:	f7fb f833 	bl	8000114 <__udivsi3>
 80050ae:	0003      	movs	r3, r0
 80050b0:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	0018      	movs	r0, r3
 80050b8:	f7ff ff2a 	bl	8004f10 <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	69ba      	ldr	r2, [r7, #24]
 80050c2:	0011      	movs	r1, r2
 80050c4:	0018      	movs	r0, r3
 80050c6:	f7ff ff01 	bl	8004ecc <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	0018      	movs	r0, r3
 80050d0:	f7ff ff30 	bl	8004f34 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80050d4:	f7fe fe6e 	bl	8003db4 <HAL_GetTick>
 80050d8:	0003      	movs	r3, r0
 80050da:	60fb      	str	r3, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80050dc:	e01b      	b.n	8005116 <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80050de:	f7fe fe69 	bl	8003db4 <HAL_GetTick>
 80050e2:	0002      	movs	r2, r0
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	1ad3      	subs	r3, r2, r3
 80050e8:	2b02      	cmp	r3, #2
 80050ea:	d914      	bls.n	8005116 <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	0018      	movs	r0, r3
 80050f2:	f7ff ff31 	bl	8004f58 <LL_ADC_IsEnabled>
 80050f6:	1e03      	subs	r3, r0, #0
 80050f8:	d00d      	beq.n	8005116 <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050fe:	2210      	movs	r2, #16
 8005100:	431a      	orrs	r2, r3
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800510a:	2201      	movs	r2, #1
 800510c:	431a      	orrs	r2, r3
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	e024      	b.n	8005160 <HAL_ADCEx_Calibration_Start+0x194>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	0018      	movs	r0, r3
 800511c:	f7ff ff1c 	bl	8004f58 <LL_ADC_IsEnabled>
 8005120:	1e03      	subs	r3, r0, #0
 8005122:	d1dc      	bne.n	80050de <HAL_ADCEx_Calibration_Start+0x112>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	68d9      	ldr	r1, [r3, #12]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	693a      	ldr	r2, [r7, #16]
 8005130:	430a      	orrs	r2, r1
 8005132:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005138:	2203      	movs	r2, #3
 800513a:	4393      	bics	r3, r2
 800513c:	2201      	movs	r2, #1
 800513e:	431a      	orrs	r2, r3
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	659a      	str	r2, [r3, #88]	; 0x58
 8005144:	e005      	b.n	8005152 <HAL_ADCEx_Calibration_Start+0x186>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800514a:	2210      	movs	r2, #16
 800514c:	431a      	orrs	r2, r3
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2254      	movs	r2, #84	; 0x54
 8005156:	2100      	movs	r1, #0
 8005158:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 800515a:	2317      	movs	r3, #23
 800515c:	18fb      	adds	r3, r7, r3
 800515e:	781b      	ldrb	r3, [r3, #0]
}
 8005160:	0018      	movs	r0, r3
 8005162:	46bd      	mov	sp, r7
 8005164:	b009      	add	sp, #36	; 0x24
 8005166:	bd90      	pop	{r4, r7, pc}
 8005168:	fffffefd 	.word	0xfffffefd
 800516c:	00008003 	.word	0x00008003
 8005170:	ffff7ffc 	.word	0xffff7ffc
 8005174:	0002f1ff 	.word	0x0002f1ff

08005178 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b082      	sub	sp, #8
 800517c:	af00      	add	r7, sp, #0
 800517e:	0002      	movs	r2, r0
 8005180:	1dfb      	adds	r3, r7, #7
 8005182:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005184:	1dfb      	adds	r3, r7, #7
 8005186:	781b      	ldrb	r3, [r3, #0]
 8005188:	2b7f      	cmp	r3, #127	; 0x7f
 800518a:	d809      	bhi.n	80051a0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800518c:	1dfb      	adds	r3, r7, #7
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	001a      	movs	r2, r3
 8005192:	231f      	movs	r3, #31
 8005194:	401a      	ands	r2, r3
 8005196:	4b04      	ldr	r3, [pc, #16]	; (80051a8 <__NVIC_EnableIRQ+0x30>)
 8005198:	2101      	movs	r1, #1
 800519a:	4091      	lsls	r1, r2
 800519c:	000a      	movs	r2, r1
 800519e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80051a0:	46c0      	nop			; (mov r8, r8)
 80051a2:	46bd      	mov	sp, r7
 80051a4:	b002      	add	sp, #8
 80051a6:	bd80      	pop	{r7, pc}
 80051a8:	e000e100 	.word	0xe000e100

080051ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80051ac:	b590      	push	{r4, r7, lr}
 80051ae:	b083      	sub	sp, #12
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	0002      	movs	r2, r0
 80051b4:	6039      	str	r1, [r7, #0]
 80051b6:	1dfb      	adds	r3, r7, #7
 80051b8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80051ba:	1dfb      	adds	r3, r7, #7
 80051bc:	781b      	ldrb	r3, [r3, #0]
 80051be:	2b7f      	cmp	r3, #127	; 0x7f
 80051c0:	d828      	bhi.n	8005214 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80051c2:	4a2f      	ldr	r2, [pc, #188]	; (8005280 <__NVIC_SetPriority+0xd4>)
 80051c4:	1dfb      	adds	r3, r7, #7
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	b25b      	sxtb	r3, r3
 80051ca:	089b      	lsrs	r3, r3, #2
 80051cc:	33c0      	adds	r3, #192	; 0xc0
 80051ce:	009b      	lsls	r3, r3, #2
 80051d0:	589b      	ldr	r3, [r3, r2]
 80051d2:	1dfa      	adds	r2, r7, #7
 80051d4:	7812      	ldrb	r2, [r2, #0]
 80051d6:	0011      	movs	r1, r2
 80051d8:	2203      	movs	r2, #3
 80051da:	400a      	ands	r2, r1
 80051dc:	00d2      	lsls	r2, r2, #3
 80051de:	21ff      	movs	r1, #255	; 0xff
 80051e0:	4091      	lsls	r1, r2
 80051e2:	000a      	movs	r2, r1
 80051e4:	43d2      	mvns	r2, r2
 80051e6:	401a      	ands	r2, r3
 80051e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	019b      	lsls	r3, r3, #6
 80051ee:	22ff      	movs	r2, #255	; 0xff
 80051f0:	401a      	ands	r2, r3
 80051f2:	1dfb      	adds	r3, r7, #7
 80051f4:	781b      	ldrb	r3, [r3, #0]
 80051f6:	0018      	movs	r0, r3
 80051f8:	2303      	movs	r3, #3
 80051fa:	4003      	ands	r3, r0
 80051fc:	00db      	lsls	r3, r3, #3
 80051fe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005200:	481f      	ldr	r0, [pc, #124]	; (8005280 <__NVIC_SetPriority+0xd4>)
 8005202:	1dfb      	adds	r3, r7, #7
 8005204:	781b      	ldrb	r3, [r3, #0]
 8005206:	b25b      	sxtb	r3, r3
 8005208:	089b      	lsrs	r3, r3, #2
 800520a:	430a      	orrs	r2, r1
 800520c:	33c0      	adds	r3, #192	; 0xc0
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8005212:	e031      	b.n	8005278 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005214:	4a1b      	ldr	r2, [pc, #108]	; (8005284 <__NVIC_SetPriority+0xd8>)
 8005216:	1dfb      	adds	r3, r7, #7
 8005218:	781b      	ldrb	r3, [r3, #0]
 800521a:	0019      	movs	r1, r3
 800521c:	230f      	movs	r3, #15
 800521e:	400b      	ands	r3, r1
 8005220:	3b08      	subs	r3, #8
 8005222:	089b      	lsrs	r3, r3, #2
 8005224:	3306      	adds	r3, #6
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	18d3      	adds	r3, r2, r3
 800522a:	3304      	adds	r3, #4
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	1dfa      	adds	r2, r7, #7
 8005230:	7812      	ldrb	r2, [r2, #0]
 8005232:	0011      	movs	r1, r2
 8005234:	2203      	movs	r2, #3
 8005236:	400a      	ands	r2, r1
 8005238:	00d2      	lsls	r2, r2, #3
 800523a:	21ff      	movs	r1, #255	; 0xff
 800523c:	4091      	lsls	r1, r2
 800523e:	000a      	movs	r2, r1
 8005240:	43d2      	mvns	r2, r2
 8005242:	401a      	ands	r2, r3
 8005244:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	019b      	lsls	r3, r3, #6
 800524a:	22ff      	movs	r2, #255	; 0xff
 800524c:	401a      	ands	r2, r3
 800524e:	1dfb      	adds	r3, r7, #7
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	0018      	movs	r0, r3
 8005254:	2303      	movs	r3, #3
 8005256:	4003      	ands	r3, r0
 8005258:	00db      	lsls	r3, r3, #3
 800525a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800525c:	4809      	ldr	r0, [pc, #36]	; (8005284 <__NVIC_SetPriority+0xd8>)
 800525e:	1dfb      	adds	r3, r7, #7
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	001c      	movs	r4, r3
 8005264:	230f      	movs	r3, #15
 8005266:	4023      	ands	r3, r4
 8005268:	3b08      	subs	r3, #8
 800526a:	089b      	lsrs	r3, r3, #2
 800526c:	430a      	orrs	r2, r1
 800526e:	3306      	adds	r3, #6
 8005270:	009b      	lsls	r3, r3, #2
 8005272:	18c3      	adds	r3, r0, r3
 8005274:	3304      	adds	r3, #4
 8005276:	601a      	str	r2, [r3, #0]
}
 8005278:	46c0      	nop			; (mov r8, r8)
 800527a:	46bd      	mov	sp, r7
 800527c:	b003      	add	sp, #12
 800527e:	bd90      	pop	{r4, r7, pc}
 8005280:	e000e100 	.word	0xe000e100
 8005284:	e000ed00 	.word	0xe000ed00

08005288 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b082      	sub	sp, #8
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	1e5a      	subs	r2, r3, #1
 8005294:	2380      	movs	r3, #128	; 0x80
 8005296:	045b      	lsls	r3, r3, #17
 8005298:	429a      	cmp	r2, r3
 800529a:	d301      	bcc.n	80052a0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800529c:	2301      	movs	r3, #1
 800529e:	e010      	b.n	80052c2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80052a0:	4b0a      	ldr	r3, [pc, #40]	; (80052cc <SysTick_Config+0x44>)
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	3a01      	subs	r2, #1
 80052a6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80052a8:	2301      	movs	r3, #1
 80052aa:	425b      	negs	r3, r3
 80052ac:	2103      	movs	r1, #3
 80052ae:	0018      	movs	r0, r3
 80052b0:	f7ff ff7c 	bl	80051ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80052b4:	4b05      	ldr	r3, [pc, #20]	; (80052cc <SysTick_Config+0x44>)
 80052b6:	2200      	movs	r2, #0
 80052b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80052ba:	4b04      	ldr	r3, [pc, #16]	; (80052cc <SysTick_Config+0x44>)
 80052bc:	2207      	movs	r2, #7
 80052be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80052c0:	2300      	movs	r3, #0
}
 80052c2:	0018      	movs	r0, r3
 80052c4:	46bd      	mov	sp, r7
 80052c6:	b002      	add	sp, #8
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	46c0      	nop			; (mov r8, r8)
 80052cc:	e000e010 	.word	0xe000e010

080052d0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b084      	sub	sp, #16
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	60b9      	str	r1, [r7, #8]
 80052d8:	607a      	str	r2, [r7, #4]
 80052da:	210f      	movs	r1, #15
 80052dc:	187b      	adds	r3, r7, r1
 80052de:	1c02      	adds	r2, r0, #0
 80052e0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80052e2:	68ba      	ldr	r2, [r7, #8]
 80052e4:	187b      	adds	r3, r7, r1
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	b25b      	sxtb	r3, r3
 80052ea:	0011      	movs	r1, r2
 80052ec:	0018      	movs	r0, r3
 80052ee:	f7ff ff5d 	bl	80051ac <__NVIC_SetPriority>
}
 80052f2:	46c0      	nop			; (mov r8, r8)
 80052f4:	46bd      	mov	sp, r7
 80052f6:	b004      	add	sp, #16
 80052f8:	bd80      	pop	{r7, pc}

080052fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052fa:	b580      	push	{r7, lr}
 80052fc:	b082      	sub	sp, #8
 80052fe:	af00      	add	r7, sp, #0
 8005300:	0002      	movs	r2, r0
 8005302:	1dfb      	adds	r3, r7, #7
 8005304:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005306:	1dfb      	adds	r3, r7, #7
 8005308:	781b      	ldrb	r3, [r3, #0]
 800530a:	b25b      	sxtb	r3, r3
 800530c:	0018      	movs	r0, r3
 800530e:	f7ff ff33 	bl	8005178 <__NVIC_EnableIRQ>
}
 8005312:	46c0      	nop			; (mov r8, r8)
 8005314:	46bd      	mov	sp, r7
 8005316:	b002      	add	sp, #8
 8005318:	bd80      	pop	{r7, pc}

0800531a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800531a:	b580      	push	{r7, lr}
 800531c:	b082      	sub	sp, #8
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	0018      	movs	r0, r3
 8005326:	f7ff ffaf 	bl	8005288 <SysTick_Config>
 800532a:	0003      	movs	r3, r0
}
 800532c:	0018      	movs	r0, r3
 800532e:	46bd      	mov	sp, r7
 8005330:	b002      	add	sp, #8
 8005332:	bd80      	pop	{r7, pc}

08005334 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b082      	sub	sp, #8
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d101      	bne.n	8005346 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e077      	b.n	8005436 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a3d      	ldr	r2, [pc, #244]	; (8005440 <HAL_DMA_Init+0x10c>)
 800534c:	4694      	mov	ip, r2
 800534e:	4463      	add	r3, ip
 8005350:	2114      	movs	r1, #20
 8005352:	0018      	movs	r0, r3
 8005354:	f7fa fede 	bl	8000114 <__udivsi3>
 8005358:	0003      	movs	r3, r0
 800535a:	009a      	lsls	r2, r3, #2
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2225      	movs	r2, #37	; 0x25
 8005364:	2102      	movs	r1, #2
 8005366:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4934      	ldr	r1, [pc, #208]	; (8005444 <HAL_DMA_Init+0x110>)
 8005374:	400a      	ands	r2, r1
 8005376:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	6819      	ldr	r1, [r3, #0]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	689a      	ldr	r2, [r3, #8]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	431a      	orrs	r2, r3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	691b      	ldr	r3, [r3, #16]
 800538c:	431a      	orrs	r2, r3
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	695b      	ldr	r3, [r3, #20]
 8005392:	431a      	orrs	r2, r3
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	699b      	ldr	r3, [r3, #24]
 8005398:	431a      	orrs	r2, r3
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	69db      	ldr	r3, [r3, #28]
 800539e:	431a      	orrs	r2, r3
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6a1b      	ldr	r3, [r3, #32]
 80053a4:	431a      	orrs	r2, r3
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	430a      	orrs	r2, r1
 80053ac:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	0018      	movs	r0, r3
 80053b2:	f000 f9c1 	bl	8005738 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	689a      	ldr	r2, [r3, #8]
 80053ba:	2380      	movs	r3, #128	; 0x80
 80053bc:	01db      	lsls	r3, r3, #7
 80053be:	429a      	cmp	r2, r3
 80053c0:	d102      	bne.n	80053c8 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2200      	movs	r2, #0
 80053c6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	685a      	ldr	r2, [r3, #4]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053d0:	213f      	movs	r1, #63	; 0x3f
 80053d2:	400a      	ands	r2, r1
 80053d4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80053de:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d011      	beq.n	800540c <HAL_DMA_Init+0xd8>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	2b04      	cmp	r3, #4
 80053ee:	d80d      	bhi.n	800540c <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	0018      	movs	r0, r3
 80053f4:	f000 f9cc 	bl	8005790 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053fc:	2200      	movs	r2, #0
 80053fe:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005408:	605a      	str	r2, [r3, #4]
 800540a:	e008      	b.n	800541e <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2225      	movs	r2, #37	; 0x25
 8005428:	2101      	movs	r1, #1
 800542a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2224      	movs	r2, #36	; 0x24
 8005430:	2100      	movs	r1, #0
 8005432:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005434:	2300      	movs	r3, #0
}
 8005436:	0018      	movs	r0, r3
 8005438:	46bd      	mov	sp, r7
 800543a:	b002      	add	sp, #8
 800543c:	bd80      	pop	{r7, pc}
 800543e:	46c0      	nop			; (mov r8, r8)
 8005440:	bffdfff8 	.word	0xbffdfff8
 8005444:	ffff800f 	.word	0xffff800f

08005448 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b086      	sub	sp, #24
 800544c:	af00      	add	r7, sp, #0
 800544e:	60f8      	str	r0, [r7, #12]
 8005450:	60b9      	str	r1, [r7, #8]
 8005452:	607a      	str	r2, [r7, #4]
 8005454:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005456:	2317      	movs	r3, #23
 8005458:	18fb      	adds	r3, r7, r3
 800545a:	2200      	movs	r2, #0
 800545c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2224      	movs	r2, #36	; 0x24
 8005462:	5c9b      	ldrb	r3, [r3, r2]
 8005464:	2b01      	cmp	r3, #1
 8005466:	d101      	bne.n	800546c <HAL_DMA_Start_IT+0x24>
 8005468:	2302      	movs	r3, #2
 800546a:	e06f      	b.n	800554c <HAL_DMA_Start_IT+0x104>
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2224      	movs	r2, #36	; 0x24
 8005470:	2101      	movs	r1, #1
 8005472:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2225      	movs	r2, #37	; 0x25
 8005478:	5c9b      	ldrb	r3, [r3, r2]
 800547a:	b2db      	uxtb	r3, r3
 800547c:	2b01      	cmp	r3, #1
 800547e:	d157      	bne.n	8005530 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2225      	movs	r2, #37	; 0x25
 8005484:	2102      	movs	r1, #2
 8005486:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2200      	movs	r2, #0
 800548c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	2101      	movs	r1, #1
 800549a:	438a      	bics	r2, r1
 800549c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	68b9      	ldr	r1, [r7, #8]
 80054a4:	68f8      	ldr	r0, [r7, #12]
 80054a6:	f000 f907 	bl	80056b8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d008      	beq.n	80054c4 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	210e      	movs	r1, #14
 80054be:	430a      	orrs	r2, r1
 80054c0:	601a      	str	r2, [r3, #0]
 80054c2:	e00f      	b.n	80054e4 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	2104      	movs	r1, #4
 80054d0:	438a      	bics	r2, r1
 80054d2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	210a      	movs	r1, #10
 80054e0:	430a      	orrs	r2, r1
 80054e2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	2380      	movs	r3, #128	; 0x80
 80054ec:	025b      	lsls	r3, r3, #9
 80054ee:	4013      	ands	r3, r2
 80054f0:	d008      	beq.n	8005504 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054fc:	2180      	movs	r1, #128	; 0x80
 80054fe:	0049      	lsls	r1, r1, #1
 8005500:	430a      	orrs	r2, r1
 8005502:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005508:	2b00      	cmp	r3, #0
 800550a:	d008      	beq.n	800551e <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005516:	2180      	movs	r1, #128	; 0x80
 8005518:	0049      	lsls	r1, r1, #1
 800551a:	430a      	orrs	r2, r1
 800551c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	2101      	movs	r1, #1
 800552a:	430a      	orrs	r2, r1
 800552c:	601a      	str	r2, [r3, #0]
 800552e:	e00a      	b.n	8005546 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2280      	movs	r2, #128	; 0x80
 8005534:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2224      	movs	r2, #36	; 0x24
 800553a:	2100      	movs	r1, #0
 800553c:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 800553e:	2317      	movs	r3, #23
 8005540:	18fb      	adds	r3, r7, r3
 8005542:	2201      	movs	r2, #1
 8005544:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8005546:	2317      	movs	r3, #23
 8005548:	18fb      	adds	r3, r7, r3
 800554a:	781b      	ldrb	r3, [r3, #0]
}
 800554c:	0018      	movs	r0, r3
 800554e:	46bd      	mov	sp, r7
 8005550:	b006      	add	sp, #24
 8005552:	bd80      	pop	{r7, pc}

08005554 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b084      	sub	sp, #16
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 800555c:	4b55      	ldr	r3, [pc, #340]	; (80056b4 <HAL_DMA_IRQHandler+0x160>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800556e:	221c      	movs	r2, #28
 8005570:	4013      	ands	r3, r2
 8005572:	2204      	movs	r2, #4
 8005574:	409a      	lsls	r2, r3
 8005576:	0013      	movs	r3, r2
 8005578:	68fa      	ldr	r2, [r7, #12]
 800557a:	4013      	ands	r3, r2
 800557c:	d027      	beq.n	80055ce <HAL_DMA_IRQHandler+0x7a>
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	2204      	movs	r2, #4
 8005582:	4013      	ands	r3, r2
 8005584:	d023      	beq.n	80055ce <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	2220      	movs	r2, #32
 800558e:	4013      	ands	r3, r2
 8005590:	d107      	bne.n	80055a2 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	2104      	movs	r1, #4
 800559e:	438a      	bics	r2, r1
 80055a0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80055a2:	4b44      	ldr	r3, [pc, #272]	; (80056b4 <HAL_DMA_IRQHandler+0x160>)
 80055a4:	6859      	ldr	r1, [r3, #4]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055aa:	221c      	movs	r2, #28
 80055ac:	4013      	ands	r3, r2
 80055ae:	2204      	movs	r2, #4
 80055b0:	409a      	lsls	r2, r3
 80055b2:	4b40      	ldr	r3, [pc, #256]	; (80056b4 <HAL_DMA_IRQHandler+0x160>)
 80055b4:	430a      	orrs	r2, r1
 80055b6:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d100      	bne.n	80055c2 <HAL_DMA_IRQHandler+0x6e>
 80055c0:	e073      	b.n	80056aa <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	0010      	movs	r0, r2
 80055ca:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80055cc:	e06d      	b.n	80056aa <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d2:	221c      	movs	r2, #28
 80055d4:	4013      	ands	r3, r2
 80055d6:	2202      	movs	r2, #2
 80055d8:	409a      	lsls	r2, r3
 80055da:	0013      	movs	r3, r2
 80055dc:	68fa      	ldr	r2, [r7, #12]
 80055de:	4013      	ands	r3, r2
 80055e0:	d02e      	beq.n	8005640 <HAL_DMA_IRQHandler+0xec>
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	2202      	movs	r2, #2
 80055e6:	4013      	ands	r3, r2
 80055e8:	d02a      	beq.n	8005640 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	2220      	movs	r2, #32
 80055f2:	4013      	ands	r3, r2
 80055f4:	d10b      	bne.n	800560e <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	210a      	movs	r1, #10
 8005602:	438a      	bics	r2, r1
 8005604:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2225      	movs	r2, #37	; 0x25
 800560a:	2101      	movs	r1, #1
 800560c:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800560e:	4b29      	ldr	r3, [pc, #164]	; (80056b4 <HAL_DMA_IRQHandler+0x160>)
 8005610:	6859      	ldr	r1, [r3, #4]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005616:	221c      	movs	r2, #28
 8005618:	4013      	ands	r3, r2
 800561a:	2202      	movs	r2, #2
 800561c:	409a      	lsls	r2, r3
 800561e:	4b25      	ldr	r3, [pc, #148]	; (80056b4 <HAL_DMA_IRQHandler+0x160>)
 8005620:	430a      	orrs	r2, r1
 8005622:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2224      	movs	r2, #36	; 0x24
 8005628:	2100      	movs	r1, #0
 800562a:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005630:	2b00      	cmp	r3, #0
 8005632:	d03a      	beq.n	80056aa <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	0010      	movs	r0, r2
 800563c:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800563e:	e034      	b.n	80056aa <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005644:	221c      	movs	r2, #28
 8005646:	4013      	ands	r3, r2
 8005648:	2208      	movs	r2, #8
 800564a:	409a      	lsls	r2, r3
 800564c:	0013      	movs	r3, r2
 800564e:	68fa      	ldr	r2, [r7, #12]
 8005650:	4013      	ands	r3, r2
 8005652:	d02b      	beq.n	80056ac <HAL_DMA_IRQHandler+0x158>
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	2208      	movs	r2, #8
 8005658:	4013      	ands	r3, r2
 800565a:	d027      	beq.n	80056ac <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	210e      	movs	r1, #14
 8005668:	438a      	bics	r2, r1
 800566a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800566c:	4b11      	ldr	r3, [pc, #68]	; (80056b4 <HAL_DMA_IRQHandler+0x160>)
 800566e:	6859      	ldr	r1, [r3, #4]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005674:	221c      	movs	r2, #28
 8005676:	4013      	ands	r3, r2
 8005678:	2201      	movs	r2, #1
 800567a:	409a      	lsls	r2, r3
 800567c:	4b0d      	ldr	r3, [pc, #52]	; (80056b4 <HAL_DMA_IRQHandler+0x160>)
 800567e:	430a      	orrs	r2, r1
 8005680:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2201      	movs	r2, #1
 8005686:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2225      	movs	r2, #37	; 0x25
 800568c:	2101      	movs	r1, #1
 800568e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2224      	movs	r2, #36	; 0x24
 8005694:	2100      	movs	r1, #0
 8005696:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800569c:	2b00      	cmp	r3, #0
 800569e:	d005      	beq.n	80056ac <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056a4:	687a      	ldr	r2, [r7, #4]
 80056a6:	0010      	movs	r0, r2
 80056a8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80056aa:	46c0      	nop			; (mov r8, r8)
 80056ac:	46c0      	nop			; (mov r8, r8)
}
 80056ae:	46bd      	mov	sp, r7
 80056b0:	b004      	add	sp, #16
 80056b2:	bd80      	pop	{r7, pc}
 80056b4:	40020000 	.word	0x40020000

080056b8 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b084      	sub	sp, #16
 80056bc:	af00      	add	r7, sp, #0
 80056be:	60f8      	str	r0, [r7, #12]
 80056c0:	60b9      	str	r1, [r7, #8]
 80056c2:	607a      	str	r2, [r7, #4]
 80056c4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056ca:	68fa      	ldr	r2, [r7, #12]
 80056cc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80056ce:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d004      	beq.n	80056e2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056dc:	68fa      	ldr	r2, [r7, #12]
 80056de:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80056e0:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80056e2:	4b14      	ldr	r3, [pc, #80]	; (8005734 <DMA_SetConfig+0x7c>)
 80056e4:	6859      	ldr	r1, [r3, #4]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ea:	221c      	movs	r2, #28
 80056ec:	4013      	ands	r3, r2
 80056ee:	2201      	movs	r2, #1
 80056f0:	409a      	lsls	r2, r3
 80056f2:	4b10      	ldr	r3, [pc, #64]	; (8005734 <DMA_SetConfig+0x7c>)
 80056f4:	430a      	orrs	r2, r1
 80056f6:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	683a      	ldr	r2, [r7, #0]
 80056fe:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	2b10      	cmp	r3, #16
 8005706:	d108      	bne.n	800571a <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	68ba      	ldr	r2, [r7, #8]
 8005716:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005718:	e007      	b.n	800572a <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	68ba      	ldr	r2, [r7, #8]
 8005720:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	60da      	str	r2, [r3, #12]
}
 800572a:	46c0      	nop			; (mov r8, r8)
 800572c:	46bd      	mov	sp, r7
 800572e:	b004      	add	sp, #16
 8005730:	bd80      	pop	{r7, pc}
 8005732:	46c0      	nop			; (mov r8, r8)
 8005734:	40020000 	.word	0x40020000

08005738 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b084      	sub	sp, #16
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005744:	089b      	lsrs	r3, r3, #2
 8005746:	4a10      	ldr	r2, [pc, #64]	; (8005788 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8005748:	4694      	mov	ip, r2
 800574a:	4463      	add	r3, ip
 800574c:	009b      	lsls	r3, r3, #2
 800574e:	001a      	movs	r2, r3
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	001a      	movs	r2, r3
 800575a:	23ff      	movs	r3, #255	; 0xff
 800575c:	4013      	ands	r3, r2
 800575e:	3b08      	subs	r3, #8
 8005760:	2114      	movs	r1, #20
 8005762:	0018      	movs	r0, r3
 8005764:	f7fa fcd6 	bl	8000114 <__udivsi3>
 8005768:	0003      	movs	r3, r0
 800576a:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	4a07      	ldr	r2, [pc, #28]	; (800578c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8005770:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	221f      	movs	r2, #31
 8005776:	4013      	ands	r3, r2
 8005778:	2201      	movs	r2, #1
 800577a:	409a      	lsls	r2, r3
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8005780:	46c0      	nop			; (mov r8, r8)
 8005782:	46bd      	mov	sp, r7
 8005784:	b004      	add	sp, #16
 8005786:	bd80      	pop	{r7, pc}
 8005788:	10008200 	.word	0x10008200
 800578c:	40020880 	.word	0x40020880

08005790 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b084      	sub	sp, #16
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	223f      	movs	r2, #63	; 0x3f
 800579e:	4013      	ands	r3, r2
 80057a0:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	4a0a      	ldr	r2, [pc, #40]	; (80057d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80057a6:	4694      	mov	ip, r2
 80057a8:	4463      	add	r3, ip
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	001a      	movs	r2, r3
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4a07      	ldr	r2, [pc, #28]	; (80057d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80057b6:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	3b01      	subs	r3, #1
 80057bc:	2203      	movs	r2, #3
 80057be:	4013      	ands	r3, r2
 80057c0:	2201      	movs	r2, #1
 80057c2:	409a      	lsls	r2, r3
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	659a      	str	r2, [r3, #88]	; 0x58
}
 80057c8:	46c0      	nop			; (mov r8, r8)
 80057ca:	46bd      	mov	sp, r7
 80057cc:	b004      	add	sp, #16
 80057ce:	bd80      	pop	{r7, pc}
 80057d0:	1000823f 	.word	0x1000823f
 80057d4:	40020940 	.word	0x40020940

080057d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b086      	sub	sp, #24
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80057e2:	2300      	movs	r3, #0
 80057e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80057e6:	e147      	b.n	8005a78 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	2101      	movs	r1, #1
 80057ee:	697a      	ldr	r2, [r7, #20]
 80057f0:	4091      	lsls	r1, r2
 80057f2:	000a      	movs	r2, r1
 80057f4:	4013      	ands	r3, r2
 80057f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d100      	bne.n	8005800 <HAL_GPIO_Init+0x28>
 80057fe:	e138      	b.n	8005a72 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	2203      	movs	r2, #3
 8005806:	4013      	ands	r3, r2
 8005808:	2b01      	cmp	r3, #1
 800580a:	d005      	beq.n	8005818 <HAL_GPIO_Init+0x40>
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	2203      	movs	r2, #3
 8005812:	4013      	ands	r3, r2
 8005814:	2b02      	cmp	r3, #2
 8005816:	d130      	bne.n	800587a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	005b      	lsls	r3, r3, #1
 8005822:	2203      	movs	r2, #3
 8005824:	409a      	lsls	r2, r3
 8005826:	0013      	movs	r3, r2
 8005828:	43da      	mvns	r2, r3
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	4013      	ands	r3, r2
 800582e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	68da      	ldr	r2, [r3, #12]
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	005b      	lsls	r3, r3, #1
 8005838:	409a      	lsls	r2, r3
 800583a:	0013      	movs	r3, r2
 800583c:	693a      	ldr	r2, [r7, #16]
 800583e:	4313      	orrs	r3, r2
 8005840:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	693a      	ldr	r2, [r7, #16]
 8005846:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800584e:	2201      	movs	r2, #1
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	409a      	lsls	r2, r3
 8005854:	0013      	movs	r3, r2
 8005856:	43da      	mvns	r2, r3
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	4013      	ands	r3, r2
 800585c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	091b      	lsrs	r3, r3, #4
 8005864:	2201      	movs	r2, #1
 8005866:	401a      	ands	r2, r3
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	409a      	lsls	r2, r3
 800586c:	0013      	movs	r3, r2
 800586e:	693a      	ldr	r2, [r7, #16]
 8005870:	4313      	orrs	r3, r2
 8005872:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	693a      	ldr	r2, [r7, #16]
 8005878:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	2203      	movs	r2, #3
 8005880:	4013      	ands	r3, r2
 8005882:	2b03      	cmp	r3, #3
 8005884:	d017      	beq.n	80058b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	005b      	lsls	r3, r3, #1
 8005890:	2203      	movs	r2, #3
 8005892:	409a      	lsls	r2, r3
 8005894:	0013      	movs	r3, r2
 8005896:	43da      	mvns	r2, r3
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	4013      	ands	r3, r2
 800589c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	689a      	ldr	r2, [r3, #8]
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	005b      	lsls	r3, r3, #1
 80058a6:	409a      	lsls	r2, r3
 80058a8:	0013      	movs	r3, r2
 80058aa:	693a      	ldr	r2, [r7, #16]
 80058ac:	4313      	orrs	r3, r2
 80058ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	693a      	ldr	r2, [r7, #16]
 80058b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	2203      	movs	r2, #3
 80058bc:	4013      	ands	r3, r2
 80058be:	2b02      	cmp	r3, #2
 80058c0:	d123      	bne.n	800590a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	08da      	lsrs	r2, r3, #3
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	3208      	adds	r2, #8
 80058ca:	0092      	lsls	r2, r2, #2
 80058cc:	58d3      	ldr	r3, [r2, r3]
 80058ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	2207      	movs	r2, #7
 80058d4:	4013      	ands	r3, r2
 80058d6:	009b      	lsls	r3, r3, #2
 80058d8:	220f      	movs	r2, #15
 80058da:	409a      	lsls	r2, r3
 80058dc:	0013      	movs	r3, r2
 80058de:	43da      	mvns	r2, r3
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	4013      	ands	r3, r2
 80058e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	691a      	ldr	r2, [r3, #16]
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	2107      	movs	r1, #7
 80058ee:	400b      	ands	r3, r1
 80058f0:	009b      	lsls	r3, r3, #2
 80058f2:	409a      	lsls	r2, r3
 80058f4:	0013      	movs	r3, r2
 80058f6:	693a      	ldr	r2, [r7, #16]
 80058f8:	4313      	orrs	r3, r2
 80058fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	08da      	lsrs	r2, r3, #3
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	3208      	adds	r2, #8
 8005904:	0092      	lsls	r2, r2, #2
 8005906:	6939      	ldr	r1, [r7, #16]
 8005908:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	005b      	lsls	r3, r3, #1
 8005914:	2203      	movs	r2, #3
 8005916:	409a      	lsls	r2, r3
 8005918:	0013      	movs	r3, r2
 800591a:	43da      	mvns	r2, r3
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	4013      	ands	r3, r2
 8005920:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	2203      	movs	r2, #3
 8005928:	401a      	ands	r2, r3
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	005b      	lsls	r3, r3, #1
 800592e:	409a      	lsls	r2, r3
 8005930:	0013      	movs	r3, r2
 8005932:	693a      	ldr	r2, [r7, #16]
 8005934:	4313      	orrs	r3, r2
 8005936:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	693a      	ldr	r2, [r7, #16]
 800593c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	685a      	ldr	r2, [r3, #4]
 8005942:	23c0      	movs	r3, #192	; 0xc0
 8005944:	029b      	lsls	r3, r3, #10
 8005946:	4013      	ands	r3, r2
 8005948:	d100      	bne.n	800594c <HAL_GPIO_Init+0x174>
 800594a:	e092      	b.n	8005a72 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800594c:	4a50      	ldr	r2, [pc, #320]	; (8005a90 <HAL_GPIO_Init+0x2b8>)
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	089b      	lsrs	r3, r3, #2
 8005952:	3318      	adds	r3, #24
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	589b      	ldr	r3, [r3, r2]
 8005958:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	2203      	movs	r2, #3
 800595e:	4013      	ands	r3, r2
 8005960:	00db      	lsls	r3, r3, #3
 8005962:	220f      	movs	r2, #15
 8005964:	409a      	lsls	r2, r3
 8005966:	0013      	movs	r3, r2
 8005968:	43da      	mvns	r2, r3
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	4013      	ands	r3, r2
 800596e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8005970:	687a      	ldr	r2, [r7, #4]
 8005972:	23a0      	movs	r3, #160	; 0xa0
 8005974:	05db      	lsls	r3, r3, #23
 8005976:	429a      	cmp	r2, r3
 8005978:	d013      	beq.n	80059a2 <HAL_GPIO_Init+0x1ca>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4a45      	ldr	r2, [pc, #276]	; (8005a94 <HAL_GPIO_Init+0x2bc>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d00d      	beq.n	800599e <HAL_GPIO_Init+0x1c6>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4a44      	ldr	r2, [pc, #272]	; (8005a98 <HAL_GPIO_Init+0x2c0>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d007      	beq.n	800599a <HAL_GPIO_Init+0x1c2>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4a43      	ldr	r2, [pc, #268]	; (8005a9c <HAL_GPIO_Init+0x2c4>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d101      	bne.n	8005996 <HAL_GPIO_Init+0x1be>
 8005992:	2303      	movs	r3, #3
 8005994:	e006      	b.n	80059a4 <HAL_GPIO_Init+0x1cc>
 8005996:	2305      	movs	r3, #5
 8005998:	e004      	b.n	80059a4 <HAL_GPIO_Init+0x1cc>
 800599a:	2302      	movs	r3, #2
 800599c:	e002      	b.n	80059a4 <HAL_GPIO_Init+0x1cc>
 800599e:	2301      	movs	r3, #1
 80059a0:	e000      	b.n	80059a4 <HAL_GPIO_Init+0x1cc>
 80059a2:	2300      	movs	r3, #0
 80059a4:	697a      	ldr	r2, [r7, #20]
 80059a6:	2103      	movs	r1, #3
 80059a8:	400a      	ands	r2, r1
 80059aa:	00d2      	lsls	r2, r2, #3
 80059ac:	4093      	lsls	r3, r2
 80059ae:	693a      	ldr	r2, [r7, #16]
 80059b0:	4313      	orrs	r3, r2
 80059b2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80059b4:	4936      	ldr	r1, [pc, #216]	; (8005a90 <HAL_GPIO_Init+0x2b8>)
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	089b      	lsrs	r3, r3, #2
 80059ba:	3318      	adds	r3, #24
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	693a      	ldr	r2, [r7, #16]
 80059c0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80059c2:	4b33      	ldr	r3, [pc, #204]	; (8005a90 <HAL_GPIO_Init+0x2b8>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	43da      	mvns	r2, r3
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	4013      	ands	r3, r2
 80059d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	685a      	ldr	r2, [r3, #4]
 80059d6:	2380      	movs	r3, #128	; 0x80
 80059d8:	035b      	lsls	r3, r3, #13
 80059da:	4013      	ands	r3, r2
 80059dc:	d003      	beq.n	80059e6 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80059de:	693a      	ldr	r2, [r7, #16]
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80059e6:	4b2a      	ldr	r3, [pc, #168]	; (8005a90 <HAL_GPIO_Init+0x2b8>)
 80059e8:	693a      	ldr	r2, [r7, #16]
 80059ea:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80059ec:	4b28      	ldr	r3, [pc, #160]	; (8005a90 <HAL_GPIO_Init+0x2b8>)
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	43da      	mvns	r2, r3
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	4013      	ands	r3, r2
 80059fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	685a      	ldr	r2, [r3, #4]
 8005a00:	2380      	movs	r3, #128	; 0x80
 8005a02:	039b      	lsls	r3, r3, #14
 8005a04:	4013      	ands	r3, r2
 8005a06:	d003      	beq.n	8005a10 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8005a08:	693a      	ldr	r2, [r7, #16]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005a10:	4b1f      	ldr	r3, [pc, #124]	; (8005a90 <HAL_GPIO_Init+0x2b8>)
 8005a12:	693a      	ldr	r2, [r7, #16]
 8005a14:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005a16:	4a1e      	ldr	r2, [pc, #120]	; (8005a90 <HAL_GPIO_Init+0x2b8>)
 8005a18:	2384      	movs	r3, #132	; 0x84
 8005a1a:	58d3      	ldr	r3, [r2, r3]
 8005a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	43da      	mvns	r2, r3
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	4013      	ands	r3, r2
 8005a26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	685a      	ldr	r2, [r3, #4]
 8005a2c:	2380      	movs	r3, #128	; 0x80
 8005a2e:	029b      	lsls	r3, r3, #10
 8005a30:	4013      	ands	r3, r2
 8005a32:	d003      	beq.n	8005a3c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8005a34:	693a      	ldr	r2, [r7, #16]
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005a3c:	4914      	ldr	r1, [pc, #80]	; (8005a90 <HAL_GPIO_Init+0x2b8>)
 8005a3e:	2284      	movs	r2, #132	; 0x84
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8005a44:	4a12      	ldr	r2, [pc, #72]	; (8005a90 <HAL_GPIO_Init+0x2b8>)
 8005a46:	2380      	movs	r3, #128	; 0x80
 8005a48:	58d3      	ldr	r3, [r2, r3]
 8005a4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	43da      	mvns	r2, r3
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	4013      	ands	r3, r2
 8005a54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	685a      	ldr	r2, [r3, #4]
 8005a5a:	2380      	movs	r3, #128	; 0x80
 8005a5c:	025b      	lsls	r3, r3, #9
 8005a5e:	4013      	ands	r3, r2
 8005a60:	d003      	beq.n	8005a6a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8005a62:	693a      	ldr	r2, [r7, #16]
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005a6a:	4909      	ldr	r1, [pc, #36]	; (8005a90 <HAL_GPIO_Init+0x2b8>)
 8005a6c:	2280      	movs	r2, #128	; 0x80
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	3301      	adds	r3, #1
 8005a76:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	40da      	lsrs	r2, r3
 8005a80:	1e13      	subs	r3, r2, #0
 8005a82:	d000      	beq.n	8005a86 <HAL_GPIO_Init+0x2ae>
 8005a84:	e6b0      	b.n	80057e8 <HAL_GPIO_Init+0x10>
  }
}
 8005a86:	46c0      	nop			; (mov r8, r8)
 8005a88:	46c0      	nop			; (mov r8, r8)
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	b006      	add	sp, #24
 8005a8e:	bd80      	pop	{r7, pc}
 8005a90:	40021800 	.word	0x40021800
 8005a94:	50000400 	.word	0x50000400
 8005a98:	50000800 	.word	0x50000800
 8005a9c:	50000c00 	.word	0x50000c00

08005aa0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b082      	sub	sp, #8
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	0008      	movs	r0, r1
 8005aaa:	0011      	movs	r1, r2
 8005aac:	1cbb      	adds	r3, r7, #2
 8005aae:	1c02      	adds	r2, r0, #0
 8005ab0:	801a      	strh	r2, [r3, #0]
 8005ab2:	1c7b      	adds	r3, r7, #1
 8005ab4:	1c0a      	adds	r2, r1, #0
 8005ab6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005ab8:	1c7b      	adds	r3, r7, #1
 8005aba:	781b      	ldrb	r3, [r3, #0]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d004      	beq.n	8005aca <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005ac0:	1cbb      	adds	r3, r7, #2
 8005ac2:	881a      	ldrh	r2, [r3, #0]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005ac8:	e003      	b.n	8005ad2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005aca:	1cbb      	adds	r3, r7, #2
 8005acc:	881a      	ldrh	r2, [r3, #0]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005ad2:	46c0      	nop			; (mov r8, r8)
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	b002      	add	sp, #8
 8005ad8:	bd80      	pop	{r7, pc}
	...

08005adc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b084      	sub	sp, #16
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8005ae4:	4b19      	ldr	r3, [pc, #100]	; (8005b4c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a19      	ldr	r2, [pc, #100]	; (8005b50 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8005aea:	4013      	ands	r3, r2
 8005aec:	0019      	movs	r1, r3
 8005aee:	4b17      	ldr	r3, [pc, #92]	; (8005b4c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	430a      	orrs	r2, r1
 8005af4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	2380      	movs	r3, #128	; 0x80
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d11f      	bne.n	8005b40 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8005b00:	4b14      	ldr	r3, [pc, #80]	; (8005b54 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	0013      	movs	r3, r2
 8005b06:	005b      	lsls	r3, r3, #1
 8005b08:	189b      	adds	r3, r3, r2
 8005b0a:	005b      	lsls	r3, r3, #1
 8005b0c:	4912      	ldr	r1, [pc, #72]	; (8005b58 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8005b0e:	0018      	movs	r0, r3
 8005b10:	f7fa fb00 	bl	8000114 <__udivsi3>
 8005b14:	0003      	movs	r3, r0
 8005b16:	3301      	adds	r3, #1
 8005b18:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005b1a:	e008      	b.n	8005b2e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d003      	beq.n	8005b2a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	3b01      	subs	r3, #1
 8005b26:	60fb      	str	r3, [r7, #12]
 8005b28:	e001      	b.n	8005b2e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8005b2a:	2303      	movs	r3, #3
 8005b2c:	e009      	b.n	8005b42 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005b2e:	4b07      	ldr	r3, [pc, #28]	; (8005b4c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005b30:	695a      	ldr	r2, [r3, #20]
 8005b32:	2380      	movs	r3, #128	; 0x80
 8005b34:	00db      	lsls	r3, r3, #3
 8005b36:	401a      	ands	r2, r3
 8005b38:	2380      	movs	r3, #128	; 0x80
 8005b3a:	00db      	lsls	r3, r3, #3
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d0ed      	beq.n	8005b1c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8005b40:	2300      	movs	r3, #0
}
 8005b42:	0018      	movs	r0, r3
 8005b44:	46bd      	mov	sp, r7
 8005b46:	b004      	add	sp, #16
 8005b48:	bd80      	pop	{r7, pc}
 8005b4a:	46c0      	nop			; (mov r8, r8)
 8005b4c:	40007000 	.word	0x40007000
 8005b50:	fffff9ff 	.word	0xfffff9ff
 8005b54:	20000000 	.word	0x20000000
 8005b58:	000f4240 	.word	0x000f4240

08005b5c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b088      	sub	sp, #32
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d101      	bne.n	8005b6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e2f3      	b.n	8006156 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	2201      	movs	r2, #1
 8005b74:	4013      	ands	r3, r2
 8005b76:	d100      	bne.n	8005b7a <HAL_RCC_OscConfig+0x1e>
 8005b78:	e07c      	b.n	8005c74 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b7a:	4bc3      	ldr	r3, [pc, #780]	; (8005e88 <HAL_RCC_OscConfig+0x32c>)
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	2238      	movs	r2, #56	; 0x38
 8005b80:	4013      	ands	r3, r2
 8005b82:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005b84:	4bc0      	ldr	r3, [pc, #768]	; (8005e88 <HAL_RCC_OscConfig+0x32c>)
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	2203      	movs	r2, #3
 8005b8a:	4013      	ands	r3, r2
 8005b8c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8005b8e:	69bb      	ldr	r3, [r7, #24]
 8005b90:	2b10      	cmp	r3, #16
 8005b92:	d102      	bne.n	8005b9a <HAL_RCC_OscConfig+0x3e>
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	2b03      	cmp	r3, #3
 8005b98:	d002      	beq.n	8005ba0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8005b9a:	69bb      	ldr	r3, [r7, #24]
 8005b9c:	2b08      	cmp	r3, #8
 8005b9e:	d10b      	bne.n	8005bb8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ba0:	4bb9      	ldr	r3, [pc, #740]	; (8005e88 <HAL_RCC_OscConfig+0x32c>)
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	2380      	movs	r3, #128	; 0x80
 8005ba6:	029b      	lsls	r3, r3, #10
 8005ba8:	4013      	ands	r3, r2
 8005baa:	d062      	beq.n	8005c72 <HAL_RCC_OscConfig+0x116>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d15e      	bne.n	8005c72 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	e2ce      	b.n	8006156 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	685a      	ldr	r2, [r3, #4]
 8005bbc:	2380      	movs	r3, #128	; 0x80
 8005bbe:	025b      	lsls	r3, r3, #9
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d107      	bne.n	8005bd4 <HAL_RCC_OscConfig+0x78>
 8005bc4:	4bb0      	ldr	r3, [pc, #704]	; (8005e88 <HAL_RCC_OscConfig+0x32c>)
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	4baf      	ldr	r3, [pc, #700]	; (8005e88 <HAL_RCC_OscConfig+0x32c>)
 8005bca:	2180      	movs	r1, #128	; 0x80
 8005bcc:	0249      	lsls	r1, r1, #9
 8005bce:	430a      	orrs	r2, r1
 8005bd0:	601a      	str	r2, [r3, #0]
 8005bd2:	e020      	b.n	8005c16 <HAL_RCC_OscConfig+0xba>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	685a      	ldr	r2, [r3, #4]
 8005bd8:	23a0      	movs	r3, #160	; 0xa0
 8005bda:	02db      	lsls	r3, r3, #11
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d10e      	bne.n	8005bfe <HAL_RCC_OscConfig+0xa2>
 8005be0:	4ba9      	ldr	r3, [pc, #676]	; (8005e88 <HAL_RCC_OscConfig+0x32c>)
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	4ba8      	ldr	r3, [pc, #672]	; (8005e88 <HAL_RCC_OscConfig+0x32c>)
 8005be6:	2180      	movs	r1, #128	; 0x80
 8005be8:	02c9      	lsls	r1, r1, #11
 8005bea:	430a      	orrs	r2, r1
 8005bec:	601a      	str	r2, [r3, #0]
 8005bee:	4ba6      	ldr	r3, [pc, #664]	; (8005e88 <HAL_RCC_OscConfig+0x32c>)
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	4ba5      	ldr	r3, [pc, #660]	; (8005e88 <HAL_RCC_OscConfig+0x32c>)
 8005bf4:	2180      	movs	r1, #128	; 0x80
 8005bf6:	0249      	lsls	r1, r1, #9
 8005bf8:	430a      	orrs	r2, r1
 8005bfa:	601a      	str	r2, [r3, #0]
 8005bfc:	e00b      	b.n	8005c16 <HAL_RCC_OscConfig+0xba>
 8005bfe:	4ba2      	ldr	r3, [pc, #648]	; (8005e88 <HAL_RCC_OscConfig+0x32c>)
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	4ba1      	ldr	r3, [pc, #644]	; (8005e88 <HAL_RCC_OscConfig+0x32c>)
 8005c04:	49a1      	ldr	r1, [pc, #644]	; (8005e8c <HAL_RCC_OscConfig+0x330>)
 8005c06:	400a      	ands	r2, r1
 8005c08:	601a      	str	r2, [r3, #0]
 8005c0a:	4b9f      	ldr	r3, [pc, #636]	; (8005e88 <HAL_RCC_OscConfig+0x32c>)
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	4b9e      	ldr	r3, [pc, #632]	; (8005e88 <HAL_RCC_OscConfig+0x32c>)
 8005c10:	499f      	ldr	r1, [pc, #636]	; (8005e90 <HAL_RCC_OscConfig+0x334>)
 8005c12:	400a      	ands	r2, r1
 8005c14:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d014      	beq.n	8005c48 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c1e:	f7fe f8c9 	bl	8003db4 <HAL_GetTick>
 8005c22:	0003      	movs	r3, r0
 8005c24:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c26:	e008      	b.n	8005c3a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c28:	f7fe f8c4 	bl	8003db4 <HAL_GetTick>
 8005c2c:	0002      	movs	r2, r0
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	1ad3      	subs	r3, r2, r3
 8005c32:	2b64      	cmp	r3, #100	; 0x64
 8005c34:	d901      	bls.n	8005c3a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8005c36:	2303      	movs	r3, #3
 8005c38:	e28d      	b.n	8006156 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c3a:	4b93      	ldr	r3, [pc, #588]	; (8005e88 <HAL_RCC_OscConfig+0x32c>)
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	2380      	movs	r3, #128	; 0x80
 8005c40:	029b      	lsls	r3, r3, #10
 8005c42:	4013      	ands	r3, r2
 8005c44:	d0f0      	beq.n	8005c28 <HAL_RCC_OscConfig+0xcc>
 8005c46:	e015      	b.n	8005c74 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c48:	f7fe f8b4 	bl	8003db4 <HAL_GetTick>
 8005c4c:	0003      	movs	r3, r0
 8005c4e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005c50:	e008      	b.n	8005c64 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c52:	f7fe f8af 	bl	8003db4 <HAL_GetTick>
 8005c56:	0002      	movs	r2, r0
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	1ad3      	subs	r3, r2, r3
 8005c5c:	2b64      	cmp	r3, #100	; 0x64
 8005c5e:	d901      	bls.n	8005c64 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005c60:	2303      	movs	r3, #3
 8005c62:	e278      	b.n	8006156 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005c64:	4b88      	ldr	r3, [pc, #544]	; (8005e88 <HAL_RCC_OscConfig+0x32c>)
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	2380      	movs	r3, #128	; 0x80
 8005c6a:	029b      	lsls	r3, r3, #10
 8005c6c:	4013      	ands	r3, r2
 8005c6e:	d1f0      	bne.n	8005c52 <HAL_RCC_OscConfig+0xf6>
 8005c70:	e000      	b.n	8005c74 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c72:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	2202      	movs	r2, #2
 8005c7a:	4013      	ands	r3, r2
 8005c7c:	d100      	bne.n	8005c80 <HAL_RCC_OscConfig+0x124>
 8005c7e:	e099      	b.n	8005db4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c80:	4b81      	ldr	r3, [pc, #516]	; (8005e88 <HAL_RCC_OscConfig+0x32c>)
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	2238      	movs	r2, #56	; 0x38
 8005c86:	4013      	ands	r3, r2
 8005c88:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005c8a:	4b7f      	ldr	r3, [pc, #508]	; (8005e88 <HAL_RCC_OscConfig+0x32c>)
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	2203      	movs	r2, #3
 8005c90:	4013      	ands	r3, r2
 8005c92:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8005c94:	69bb      	ldr	r3, [r7, #24]
 8005c96:	2b10      	cmp	r3, #16
 8005c98:	d102      	bne.n	8005ca0 <HAL_RCC_OscConfig+0x144>
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	2b02      	cmp	r3, #2
 8005c9e:	d002      	beq.n	8005ca6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8005ca0:	69bb      	ldr	r3, [r7, #24]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d135      	bne.n	8005d12 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ca6:	4b78      	ldr	r3, [pc, #480]	; (8005e88 <HAL_RCC_OscConfig+0x32c>)
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	2380      	movs	r3, #128	; 0x80
 8005cac:	00db      	lsls	r3, r3, #3
 8005cae:	4013      	ands	r3, r2
 8005cb0:	d005      	beq.n	8005cbe <HAL_RCC_OscConfig+0x162>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	68db      	ldr	r3, [r3, #12]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d101      	bne.n	8005cbe <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e24b      	b.n	8006156 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cbe:	4b72      	ldr	r3, [pc, #456]	; (8005e88 <HAL_RCC_OscConfig+0x32c>)
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	4a74      	ldr	r2, [pc, #464]	; (8005e94 <HAL_RCC_OscConfig+0x338>)
 8005cc4:	4013      	ands	r3, r2
 8005cc6:	0019      	movs	r1, r3
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	695b      	ldr	r3, [r3, #20]
 8005ccc:	021a      	lsls	r2, r3, #8
 8005cce:	4b6e      	ldr	r3, [pc, #440]	; (8005e88 <HAL_RCC_OscConfig+0x32c>)
 8005cd0:	430a      	orrs	r2, r1
 8005cd2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005cd4:	69bb      	ldr	r3, [r7, #24]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d112      	bne.n	8005d00 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005cda:	4b6b      	ldr	r3, [pc, #428]	; (8005e88 <HAL_RCC_OscConfig+0x32c>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a6e      	ldr	r2, [pc, #440]	; (8005e98 <HAL_RCC_OscConfig+0x33c>)
 8005ce0:	4013      	ands	r3, r2
 8005ce2:	0019      	movs	r1, r3
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	691a      	ldr	r2, [r3, #16]
 8005ce8:	4b67      	ldr	r3, [pc, #412]	; (8005e88 <HAL_RCC_OscConfig+0x32c>)
 8005cea:	430a      	orrs	r2, r1
 8005cec:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8005cee:	4b66      	ldr	r3, [pc, #408]	; (8005e88 <HAL_RCC_OscConfig+0x32c>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	0adb      	lsrs	r3, r3, #11
 8005cf4:	2207      	movs	r2, #7
 8005cf6:	4013      	ands	r3, r2
 8005cf8:	4a68      	ldr	r2, [pc, #416]	; (8005e9c <HAL_RCC_OscConfig+0x340>)
 8005cfa:	40da      	lsrs	r2, r3
 8005cfc:	4b68      	ldr	r3, [pc, #416]	; (8005ea0 <HAL_RCC_OscConfig+0x344>)
 8005cfe:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005d00:	4b68      	ldr	r3, [pc, #416]	; (8005ea4 <HAL_RCC_OscConfig+0x348>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	0018      	movs	r0, r3
 8005d06:	f7fd fff9 	bl	8003cfc <HAL_InitTick>
 8005d0a:	1e03      	subs	r3, r0, #0
 8005d0c:	d051      	beq.n	8005db2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e221      	b.n	8006156 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	68db      	ldr	r3, [r3, #12]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d030      	beq.n	8005d7c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005d1a:	4b5b      	ldr	r3, [pc, #364]	; (8005e88 <HAL_RCC_OscConfig+0x32c>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a5e      	ldr	r2, [pc, #376]	; (8005e98 <HAL_RCC_OscConfig+0x33c>)
 8005d20:	4013      	ands	r3, r2
 8005d22:	0019      	movs	r1, r3
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	691a      	ldr	r2, [r3, #16]
 8005d28:	4b57      	ldr	r3, [pc, #348]	; (8005e88 <HAL_RCC_OscConfig+0x32c>)
 8005d2a:	430a      	orrs	r2, r1
 8005d2c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8005d2e:	4b56      	ldr	r3, [pc, #344]	; (8005e88 <HAL_RCC_OscConfig+0x32c>)
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	4b55      	ldr	r3, [pc, #340]	; (8005e88 <HAL_RCC_OscConfig+0x32c>)
 8005d34:	2180      	movs	r1, #128	; 0x80
 8005d36:	0049      	lsls	r1, r1, #1
 8005d38:	430a      	orrs	r2, r1
 8005d3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d3c:	f7fe f83a 	bl	8003db4 <HAL_GetTick>
 8005d40:	0003      	movs	r3, r0
 8005d42:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d44:	e008      	b.n	8005d58 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d46:	f7fe f835 	bl	8003db4 <HAL_GetTick>
 8005d4a:	0002      	movs	r2, r0
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	1ad3      	subs	r3, r2, r3
 8005d50:	2b02      	cmp	r3, #2
 8005d52:	d901      	bls.n	8005d58 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005d54:	2303      	movs	r3, #3
 8005d56:	e1fe      	b.n	8006156 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d58:	4b4b      	ldr	r3, [pc, #300]	; (8005e88 <HAL_RCC_OscConfig+0x32c>)
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	2380      	movs	r3, #128	; 0x80
 8005d5e:	00db      	lsls	r3, r3, #3
 8005d60:	4013      	ands	r3, r2
 8005d62:	d0f0      	beq.n	8005d46 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d64:	4b48      	ldr	r3, [pc, #288]	; (8005e88 <HAL_RCC_OscConfig+0x32c>)
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	4a4a      	ldr	r2, [pc, #296]	; (8005e94 <HAL_RCC_OscConfig+0x338>)
 8005d6a:	4013      	ands	r3, r2
 8005d6c:	0019      	movs	r1, r3
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	695b      	ldr	r3, [r3, #20]
 8005d72:	021a      	lsls	r2, r3, #8
 8005d74:	4b44      	ldr	r3, [pc, #272]	; (8005e88 <HAL_RCC_OscConfig+0x32c>)
 8005d76:	430a      	orrs	r2, r1
 8005d78:	605a      	str	r2, [r3, #4]
 8005d7a:	e01b      	b.n	8005db4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8005d7c:	4b42      	ldr	r3, [pc, #264]	; (8005e88 <HAL_RCC_OscConfig+0x32c>)
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	4b41      	ldr	r3, [pc, #260]	; (8005e88 <HAL_RCC_OscConfig+0x32c>)
 8005d82:	4949      	ldr	r1, [pc, #292]	; (8005ea8 <HAL_RCC_OscConfig+0x34c>)
 8005d84:	400a      	ands	r2, r1
 8005d86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d88:	f7fe f814 	bl	8003db4 <HAL_GetTick>
 8005d8c:	0003      	movs	r3, r0
 8005d8e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005d90:	e008      	b.n	8005da4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d92:	f7fe f80f 	bl	8003db4 <HAL_GetTick>
 8005d96:	0002      	movs	r2, r0
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	1ad3      	subs	r3, r2, r3
 8005d9c:	2b02      	cmp	r3, #2
 8005d9e:	d901      	bls.n	8005da4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005da0:	2303      	movs	r3, #3
 8005da2:	e1d8      	b.n	8006156 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005da4:	4b38      	ldr	r3, [pc, #224]	; (8005e88 <HAL_RCC_OscConfig+0x32c>)
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	2380      	movs	r3, #128	; 0x80
 8005daa:	00db      	lsls	r3, r3, #3
 8005dac:	4013      	ands	r3, r2
 8005dae:	d1f0      	bne.n	8005d92 <HAL_RCC_OscConfig+0x236>
 8005db0:	e000      	b.n	8005db4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005db2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	2208      	movs	r2, #8
 8005dba:	4013      	ands	r3, r2
 8005dbc:	d047      	beq.n	8005e4e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005dbe:	4b32      	ldr	r3, [pc, #200]	; (8005e88 <HAL_RCC_OscConfig+0x32c>)
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	2238      	movs	r2, #56	; 0x38
 8005dc4:	4013      	ands	r3, r2
 8005dc6:	2b18      	cmp	r3, #24
 8005dc8:	d10a      	bne.n	8005de0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8005dca:	4b2f      	ldr	r3, [pc, #188]	; (8005e88 <HAL_RCC_OscConfig+0x32c>)
 8005dcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dce:	2202      	movs	r2, #2
 8005dd0:	4013      	ands	r3, r2
 8005dd2:	d03c      	beq.n	8005e4e <HAL_RCC_OscConfig+0x2f2>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	699b      	ldr	r3, [r3, #24]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d138      	bne.n	8005e4e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e1ba      	b.n	8006156 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	699b      	ldr	r3, [r3, #24]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d019      	beq.n	8005e1c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8005de8:	4b27      	ldr	r3, [pc, #156]	; (8005e88 <HAL_RCC_OscConfig+0x32c>)
 8005dea:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005dec:	4b26      	ldr	r3, [pc, #152]	; (8005e88 <HAL_RCC_OscConfig+0x32c>)
 8005dee:	2101      	movs	r1, #1
 8005df0:	430a      	orrs	r2, r1
 8005df2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005df4:	f7fd ffde 	bl	8003db4 <HAL_GetTick>
 8005df8:	0003      	movs	r3, r0
 8005dfa:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005dfc:	e008      	b.n	8005e10 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005dfe:	f7fd ffd9 	bl	8003db4 <HAL_GetTick>
 8005e02:	0002      	movs	r2, r0
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	1ad3      	subs	r3, r2, r3
 8005e08:	2b02      	cmp	r3, #2
 8005e0a:	d901      	bls.n	8005e10 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8005e0c:	2303      	movs	r3, #3
 8005e0e:	e1a2      	b.n	8006156 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005e10:	4b1d      	ldr	r3, [pc, #116]	; (8005e88 <HAL_RCC_OscConfig+0x32c>)
 8005e12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e14:	2202      	movs	r2, #2
 8005e16:	4013      	ands	r3, r2
 8005e18:	d0f1      	beq.n	8005dfe <HAL_RCC_OscConfig+0x2a2>
 8005e1a:	e018      	b.n	8005e4e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8005e1c:	4b1a      	ldr	r3, [pc, #104]	; (8005e88 <HAL_RCC_OscConfig+0x32c>)
 8005e1e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005e20:	4b19      	ldr	r3, [pc, #100]	; (8005e88 <HAL_RCC_OscConfig+0x32c>)
 8005e22:	2101      	movs	r1, #1
 8005e24:	438a      	bics	r2, r1
 8005e26:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e28:	f7fd ffc4 	bl	8003db4 <HAL_GetTick>
 8005e2c:	0003      	movs	r3, r0
 8005e2e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005e30:	e008      	b.n	8005e44 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e32:	f7fd ffbf 	bl	8003db4 <HAL_GetTick>
 8005e36:	0002      	movs	r2, r0
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	1ad3      	subs	r3, r2, r3
 8005e3c:	2b02      	cmp	r3, #2
 8005e3e:	d901      	bls.n	8005e44 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8005e40:	2303      	movs	r3, #3
 8005e42:	e188      	b.n	8006156 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005e44:	4b10      	ldr	r3, [pc, #64]	; (8005e88 <HAL_RCC_OscConfig+0x32c>)
 8005e46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e48:	2202      	movs	r2, #2
 8005e4a:	4013      	ands	r3, r2
 8005e4c:	d1f1      	bne.n	8005e32 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	2204      	movs	r2, #4
 8005e54:	4013      	ands	r3, r2
 8005e56:	d100      	bne.n	8005e5a <HAL_RCC_OscConfig+0x2fe>
 8005e58:	e0c6      	b.n	8005fe8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e5a:	231f      	movs	r3, #31
 8005e5c:	18fb      	adds	r3, r7, r3
 8005e5e:	2200      	movs	r2, #0
 8005e60:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005e62:	4b09      	ldr	r3, [pc, #36]	; (8005e88 <HAL_RCC_OscConfig+0x32c>)
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	2238      	movs	r2, #56	; 0x38
 8005e68:	4013      	ands	r3, r2
 8005e6a:	2b20      	cmp	r3, #32
 8005e6c:	d11e      	bne.n	8005eac <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8005e6e:	4b06      	ldr	r3, [pc, #24]	; (8005e88 <HAL_RCC_OscConfig+0x32c>)
 8005e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e72:	2202      	movs	r2, #2
 8005e74:	4013      	ands	r3, r2
 8005e76:	d100      	bne.n	8005e7a <HAL_RCC_OscConfig+0x31e>
 8005e78:	e0b6      	b.n	8005fe8 <HAL_RCC_OscConfig+0x48c>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d000      	beq.n	8005e84 <HAL_RCC_OscConfig+0x328>
 8005e82:	e0b1      	b.n	8005fe8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8005e84:	2301      	movs	r3, #1
 8005e86:	e166      	b.n	8006156 <HAL_RCC_OscConfig+0x5fa>
 8005e88:	40021000 	.word	0x40021000
 8005e8c:	fffeffff 	.word	0xfffeffff
 8005e90:	fffbffff 	.word	0xfffbffff
 8005e94:	ffff80ff 	.word	0xffff80ff
 8005e98:	ffffc7ff 	.word	0xffffc7ff
 8005e9c:	00f42400 	.word	0x00f42400
 8005ea0:	20000000 	.word	0x20000000
 8005ea4:	20000004 	.word	0x20000004
 8005ea8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005eac:	4bac      	ldr	r3, [pc, #688]	; (8006160 <HAL_RCC_OscConfig+0x604>)
 8005eae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005eb0:	2380      	movs	r3, #128	; 0x80
 8005eb2:	055b      	lsls	r3, r3, #21
 8005eb4:	4013      	ands	r3, r2
 8005eb6:	d101      	bne.n	8005ebc <HAL_RCC_OscConfig+0x360>
 8005eb8:	2301      	movs	r3, #1
 8005eba:	e000      	b.n	8005ebe <HAL_RCC_OscConfig+0x362>
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d011      	beq.n	8005ee6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005ec2:	4ba7      	ldr	r3, [pc, #668]	; (8006160 <HAL_RCC_OscConfig+0x604>)
 8005ec4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ec6:	4ba6      	ldr	r3, [pc, #664]	; (8006160 <HAL_RCC_OscConfig+0x604>)
 8005ec8:	2180      	movs	r1, #128	; 0x80
 8005eca:	0549      	lsls	r1, r1, #21
 8005ecc:	430a      	orrs	r2, r1
 8005ece:	63da      	str	r2, [r3, #60]	; 0x3c
 8005ed0:	4ba3      	ldr	r3, [pc, #652]	; (8006160 <HAL_RCC_OscConfig+0x604>)
 8005ed2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ed4:	2380      	movs	r3, #128	; 0x80
 8005ed6:	055b      	lsls	r3, r3, #21
 8005ed8:	4013      	ands	r3, r2
 8005eda:	60fb      	str	r3, [r7, #12]
 8005edc:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8005ede:	231f      	movs	r3, #31
 8005ee0:	18fb      	adds	r3, r7, r3
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ee6:	4b9f      	ldr	r3, [pc, #636]	; (8006164 <HAL_RCC_OscConfig+0x608>)
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	2380      	movs	r3, #128	; 0x80
 8005eec:	005b      	lsls	r3, r3, #1
 8005eee:	4013      	ands	r3, r2
 8005ef0:	d11a      	bne.n	8005f28 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ef2:	4b9c      	ldr	r3, [pc, #624]	; (8006164 <HAL_RCC_OscConfig+0x608>)
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	4b9b      	ldr	r3, [pc, #620]	; (8006164 <HAL_RCC_OscConfig+0x608>)
 8005ef8:	2180      	movs	r1, #128	; 0x80
 8005efa:	0049      	lsls	r1, r1, #1
 8005efc:	430a      	orrs	r2, r1
 8005efe:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8005f00:	f7fd ff58 	bl	8003db4 <HAL_GetTick>
 8005f04:	0003      	movs	r3, r0
 8005f06:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f08:	e008      	b.n	8005f1c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f0a:	f7fd ff53 	bl	8003db4 <HAL_GetTick>
 8005f0e:	0002      	movs	r2, r0
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	1ad3      	subs	r3, r2, r3
 8005f14:	2b02      	cmp	r3, #2
 8005f16:	d901      	bls.n	8005f1c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8005f18:	2303      	movs	r3, #3
 8005f1a:	e11c      	b.n	8006156 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f1c:	4b91      	ldr	r3, [pc, #580]	; (8006164 <HAL_RCC_OscConfig+0x608>)
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	2380      	movs	r3, #128	; 0x80
 8005f22:	005b      	lsls	r3, r3, #1
 8005f24:	4013      	ands	r3, r2
 8005f26:	d0f0      	beq.n	8005f0a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d106      	bne.n	8005f3e <HAL_RCC_OscConfig+0x3e2>
 8005f30:	4b8b      	ldr	r3, [pc, #556]	; (8006160 <HAL_RCC_OscConfig+0x604>)
 8005f32:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005f34:	4b8a      	ldr	r3, [pc, #552]	; (8006160 <HAL_RCC_OscConfig+0x604>)
 8005f36:	2101      	movs	r1, #1
 8005f38:	430a      	orrs	r2, r1
 8005f3a:	65da      	str	r2, [r3, #92]	; 0x5c
 8005f3c:	e01c      	b.n	8005f78 <HAL_RCC_OscConfig+0x41c>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	2b05      	cmp	r3, #5
 8005f44:	d10c      	bne.n	8005f60 <HAL_RCC_OscConfig+0x404>
 8005f46:	4b86      	ldr	r3, [pc, #536]	; (8006160 <HAL_RCC_OscConfig+0x604>)
 8005f48:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005f4a:	4b85      	ldr	r3, [pc, #532]	; (8006160 <HAL_RCC_OscConfig+0x604>)
 8005f4c:	2104      	movs	r1, #4
 8005f4e:	430a      	orrs	r2, r1
 8005f50:	65da      	str	r2, [r3, #92]	; 0x5c
 8005f52:	4b83      	ldr	r3, [pc, #524]	; (8006160 <HAL_RCC_OscConfig+0x604>)
 8005f54:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005f56:	4b82      	ldr	r3, [pc, #520]	; (8006160 <HAL_RCC_OscConfig+0x604>)
 8005f58:	2101      	movs	r1, #1
 8005f5a:	430a      	orrs	r2, r1
 8005f5c:	65da      	str	r2, [r3, #92]	; 0x5c
 8005f5e:	e00b      	b.n	8005f78 <HAL_RCC_OscConfig+0x41c>
 8005f60:	4b7f      	ldr	r3, [pc, #508]	; (8006160 <HAL_RCC_OscConfig+0x604>)
 8005f62:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005f64:	4b7e      	ldr	r3, [pc, #504]	; (8006160 <HAL_RCC_OscConfig+0x604>)
 8005f66:	2101      	movs	r1, #1
 8005f68:	438a      	bics	r2, r1
 8005f6a:	65da      	str	r2, [r3, #92]	; 0x5c
 8005f6c:	4b7c      	ldr	r3, [pc, #496]	; (8006160 <HAL_RCC_OscConfig+0x604>)
 8005f6e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005f70:	4b7b      	ldr	r3, [pc, #492]	; (8006160 <HAL_RCC_OscConfig+0x604>)
 8005f72:	2104      	movs	r1, #4
 8005f74:	438a      	bics	r2, r1
 8005f76:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d014      	beq.n	8005faa <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f80:	f7fd ff18 	bl	8003db4 <HAL_GetTick>
 8005f84:	0003      	movs	r3, r0
 8005f86:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f88:	e009      	b.n	8005f9e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f8a:	f7fd ff13 	bl	8003db4 <HAL_GetTick>
 8005f8e:	0002      	movs	r2, r0
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	1ad3      	subs	r3, r2, r3
 8005f94:	4a74      	ldr	r2, [pc, #464]	; (8006168 <HAL_RCC_OscConfig+0x60c>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d901      	bls.n	8005f9e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8005f9a:	2303      	movs	r3, #3
 8005f9c:	e0db      	b.n	8006156 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f9e:	4b70      	ldr	r3, [pc, #448]	; (8006160 <HAL_RCC_OscConfig+0x604>)
 8005fa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fa2:	2202      	movs	r2, #2
 8005fa4:	4013      	ands	r3, r2
 8005fa6:	d0f0      	beq.n	8005f8a <HAL_RCC_OscConfig+0x42e>
 8005fa8:	e013      	b.n	8005fd2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005faa:	f7fd ff03 	bl	8003db4 <HAL_GetTick>
 8005fae:	0003      	movs	r3, r0
 8005fb0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005fb2:	e009      	b.n	8005fc8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fb4:	f7fd fefe 	bl	8003db4 <HAL_GetTick>
 8005fb8:	0002      	movs	r2, r0
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	1ad3      	subs	r3, r2, r3
 8005fbe:	4a6a      	ldr	r2, [pc, #424]	; (8006168 <HAL_RCC_OscConfig+0x60c>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d901      	bls.n	8005fc8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8005fc4:	2303      	movs	r3, #3
 8005fc6:	e0c6      	b.n	8006156 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005fc8:	4b65      	ldr	r3, [pc, #404]	; (8006160 <HAL_RCC_OscConfig+0x604>)
 8005fca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fcc:	2202      	movs	r2, #2
 8005fce:	4013      	ands	r3, r2
 8005fd0:	d1f0      	bne.n	8005fb4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005fd2:	231f      	movs	r3, #31
 8005fd4:	18fb      	adds	r3, r7, r3
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d105      	bne.n	8005fe8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005fdc:	4b60      	ldr	r3, [pc, #384]	; (8006160 <HAL_RCC_OscConfig+0x604>)
 8005fde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005fe0:	4b5f      	ldr	r3, [pc, #380]	; (8006160 <HAL_RCC_OscConfig+0x604>)
 8005fe2:	4962      	ldr	r1, [pc, #392]	; (800616c <HAL_RCC_OscConfig+0x610>)
 8005fe4:	400a      	ands	r2, r1
 8005fe6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	69db      	ldr	r3, [r3, #28]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d100      	bne.n	8005ff2 <HAL_RCC_OscConfig+0x496>
 8005ff0:	e0b0      	b.n	8006154 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005ff2:	4b5b      	ldr	r3, [pc, #364]	; (8006160 <HAL_RCC_OscConfig+0x604>)
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	2238      	movs	r2, #56	; 0x38
 8005ff8:	4013      	ands	r3, r2
 8005ffa:	2b10      	cmp	r3, #16
 8005ffc:	d100      	bne.n	8006000 <HAL_RCC_OscConfig+0x4a4>
 8005ffe:	e078      	b.n	80060f2 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	69db      	ldr	r3, [r3, #28]
 8006004:	2b02      	cmp	r3, #2
 8006006:	d153      	bne.n	80060b0 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006008:	4b55      	ldr	r3, [pc, #340]	; (8006160 <HAL_RCC_OscConfig+0x604>)
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	4b54      	ldr	r3, [pc, #336]	; (8006160 <HAL_RCC_OscConfig+0x604>)
 800600e:	4958      	ldr	r1, [pc, #352]	; (8006170 <HAL_RCC_OscConfig+0x614>)
 8006010:	400a      	ands	r2, r1
 8006012:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006014:	f7fd fece 	bl	8003db4 <HAL_GetTick>
 8006018:	0003      	movs	r3, r0
 800601a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800601c:	e008      	b.n	8006030 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800601e:	f7fd fec9 	bl	8003db4 <HAL_GetTick>
 8006022:	0002      	movs	r2, r0
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	1ad3      	subs	r3, r2, r3
 8006028:	2b02      	cmp	r3, #2
 800602a:	d901      	bls.n	8006030 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800602c:	2303      	movs	r3, #3
 800602e:	e092      	b.n	8006156 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006030:	4b4b      	ldr	r3, [pc, #300]	; (8006160 <HAL_RCC_OscConfig+0x604>)
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	2380      	movs	r3, #128	; 0x80
 8006036:	049b      	lsls	r3, r3, #18
 8006038:	4013      	ands	r3, r2
 800603a:	d1f0      	bne.n	800601e <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800603c:	4b48      	ldr	r3, [pc, #288]	; (8006160 <HAL_RCC_OscConfig+0x604>)
 800603e:	68db      	ldr	r3, [r3, #12]
 8006040:	4a4c      	ldr	r2, [pc, #304]	; (8006174 <HAL_RCC_OscConfig+0x618>)
 8006042:	4013      	ands	r3, r2
 8006044:	0019      	movs	r1, r3
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6a1a      	ldr	r2, [r3, #32]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800604e:	431a      	orrs	r2, r3
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006054:	021b      	lsls	r3, r3, #8
 8006056:	431a      	orrs	r2, r3
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800605c:	431a      	orrs	r2, r3
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006062:	431a      	orrs	r2, r3
 8006064:	4b3e      	ldr	r3, [pc, #248]	; (8006160 <HAL_RCC_OscConfig+0x604>)
 8006066:	430a      	orrs	r2, r1
 8006068:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800606a:	4b3d      	ldr	r3, [pc, #244]	; (8006160 <HAL_RCC_OscConfig+0x604>)
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	4b3c      	ldr	r3, [pc, #240]	; (8006160 <HAL_RCC_OscConfig+0x604>)
 8006070:	2180      	movs	r1, #128	; 0x80
 8006072:	0449      	lsls	r1, r1, #17
 8006074:	430a      	orrs	r2, r1
 8006076:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8006078:	4b39      	ldr	r3, [pc, #228]	; (8006160 <HAL_RCC_OscConfig+0x604>)
 800607a:	68da      	ldr	r2, [r3, #12]
 800607c:	4b38      	ldr	r3, [pc, #224]	; (8006160 <HAL_RCC_OscConfig+0x604>)
 800607e:	2180      	movs	r1, #128	; 0x80
 8006080:	0549      	lsls	r1, r1, #21
 8006082:	430a      	orrs	r2, r1
 8006084:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006086:	f7fd fe95 	bl	8003db4 <HAL_GetTick>
 800608a:	0003      	movs	r3, r0
 800608c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800608e:	e008      	b.n	80060a2 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006090:	f7fd fe90 	bl	8003db4 <HAL_GetTick>
 8006094:	0002      	movs	r2, r0
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	1ad3      	subs	r3, r2, r3
 800609a:	2b02      	cmp	r3, #2
 800609c:	d901      	bls.n	80060a2 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800609e:	2303      	movs	r3, #3
 80060a0:	e059      	b.n	8006156 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060a2:	4b2f      	ldr	r3, [pc, #188]	; (8006160 <HAL_RCC_OscConfig+0x604>)
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	2380      	movs	r3, #128	; 0x80
 80060a8:	049b      	lsls	r3, r3, #18
 80060aa:	4013      	ands	r3, r2
 80060ac:	d0f0      	beq.n	8006090 <HAL_RCC_OscConfig+0x534>
 80060ae:	e051      	b.n	8006154 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060b0:	4b2b      	ldr	r3, [pc, #172]	; (8006160 <HAL_RCC_OscConfig+0x604>)
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	4b2a      	ldr	r3, [pc, #168]	; (8006160 <HAL_RCC_OscConfig+0x604>)
 80060b6:	492e      	ldr	r1, [pc, #184]	; (8006170 <HAL_RCC_OscConfig+0x614>)
 80060b8:	400a      	ands	r2, r1
 80060ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060bc:	f7fd fe7a 	bl	8003db4 <HAL_GetTick>
 80060c0:	0003      	movs	r3, r0
 80060c2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80060c4:	e008      	b.n	80060d8 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060c6:	f7fd fe75 	bl	8003db4 <HAL_GetTick>
 80060ca:	0002      	movs	r2, r0
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	1ad3      	subs	r3, r2, r3
 80060d0:	2b02      	cmp	r3, #2
 80060d2:	d901      	bls.n	80060d8 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80060d4:	2303      	movs	r3, #3
 80060d6:	e03e      	b.n	8006156 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80060d8:	4b21      	ldr	r3, [pc, #132]	; (8006160 <HAL_RCC_OscConfig+0x604>)
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	2380      	movs	r3, #128	; 0x80
 80060de:	049b      	lsls	r3, r3, #18
 80060e0:	4013      	ands	r3, r2
 80060e2:	d1f0      	bne.n	80060c6 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80060e4:	4b1e      	ldr	r3, [pc, #120]	; (8006160 <HAL_RCC_OscConfig+0x604>)
 80060e6:	68da      	ldr	r2, [r3, #12]
 80060e8:	4b1d      	ldr	r3, [pc, #116]	; (8006160 <HAL_RCC_OscConfig+0x604>)
 80060ea:	4923      	ldr	r1, [pc, #140]	; (8006178 <HAL_RCC_OscConfig+0x61c>)
 80060ec:	400a      	ands	r2, r1
 80060ee:	60da      	str	r2, [r3, #12]
 80060f0:	e030      	b.n	8006154 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	69db      	ldr	r3, [r3, #28]
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d101      	bne.n	80060fe <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80060fa:	2301      	movs	r3, #1
 80060fc:	e02b      	b.n	8006156 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80060fe:	4b18      	ldr	r3, [pc, #96]	; (8006160 <HAL_RCC_OscConfig+0x604>)
 8006100:	68db      	ldr	r3, [r3, #12]
 8006102:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	2203      	movs	r2, #3
 8006108:	401a      	ands	r2, r3
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6a1b      	ldr	r3, [r3, #32]
 800610e:	429a      	cmp	r2, r3
 8006110:	d11e      	bne.n	8006150 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	2270      	movs	r2, #112	; 0x70
 8006116:	401a      	ands	r2, r3
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800611c:	429a      	cmp	r2, r3
 800611e:	d117      	bne.n	8006150 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006120:	697a      	ldr	r2, [r7, #20]
 8006122:	23fe      	movs	r3, #254	; 0xfe
 8006124:	01db      	lsls	r3, r3, #7
 8006126:	401a      	ands	r2, r3
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800612c:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800612e:	429a      	cmp	r2, r3
 8006130:	d10e      	bne.n	8006150 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006132:	697a      	ldr	r2, [r7, #20]
 8006134:	23f8      	movs	r3, #248	; 0xf8
 8006136:	039b      	lsls	r3, r3, #14
 8006138:	401a      	ands	r2, r3
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800613e:	429a      	cmp	r2, r3
 8006140:	d106      	bne.n	8006150 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	0f5b      	lsrs	r3, r3, #29
 8006146:	075a      	lsls	r2, r3, #29
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800614c:	429a      	cmp	r2, r3
 800614e:	d001      	beq.n	8006154 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	e000      	b.n	8006156 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8006154:	2300      	movs	r3, #0
}
 8006156:	0018      	movs	r0, r3
 8006158:	46bd      	mov	sp, r7
 800615a:	b008      	add	sp, #32
 800615c:	bd80      	pop	{r7, pc}
 800615e:	46c0      	nop			; (mov r8, r8)
 8006160:	40021000 	.word	0x40021000
 8006164:	40007000 	.word	0x40007000
 8006168:	00001388 	.word	0x00001388
 800616c:	efffffff 	.word	0xefffffff
 8006170:	feffffff 	.word	0xfeffffff
 8006174:	1fc1808c 	.word	0x1fc1808c
 8006178:	effefffc 	.word	0xeffefffc

0800617c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b084      	sub	sp, #16
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
 8006184:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d101      	bne.n	8006190 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	e0e9      	b.n	8006364 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006190:	4b76      	ldr	r3, [pc, #472]	; (800636c <HAL_RCC_ClockConfig+0x1f0>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	2207      	movs	r2, #7
 8006196:	4013      	ands	r3, r2
 8006198:	683a      	ldr	r2, [r7, #0]
 800619a:	429a      	cmp	r2, r3
 800619c:	d91e      	bls.n	80061dc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800619e:	4b73      	ldr	r3, [pc, #460]	; (800636c <HAL_RCC_ClockConfig+0x1f0>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	2207      	movs	r2, #7
 80061a4:	4393      	bics	r3, r2
 80061a6:	0019      	movs	r1, r3
 80061a8:	4b70      	ldr	r3, [pc, #448]	; (800636c <HAL_RCC_ClockConfig+0x1f0>)
 80061aa:	683a      	ldr	r2, [r7, #0]
 80061ac:	430a      	orrs	r2, r1
 80061ae:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80061b0:	f7fd fe00 	bl	8003db4 <HAL_GetTick>
 80061b4:	0003      	movs	r3, r0
 80061b6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80061b8:	e009      	b.n	80061ce <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061ba:	f7fd fdfb 	bl	8003db4 <HAL_GetTick>
 80061be:	0002      	movs	r2, r0
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	1ad3      	subs	r3, r2, r3
 80061c4:	4a6a      	ldr	r2, [pc, #424]	; (8006370 <HAL_RCC_ClockConfig+0x1f4>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d901      	bls.n	80061ce <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80061ca:	2303      	movs	r3, #3
 80061cc:	e0ca      	b.n	8006364 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80061ce:	4b67      	ldr	r3, [pc, #412]	; (800636c <HAL_RCC_ClockConfig+0x1f0>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	2207      	movs	r2, #7
 80061d4:	4013      	ands	r3, r2
 80061d6:	683a      	ldr	r2, [r7, #0]
 80061d8:	429a      	cmp	r2, r3
 80061da:	d1ee      	bne.n	80061ba <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	2202      	movs	r2, #2
 80061e2:	4013      	ands	r3, r2
 80061e4:	d015      	beq.n	8006212 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	2204      	movs	r2, #4
 80061ec:	4013      	ands	r3, r2
 80061ee:	d006      	beq.n	80061fe <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80061f0:	4b60      	ldr	r3, [pc, #384]	; (8006374 <HAL_RCC_ClockConfig+0x1f8>)
 80061f2:	689a      	ldr	r2, [r3, #8]
 80061f4:	4b5f      	ldr	r3, [pc, #380]	; (8006374 <HAL_RCC_ClockConfig+0x1f8>)
 80061f6:	21e0      	movs	r1, #224	; 0xe0
 80061f8:	01c9      	lsls	r1, r1, #7
 80061fa:	430a      	orrs	r2, r1
 80061fc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061fe:	4b5d      	ldr	r3, [pc, #372]	; (8006374 <HAL_RCC_ClockConfig+0x1f8>)
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	4a5d      	ldr	r2, [pc, #372]	; (8006378 <HAL_RCC_ClockConfig+0x1fc>)
 8006204:	4013      	ands	r3, r2
 8006206:	0019      	movs	r1, r3
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	689a      	ldr	r2, [r3, #8]
 800620c:	4b59      	ldr	r3, [pc, #356]	; (8006374 <HAL_RCC_ClockConfig+0x1f8>)
 800620e:	430a      	orrs	r2, r1
 8006210:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	2201      	movs	r2, #1
 8006218:	4013      	ands	r3, r2
 800621a:	d057      	beq.n	80062cc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	2b01      	cmp	r3, #1
 8006222:	d107      	bne.n	8006234 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006224:	4b53      	ldr	r3, [pc, #332]	; (8006374 <HAL_RCC_ClockConfig+0x1f8>)
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	2380      	movs	r3, #128	; 0x80
 800622a:	029b      	lsls	r3, r3, #10
 800622c:	4013      	ands	r3, r2
 800622e:	d12b      	bne.n	8006288 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	e097      	b.n	8006364 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	2b02      	cmp	r3, #2
 800623a:	d107      	bne.n	800624c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800623c:	4b4d      	ldr	r3, [pc, #308]	; (8006374 <HAL_RCC_ClockConfig+0x1f8>)
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	2380      	movs	r3, #128	; 0x80
 8006242:	049b      	lsls	r3, r3, #18
 8006244:	4013      	ands	r3, r2
 8006246:	d11f      	bne.n	8006288 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006248:	2301      	movs	r3, #1
 800624a:	e08b      	b.n	8006364 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d107      	bne.n	8006264 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006254:	4b47      	ldr	r3, [pc, #284]	; (8006374 <HAL_RCC_ClockConfig+0x1f8>)
 8006256:	681a      	ldr	r2, [r3, #0]
 8006258:	2380      	movs	r3, #128	; 0x80
 800625a:	00db      	lsls	r3, r3, #3
 800625c:	4013      	ands	r3, r2
 800625e:	d113      	bne.n	8006288 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	e07f      	b.n	8006364 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	2b03      	cmp	r3, #3
 800626a:	d106      	bne.n	800627a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800626c:	4b41      	ldr	r3, [pc, #260]	; (8006374 <HAL_RCC_ClockConfig+0x1f8>)
 800626e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006270:	2202      	movs	r2, #2
 8006272:	4013      	ands	r3, r2
 8006274:	d108      	bne.n	8006288 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	e074      	b.n	8006364 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800627a:	4b3e      	ldr	r3, [pc, #248]	; (8006374 <HAL_RCC_ClockConfig+0x1f8>)
 800627c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800627e:	2202      	movs	r2, #2
 8006280:	4013      	ands	r3, r2
 8006282:	d101      	bne.n	8006288 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006284:	2301      	movs	r3, #1
 8006286:	e06d      	b.n	8006364 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006288:	4b3a      	ldr	r3, [pc, #232]	; (8006374 <HAL_RCC_ClockConfig+0x1f8>)
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	2207      	movs	r2, #7
 800628e:	4393      	bics	r3, r2
 8006290:	0019      	movs	r1, r3
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	685a      	ldr	r2, [r3, #4]
 8006296:	4b37      	ldr	r3, [pc, #220]	; (8006374 <HAL_RCC_ClockConfig+0x1f8>)
 8006298:	430a      	orrs	r2, r1
 800629a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800629c:	f7fd fd8a 	bl	8003db4 <HAL_GetTick>
 80062a0:	0003      	movs	r3, r0
 80062a2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062a4:	e009      	b.n	80062ba <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062a6:	f7fd fd85 	bl	8003db4 <HAL_GetTick>
 80062aa:	0002      	movs	r2, r0
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	1ad3      	subs	r3, r2, r3
 80062b0:	4a2f      	ldr	r2, [pc, #188]	; (8006370 <HAL_RCC_ClockConfig+0x1f4>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d901      	bls.n	80062ba <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80062b6:	2303      	movs	r3, #3
 80062b8:	e054      	b.n	8006364 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062ba:	4b2e      	ldr	r3, [pc, #184]	; (8006374 <HAL_RCC_ClockConfig+0x1f8>)
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	2238      	movs	r2, #56	; 0x38
 80062c0:	401a      	ands	r2, r3
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	00db      	lsls	r3, r3, #3
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d1ec      	bne.n	80062a6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80062cc:	4b27      	ldr	r3, [pc, #156]	; (800636c <HAL_RCC_ClockConfig+0x1f0>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	2207      	movs	r2, #7
 80062d2:	4013      	ands	r3, r2
 80062d4:	683a      	ldr	r2, [r7, #0]
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d21e      	bcs.n	8006318 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062da:	4b24      	ldr	r3, [pc, #144]	; (800636c <HAL_RCC_ClockConfig+0x1f0>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	2207      	movs	r2, #7
 80062e0:	4393      	bics	r3, r2
 80062e2:	0019      	movs	r1, r3
 80062e4:	4b21      	ldr	r3, [pc, #132]	; (800636c <HAL_RCC_ClockConfig+0x1f0>)
 80062e6:	683a      	ldr	r2, [r7, #0]
 80062e8:	430a      	orrs	r2, r1
 80062ea:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80062ec:	f7fd fd62 	bl	8003db4 <HAL_GetTick>
 80062f0:	0003      	movs	r3, r0
 80062f2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80062f4:	e009      	b.n	800630a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062f6:	f7fd fd5d 	bl	8003db4 <HAL_GetTick>
 80062fa:	0002      	movs	r2, r0
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	1ad3      	subs	r3, r2, r3
 8006300:	4a1b      	ldr	r2, [pc, #108]	; (8006370 <HAL_RCC_ClockConfig+0x1f4>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d901      	bls.n	800630a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8006306:	2303      	movs	r3, #3
 8006308:	e02c      	b.n	8006364 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800630a:	4b18      	ldr	r3, [pc, #96]	; (800636c <HAL_RCC_ClockConfig+0x1f0>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	2207      	movs	r2, #7
 8006310:	4013      	ands	r3, r2
 8006312:	683a      	ldr	r2, [r7, #0]
 8006314:	429a      	cmp	r2, r3
 8006316:	d1ee      	bne.n	80062f6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	2204      	movs	r2, #4
 800631e:	4013      	ands	r3, r2
 8006320:	d009      	beq.n	8006336 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8006322:	4b14      	ldr	r3, [pc, #80]	; (8006374 <HAL_RCC_ClockConfig+0x1f8>)
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	4a15      	ldr	r2, [pc, #84]	; (800637c <HAL_RCC_ClockConfig+0x200>)
 8006328:	4013      	ands	r3, r2
 800632a:	0019      	movs	r1, r3
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	68da      	ldr	r2, [r3, #12]
 8006330:	4b10      	ldr	r3, [pc, #64]	; (8006374 <HAL_RCC_ClockConfig+0x1f8>)
 8006332:	430a      	orrs	r2, r1
 8006334:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8006336:	f000 f829 	bl	800638c <HAL_RCC_GetSysClockFreq>
 800633a:	0001      	movs	r1, r0
 800633c:	4b0d      	ldr	r3, [pc, #52]	; (8006374 <HAL_RCC_ClockConfig+0x1f8>)
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	0a1b      	lsrs	r3, r3, #8
 8006342:	220f      	movs	r2, #15
 8006344:	401a      	ands	r2, r3
 8006346:	4b0e      	ldr	r3, [pc, #56]	; (8006380 <HAL_RCC_ClockConfig+0x204>)
 8006348:	0092      	lsls	r2, r2, #2
 800634a:	58d3      	ldr	r3, [r2, r3]
 800634c:	221f      	movs	r2, #31
 800634e:	4013      	ands	r3, r2
 8006350:	000a      	movs	r2, r1
 8006352:	40da      	lsrs	r2, r3
 8006354:	4b0b      	ldr	r3, [pc, #44]	; (8006384 <HAL_RCC_ClockConfig+0x208>)
 8006356:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006358:	4b0b      	ldr	r3, [pc, #44]	; (8006388 <HAL_RCC_ClockConfig+0x20c>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	0018      	movs	r0, r3
 800635e:	f7fd fccd 	bl	8003cfc <HAL_InitTick>
 8006362:	0003      	movs	r3, r0
}
 8006364:	0018      	movs	r0, r3
 8006366:	46bd      	mov	sp, r7
 8006368:	b004      	add	sp, #16
 800636a:	bd80      	pop	{r7, pc}
 800636c:	40022000 	.word	0x40022000
 8006370:	00001388 	.word	0x00001388
 8006374:	40021000 	.word	0x40021000
 8006378:	fffff0ff 	.word	0xfffff0ff
 800637c:	ffff8fff 	.word	0xffff8fff
 8006380:	0800787c 	.word	0x0800787c
 8006384:	20000000 	.word	0x20000000
 8006388:	20000004 	.word	0x20000004

0800638c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b086      	sub	sp, #24
 8006390:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006392:	4b3c      	ldr	r3, [pc, #240]	; (8006484 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	2238      	movs	r2, #56	; 0x38
 8006398:	4013      	ands	r3, r2
 800639a:	d10f      	bne.n	80063bc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800639c:	4b39      	ldr	r3, [pc, #228]	; (8006484 <HAL_RCC_GetSysClockFreq+0xf8>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	0adb      	lsrs	r3, r3, #11
 80063a2:	2207      	movs	r2, #7
 80063a4:	4013      	ands	r3, r2
 80063a6:	2201      	movs	r2, #1
 80063a8:	409a      	lsls	r2, r3
 80063aa:	0013      	movs	r3, r2
 80063ac:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80063ae:	6839      	ldr	r1, [r7, #0]
 80063b0:	4835      	ldr	r0, [pc, #212]	; (8006488 <HAL_RCC_GetSysClockFreq+0xfc>)
 80063b2:	f7f9 feaf 	bl	8000114 <__udivsi3>
 80063b6:	0003      	movs	r3, r0
 80063b8:	613b      	str	r3, [r7, #16]
 80063ba:	e05d      	b.n	8006478 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80063bc:	4b31      	ldr	r3, [pc, #196]	; (8006484 <HAL_RCC_GetSysClockFreq+0xf8>)
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	2238      	movs	r2, #56	; 0x38
 80063c2:	4013      	ands	r3, r2
 80063c4:	2b08      	cmp	r3, #8
 80063c6:	d102      	bne.n	80063ce <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80063c8:	4b30      	ldr	r3, [pc, #192]	; (800648c <HAL_RCC_GetSysClockFreq+0x100>)
 80063ca:	613b      	str	r3, [r7, #16]
 80063cc:	e054      	b.n	8006478 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80063ce:	4b2d      	ldr	r3, [pc, #180]	; (8006484 <HAL_RCC_GetSysClockFreq+0xf8>)
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	2238      	movs	r2, #56	; 0x38
 80063d4:	4013      	ands	r3, r2
 80063d6:	2b10      	cmp	r3, #16
 80063d8:	d138      	bne.n	800644c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80063da:	4b2a      	ldr	r3, [pc, #168]	; (8006484 <HAL_RCC_GetSysClockFreq+0xf8>)
 80063dc:	68db      	ldr	r3, [r3, #12]
 80063de:	2203      	movs	r2, #3
 80063e0:	4013      	ands	r3, r2
 80063e2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80063e4:	4b27      	ldr	r3, [pc, #156]	; (8006484 <HAL_RCC_GetSysClockFreq+0xf8>)
 80063e6:	68db      	ldr	r3, [r3, #12]
 80063e8:	091b      	lsrs	r3, r3, #4
 80063ea:	2207      	movs	r2, #7
 80063ec:	4013      	ands	r3, r2
 80063ee:	3301      	adds	r3, #1
 80063f0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2b03      	cmp	r3, #3
 80063f6:	d10d      	bne.n	8006414 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80063f8:	68b9      	ldr	r1, [r7, #8]
 80063fa:	4824      	ldr	r0, [pc, #144]	; (800648c <HAL_RCC_GetSysClockFreq+0x100>)
 80063fc:	f7f9 fe8a 	bl	8000114 <__udivsi3>
 8006400:	0003      	movs	r3, r0
 8006402:	0019      	movs	r1, r3
 8006404:	4b1f      	ldr	r3, [pc, #124]	; (8006484 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006406:	68db      	ldr	r3, [r3, #12]
 8006408:	0a1b      	lsrs	r3, r3, #8
 800640a:	227f      	movs	r2, #127	; 0x7f
 800640c:	4013      	ands	r3, r2
 800640e:	434b      	muls	r3, r1
 8006410:	617b      	str	r3, [r7, #20]
        break;
 8006412:	e00d      	b.n	8006430 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8006414:	68b9      	ldr	r1, [r7, #8]
 8006416:	481c      	ldr	r0, [pc, #112]	; (8006488 <HAL_RCC_GetSysClockFreq+0xfc>)
 8006418:	f7f9 fe7c 	bl	8000114 <__udivsi3>
 800641c:	0003      	movs	r3, r0
 800641e:	0019      	movs	r1, r3
 8006420:	4b18      	ldr	r3, [pc, #96]	; (8006484 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006422:	68db      	ldr	r3, [r3, #12]
 8006424:	0a1b      	lsrs	r3, r3, #8
 8006426:	227f      	movs	r2, #127	; 0x7f
 8006428:	4013      	ands	r3, r2
 800642a:	434b      	muls	r3, r1
 800642c:	617b      	str	r3, [r7, #20]
        break;
 800642e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8006430:	4b14      	ldr	r3, [pc, #80]	; (8006484 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006432:	68db      	ldr	r3, [r3, #12]
 8006434:	0f5b      	lsrs	r3, r3, #29
 8006436:	2207      	movs	r2, #7
 8006438:	4013      	ands	r3, r2
 800643a:	3301      	adds	r3, #1
 800643c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800643e:	6879      	ldr	r1, [r7, #4]
 8006440:	6978      	ldr	r0, [r7, #20]
 8006442:	f7f9 fe67 	bl	8000114 <__udivsi3>
 8006446:	0003      	movs	r3, r0
 8006448:	613b      	str	r3, [r7, #16]
 800644a:	e015      	b.n	8006478 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800644c:	4b0d      	ldr	r3, [pc, #52]	; (8006484 <HAL_RCC_GetSysClockFreq+0xf8>)
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	2238      	movs	r2, #56	; 0x38
 8006452:	4013      	ands	r3, r2
 8006454:	2b20      	cmp	r3, #32
 8006456:	d103      	bne.n	8006460 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8006458:	2380      	movs	r3, #128	; 0x80
 800645a:	021b      	lsls	r3, r3, #8
 800645c:	613b      	str	r3, [r7, #16]
 800645e:	e00b      	b.n	8006478 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8006460:	4b08      	ldr	r3, [pc, #32]	; (8006484 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	2238      	movs	r2, #56	; 0x38
 8006466:	4013      	ands	r3, r2
 8006468:	2b18      	cmp	r3, #24
 800646a:	d103      	bne.n	8006474 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800646c:	23fa      	movs	r3, #250	; 0xfa
 800646e:	01db      	lsls	r3, r3, #7
 8006470:	613b      	str	r3, [r7, #16]
 8006472:	e001      	b.n	8006478 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8006474:	2300      	movs	r3, #0
 8006476:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006478:	693b      	ldr	r3, [r7, #16]
}
 800647a:	0018      	movs	r0, r3
 800647c:	46bd      	mov	sp, r7
 800647e:	b006      	add	sp, #24
 8006480:	bd80      	pop	{r7, pc}
 8006482:	46c0      	nop			; (mov r8, r8)
 8006484:	40021000 	.word	0x40021000
 8006488:	00f42400 	.word	0x00f42400
 800648c:	007a1200 	.word	0x007a1200

08006490 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b086      	sub	sp, #24
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8006498:	2313      	movs	r3, #19
 800649a:	18fb      	adds	r3, r7, r3
 800649c:	2200      	movs	r2, #0
 800649e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80064a0:	2312      	movs	r3, #18
 80064a2:	18fb      	adds	r3, r7, r3
 80064a4:	2200      	movs	r2, #0
 80064a6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	2380      	movs	r3, #128	; 0x80
 80064ae:	029b      	lsls	r3, r3, #10
 80064b0:	4013      	ands	r3, r2
 80064b2:	d100      	bne.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80064b4:	e0a3      	b.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80064b6:	2011      	movs	r0, #17
 80064b8:	183b      	adds	r3, r7, r0
 80064ba:	2200      	movs	r2, #0
 80064bc:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80064be:	4b7f      	ldr	r3, [pc, #508]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80064c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80064c2:	2380      	movs	r3, #128	; 0x80
 80064c4:	055b      	lsls	r3, r3, #21
 80064c6:	4013      	ands	r3, r2
 80064c8:	d110      	bne.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80064ca:	4b7c      	ldr	r3, [pc, #496]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80064cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80064ce:	4b7b      	ldr	r3, [pc, #492]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80064d0:	2180      	movs	r1, #128	; 0x80
 80064d2:	0549      	lsls	r1, r1, #21
 80064d4:	430a      	orrs	r2, r1
 80064d6:	63da      	str	r2, [r3, #60]	; 0x3c
 80064d8:	4b78      	ldr	r3, [pc, #480]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80064da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80064dc:	2380      	movs	r3, #128	; 0x80
 80064de:	055b      	lsls	r3, r3, #21
 80064e0:	4013      	ands	r3, r2
 80064e2:	60bb      	str	r3, [r7, #8]
 80064e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80064e6:	183b      	adds	r3, r7, r0
 80064e8:	2201      	movs	r2, #1
 80064ea:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80064ec:	4b74      	ldr	r3, [pc, #464]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	4b73      	ldr	r3, [pc, #460]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80064f2:	2180      	movs	r1, #128	; 0x80
 80064f4:	0049      	lsls	r1, r1, #1
 80064f6:	430a      	orrs	r2, r1
 80064f8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80064fa:	f7fd fc5b 	bl	8003db4 <HAL_GetTick>
 80064fe:	0003      	movs	r3, r0
 8006500:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006502:	e00b      	b.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006504:	f7fd fc56 	bl	8003db4 <HAL_GetTick>
 8006508:	0002      	movs	r2, r0
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	1ad3      	subs	r3, r2, r3
 800650e:	2b02      	cmp	r3, #2
 8006510:	d904      	bls.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8006512:	2313      	movs	r3, #19
 8006514:	18fb      	adds	r3, r7, r3
 8006516:	2203      	movs	r2, #3
 8006518:	701a      	strb	r2, [r3, #0]
        break;
 800651a:	e005      	b.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800651c:	4b68      	ldr	r3, [pc, #416]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800651e:	681a      	ldr	r2, [r3, #0]
 8006520:	2380      	movs	r3, #128	; 0x80
 8006522:	005b      	lsls	r3, r3, #1
 8006524:	4013      	ands	r3, r2
 8006526:	d0ed      	beq.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8006528:	2313      	movs	r3, #19
 800652a:	18fb      	adds	r3, r7, r3
 800652c:	781b      	ldrb	r3, [r3, #0]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d154      	bne.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006532:	4b62      	ldr	r3, [pc, #392]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006534:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006536:	23c0      	movs	r3, #192	; 0xc0
 8006538:	009b      	lsls	r3, r3, #2
 800653a:	4013      	ands	r3, r2
 800653c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d019      	beq.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	695b      	ldr	r3, [r3, #20]
 8006548:	697a      	ldr	r2, [r7, #20]
 800654a:	429a      	cmp	r2, r3
 800654c:	d014      	beq.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800654e:	4b5b      	ldr	r3, [pc, #364]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006550:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006552:	4a5c      	ldr	r2, [pc, #368]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8006554:	4013      	ands	r3, r2
 8006556:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006558:	4b58      	ldr	r3, [pc, #352]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800655a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800655c:	4b57      	ldr	r3, [pc, #348]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800655e:	2180      	movs	r1, #128	; 0x80
 8006560:	0249      	lsls	r1, r1, #9
 8006562:	430a      	orrs	r2, r1
 8006564:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006566:	4b55      	ldr	r3, [pc, #340]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006568:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800656a:	4b54      	ldr	r3, [pc, #336]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800656c:	4956      	ldr	r1, [pc, #344]	; (80066c8 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 800656e:	400a      	ands	r2, r1
 8006570:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006572:	4b52      	ldr	r3, [pc, #328]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006574:	697a      	ldr	r2, [r7, #20]
 8006576:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	2201      	movs	r2, #1
 800657c:	4013      	ands	r3, r2
 800657e:	d016      	beq.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006580:	f7fd fc18 	bl	8003db4 <HAL_GetTick>
 8006584:	0003      	movs	r3, r0
 8006586:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006588:	e00c      	b.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800658a:	f7fd fc13 	bl	8003db4 <HAL_GetTick>
 800658e:	0002      	movs	r2, r0
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	1ad3      	subs	r3, r2, r3
 8006594:	4a4d      	ldr	r2, [pc, #308]	; (80066cc <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d904      	bls.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800659a:	2313      	movs	r3, #19
 800659c:	18fb      	adds	r3, r7, r3
 800659e:	2203      	movs	r2, #3
 80065a0:	701a      	strb	r2, [r3, #0]
            break;
 80065a2:	e004      	b.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80065a4:	4b45      	ldr	r3, [pc, #276]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80065a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065a8:	2202      	movs	r2, #2
 80065aa:	4013      	ands	r3, r2
 80065ac:	d0ed      	beq.n	800658a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80065ae:	2313      	movs	r3, #19
 80065b0:	18fb      	adds	r3, r7, r3
 80065b2:	781b      	ldrb	r3, [r3, #0]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d10a      	bne.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80065b8:	4b40      	ldr	r3, [pc, #256]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80065ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065bc:	4a41      	ldr	r2, [pc, #260]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80065be:	4013      	ands	r3, r2
 80065c0:	0019      	movs	r1, r3
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	695a      	ldr	r2, [r3, #20]
 80065c6:	4b3d      	ldr	r3, [pc, #244]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80065c8:	430a      	orrs	r2, r1
 80065ca:	65da      	str	r2, [r3, #92]	; 0x5c
 80065cc:	e00c      	b.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80065ce:	2312      	movs	r3, #18
 80065d0:	18fb      	adds	r3, r7, r3
 80065d2:	2213      	movs	r2, #19
 80065d4:	18ba      	adds	r2, r7, r2
 80065d6:	7812      	ldrb	r2, [r2, #0]
 80065d8:	701a      	strb	r2, [r3, #0]
 80065da:	e005      	b.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065dc:	2312      	movs	r3, #18
 80065de:	18fb      	adds	r3, r7, r3
 80065e0:	2213      	movs	r2, #19
 80065e2:	18ba      	adds	r2, r7, r2
 80065e4:	7812      	ldrb	r2, [r2, #0]
 80065e6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80065e8:	2311      	movs	r3, #17
 80065ea:	18fb      	adds	r3, r7, r3
 80065ec:	781b      	ldrb	r3, [r3, #0]
 80065ee:	2b01      	cmp	r3, #1
 80065f0:	d105      	bne.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80065f2:	4b32      	ldr	r3, [pc, #200]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80065f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80065f6:	4b31      	ldr	r3, [pc, #196]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80065f8:	4935      	ldr	r1, [pc, #212]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80065fa:	400a      	ands	r2, r1
 80065fc:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	2201      	movs	r2, #1
 8006604:	4013      	ands	r3, r2
 8006606:	d009      	beq.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006608:	4b2c      	ldr	r3, [pc, #176]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800660a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800660c:	2203      	movs	r2, #3
 800660e:	4393      	bics	r3, r2
 8006610:	0019      	movs	r1, r3
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	685a      	ldr	r2, [r3, #4]
 8006616:	4b29      	ldr	r3, [pc, #164]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006618:	430a      	orrs	r2, r1
 800661a:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	2220      	movs	r2, #32
 8006622:	4013      	ands	r3, r2
 8006624:	d009      	beq.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006626:	4b25      	ldr	r3, [pc, #148]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800662a:	4a2a      	ldr	r2, [pc, #168]	; (80066d4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800662c:	4013      	ands	r3, r2
 800662e:	0019      	movs	r1, r3
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	689a      	ldr	r2, [r3, #8]
 8006634:	4b21      	ldr	r3, [pc, #132]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006636:	430a      	orrs	r2, r1
 8006638:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681a      	ldr	r2, [r3, #0]
 800663e:	2380      	movs	r3, #128	; 0x80
 8006640:	01db      	lsls	r3, r3, #7
 8006642:	4013      	ands	r3, r2
 8006644:	d015      	beq.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006646:	4b1d      	ldr	r3, [pc, #116]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800664a:	009b      	lsls	r3, r3, #2
 800664c:	0899      	lsrs	r1, r3, #2
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	691a      	ldr	r2, [r3, #16]
 8006652:	4b1a      	ldr	r3, [pc, #104]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006654:	430a      	orrs	r2, r1
 8006656:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	691a      	ldr	r2, [r3, #16]
 800665c:	2380      	movs	r3, #128	; 0x80
 800665e:	05db      	lsls	r3, r3, #23
 8006660:	429a      	cmp	r2, r3
 8006662:	d106      	bne.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8006664:	4b15      	ldr	r3, [pc, #84]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006666:	68da      	ldr	r2, [r3, #12]
 8006668:	4b14      	ldr	r3, [pc, #80]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800666a:	2180      	movs	r1, #128	; 0x80
 800666c:	0249      	lsls	r1, r1, #9
 800666e:	430a      	orrs	r2, r1
 8006670:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681a      	ldr	r2, [r3, #0]
 8006676:	2380      	movs	r3, #128	; 0x80
 8006678:	011b      	lsls	r3, r3, #4
 800667a:	4013      	ands	r3, r2
 800667c:	d016      	beq.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800667e:	4b0f      	ldr	r3, [pc, #60]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006682:	4a15      	ldr	r2, [pc, #84]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006684:	4013      	ands	r3, r2
 8006686:	0019      	movs	r1, r3
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	68da      	ldr	r2, [r3, #12]
 800668c:	4b0b      	ldr	r3, [pc, #44]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800668e:	430a      	orrs	r2, r1
 8006690:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	68da      	ldr	r2, [r3, #12]
 8006696:	2380      	movs	r3, #128	; 0x80
 8006698:	01db      	lsls	r3, r3, #7
 800669a:	429a      	cmp	r2, r3
 800669c:	d106      	bne.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800669e:	4b07      	ldr	r3, [pc, #28]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80066a0:	68da      	ldr	r2, [r3, #12]
 80066a2:	4b06      	ldr	r3, [pc, #24]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80066a4:	2180      	movs	r1, #128	; 0x80
 80066a6:	0249      	lsls	r1, r1, #9
 80066a8:	430a      	orrs	r2, r1
 80066aa:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80066ac:	2312      	movs	r3, #18
 80066ae:	18fb      	adds	r3, r7, r3
 80066b0:	781b      	ldrb	r3, [r3, #0]
}
 80066b2:	0018      	movs	r0, r3
 80066b4:	46bd      	mov	sp, r7
 80066b6:	b006      	add	sp, #24
 80066b8:	bd80      	pop	{r7, pc}
 80066ba:	46c0      	nop			; (mov r8, r8)
 80066bc:	40021000 	.word	0x40021000
 80066c0:	40007000 	.word	0x40007000
 80066c4:	fffffcff 	.word	0xfffffcff
 80066c8:	fffeffff 	.word	0xfffeffff
 80066cc:	00001388 	.word	0x00001388
 80066d0:	efffffff 	.word	0xefffffff
 80066d4:	ffffcfff 	.word	0xffffcfff
 80066d8:	ffff3fff 	.word	0xffff3fff

080066dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b082      	sub	sp, #8
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d101      	bne.n	80066ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80066ea:	2301      	movs	r3, #1
 80066ec:	e04a      	b.n	8006784 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	223d      	movs	r2, #61	; 0x3d
 80066f2:	5c9b      	ldrb	r3, [r3, r2]
 80066f4:	b2db      	uxtb	r3, r3
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d107      	bne.n	800670a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	223c      	movs	r2, #60	; 0x3c
 80066fe:	2100      	movs	r1, #0
 8006700:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	0018      	movs	r0, r3
 8006706:	f7fd fa2f 	bl	8003b68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	223d      	movs	r2, #61	; 0x3d
 800670e:	2102      	movs	r1, #2
 8006710:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681a      	ldr	r2, [r3, #0]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	3304      	adds	r3, #4
 800671a:	0019      	movs	r1, r3
 800671c:	0010      	movs	r0, r2
 800671e:	f000 f90b 	bl	8006938 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2248      	movs	r2, #72	; 0x48
 8006726:	2101      	movs	r1, #1
 8006728:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	223e      	movs	r2, #62	; 0x3e
 800672e:	2101      	movs	r1, #1
 8006730:	5499      	strb	r1, [r3, r2]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	223f      	movs	r2, #63	; 0x3f
 8006736:	2101      	movs	r1, #1
 8006738:	5499      	strb	r1, [r3, r2]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2240      	movs	r2, #64	; 0x40
 800673e:	2101      	movs	r1, #1
 8006740:	5499      	strb	r1, [r3, r2]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2241      	movs	r2, #65	; 0x41
 8006746:	2101      	movs	r1, #1
 8006748:	5499      	strb	r1, [r3, r2]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2242      	movs	r2, #66	; 0x42
 800674e:	2101      	movs	r1, #1
 8006750:	5499      	strb	r1, [r3, r2]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2243      	movs	r2, #67	; 0x43
 8006756:	2101      	movs	r1, #1
 8006758:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2244      	movs	r2, #68	; 0x44
 800675e:	2101      	movs	r1, #1
 8006760:	5499      	strb	r1, [r3, r2]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2245      	movs	r2, #69	; 0x45
 8006766:	2101      	movs	r1, #1
 8006768:	5499      	strb	r1, [r3, r2]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2246      	movs	r2, #70	; 0x46
 800676e:	2101      	movs	r1, #1
 8006770:	5499      	strb	r1, [r3, r2]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2247      	movs	r2, #71	; 0x47
 8006776:	2101      	movs	r1, #1
 8006778:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	223d      	movs	r2, #61	; 0x3d
 800677e:	2101      	movs	r1, #1
 8006780:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006782:	2300      	movs	r3, #0
}
 8006784:	0018      	movs	r0, r3
 8006786:	46bd      	mov	sp, r7
 8006788:	b002      	add	sp, #8
 800678a:	bd80      	pop	{r7, pc}

0800678c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b084      	sub	sp, #16
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006796:	230f      	movs	r3, #15
 8006798:	18fb      	adds	r3, r7, r3
 800679a:	2200      	movs	r2, #0
 800679c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	223c      	movs	r2, #60	; 0x3c
 80067a2:	5c9b      	ldrb	r3, [r3, r2]
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	d101      	bne.n	80067ac <HAL_TIM_ConfigClockSource+0x20>
 80067a8:	2302      	movs	r3, #2
 80067aa:	e0bc      	b.n	8006926 <HAL_TIM_ConfigClockSource+0x19a>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	223c      	movs	r2, #60	; 0x3c
 80067b0:	2101      	movs	r1, #1
 80067b2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	223d      	movs	r2, #61	; 0x3d
 80067b8:	2102      	movs	r1, #2
 80067ba:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	689b      	ldr	r3, [r3, #8]
 80067c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	4a5a      	ldr	r2, [pc, #360]	; (8006930 <HAL_TIM_ConfigClockSource+0x1a4>)
 80067c8:	4013      	ands	r3, r2
 80067ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	4a59      	ldr	r2, [pc, #356]	; (8006934 <HAL_TIM_ConfigClockSource+0x1a8>)
 80067d0:	4013      	ands	r3, r2
 80067d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	68ba      	ldr	r2, [r7, #8]
 80067da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	2280      	movs	r2, #128	; 0x80
 80067e2:	0192      	lsls	r2, r2, #6
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d040      	beq.n	800686a <HAL_TIM_ConfigClockSource+0xde>
 80067e8:	2280      	movs	r2, #128	; 0x80
 80067ea:	0192      	lsls	r2, r2, #6
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d900      	bls.n	80067f2 <HAL_TIM_ConfigClockSource+0x66>
 80067f0:	e088      	b.n	8006904 <HAL_TIM_ConfigClockSource+0x178>
 80067f2:	2280      	movs	r2, #128	; 0x80
 80067f4:	0152      	lsls	r2, r2, #5
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d100      	bne.n	80067fc <HAL_TIM_ConfigClockSource+0x70>
 80067fa:	e088      	b.n	800690e <HAL_TIM_ConfigClockSource+0x182>
 80067fc:	2280      	movs	r2, #128	; 0x80
 80067fe:	0152      	lsls	r2, r2, #5
 8006800:	4293      	cmp	r3, r2
 8006802:	d900      	bls.n	8006806 <HAL_TIM_ConfigClockSource+0x7a>
 8006804:	e07e      	b.n	8006904 <HAL_TIM_ConfigClockSource+0x178>
 8006806:	2b70      	cmp	r3, #112	; 0x70
 8006808:	d018      	beq.n	800683c <HAL_TIM_ConfigClockSource+0xb0>
 800680a:	d900      	bls.n	800680e <HAL_TIM_ConfigClockSource+0x82>
 800680c:	e07a      	b.n	8006904 <HAL_TIM_ConfigClockSource+0x178>
 800680e:	2b60      	cmp	r3, #96	; 0x60
 8006810:	d04f      	beq.n	80068b2 <HAL_TIM_ConfigClockSource+0x126>
 8006812:	d900      	bls.n	8006816 <HAL_TIM_ConfigClockSource+0x8a>
 8006814:	e076      	b.n	8006904 <HAL_TIM_ConfigClockSource+0x178>
 8006816:	2b50      	cmp	r3, #80	; 0x50
 8006818:	d03b      	beq.n	8006892 <HAL_TIM_ConfigClockSource+0x106>
 800681a:	d900      	bls.n	800681e <HAL_TIM_ConfigClockSource+0x92>
 800681c:	e072      	b.n	8006904 <HAL_TIM_ConfigClockSource+0x178>
 800681e:	2b40      	cmp	r3, #64	; 0x40
 8006820:	d057      	beq.n	80068d2 <HAL_TIM_ConfigClockSource+0x146>
 8006822:	d900      	bls.n	8006826 <HAL_TIM_ConfigClockSource+0x9a>
 8006824:	e06e      	b.n	8006904 <HAL_TIM_ConfigClockSource+0x178>
 8006826:	2b30      	cmp	r3, #48	; 0x30
 8006828:	d063      	beq.n	80068f2 <HAL_TIM_ConfigClockSource+0x166>
 800682a:	d86b      	bhi.n	8006904 <HAL_TIM_ConfigClockSource+0x178>
 800682c:	2b20      	cmp	r3, #32
 800682e:	d060      	beq.n	80068f2 <HAL_TIM_ConfigClockSource+0x166>
 8006830:	d868      	bhi.n	8006904 <HAL_TIM_ConfigClockSource+0x178>
 8006832:	2b00      	cmp	r3, #0
 8006834:	d05d      	beq.n	80068f2 <HAL_TIM_ConfigClockSource+0x166>
 8006836:	2b10      	cmp	r3, #16
 8006838:	d05b      	beq.n	80068f2 <HAL_TIM_ConfigClockSource+0x166>
 800683a:	e063      	b.n	8006904 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800684c:	f000 f95c 	bl	8006b08 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	689b      	ldr	r3, [r3, #8]
 8006856:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	2277      	movs	r2, #119	; 0x77
 800685c:	4313      	orrs	r3, r2
 800685e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	68ba      	ldr	r2, [r7, #8]
 8006866:	609a      	str	r2, [r3, #8]
      break;
 8006868:	e052      	b.n	8006910 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800687a:	f000 f945 	bl	8006b08 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	689a      	ldr	r2, [r3, #8]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	2180      	movs	r1, #128	; 0x80
 800688a:	01c9      	lsls	r1, r1, #7
 800688c:	430a      	orrs	r2, r1
 800688e:	609a      	str	r2, [r3, #8]
      break;
 8006890:	e03e      	b.n	8006910 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800689e:	001a      	movs	r2, r3
 80068a0:	f000 f8b6 	bl	8006a10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	2150      	movs	r1, #80	; 0x50
 80068aa:	0018      	movs	r0, r3
 80068ac:	f000 f910 	bl	8006ad0 <TIM_ITRx_SetConfig>
      break;
 80068b0:	e02e      	b.n	8006910 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80068be:	001a      	movs	r2, r3
 80068c0:	f000 f8d4 	bl	8006a6c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	2160      	movs	r1, #96	; 0x60
 80068ca:	0018      	movs	r0, r3
 80068cc:	f000 f900 	bl	8006ad0 <TIM_ITRx_SetConfig>
      break;
 80068d0:	e01e      	b.n	8006910 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80068de:	001a      	movs	r2, r3
 80068e0:	f000 f896 	bl	8006a10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	2140      	movs	r1, #64	; 0x40
 80068ea:	0018      	movs	r0, r3
 80068ec:	f000 f8f0 	bl	8006ad0 <TIM_ITRx_SetConfig>
      break;
 80068f0:	e00e      	b.n	8006910 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681a      	ldr	r2, [r3, #0]
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	0019      	movs	r1, r3
 80068fc:	0010      	movs	r0, r2
 80068fe:	f000 f8e7 	bl	8006ad0 <TIM_ITRx_SetConfig>
      break;
 8006902:	e005      	b.n	8006910 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8006904:	230f      	movs	r3, #15
 8006906:	18fb      	adds	r3, r7, r3
 8006908:	2201      	movs	r2, #1
 800690a:	701a      	strb	r2, [r3, #0]
      break;
 800690c:	e000      	b.n	8006910 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800690e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	223d      	movs	r2, #61	; 0x3d
 8006914:	2101      	movs	r1, #1
 8006916:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	223c      	movs	r2, #60	; 0x3c
 800691c:	2100      	movs	r1, #0
 800691e:	5499      	strb	r1, [r3, r2]

  return status;
 8006920:	230f      	movs	r3, #15
 8006922:	18fb      	adds	r3, r7, r3
 8006924:	781b      	ldrb	r3, [r3, #0]
}
 8006926:	0018      	movs	r0, r3
 8006928:	46bd      	mov	sp, r7
 800692a:	b004      	add	sp, #16
 800692c:	bd80      	pop	{r7, pc}
 800692e:	46c0      	nop			; (mov r8, r8)
 8006930:	ffceff88 	.word	0xffceff88
 8006934:	ffff00ff 	.word	0xffff00ff

08006938 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b084      	sub	sp, #16
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	4a2b      	ldr	r2, [pc, #172]	; (80069f8 <TIM_Base_SetConfig+0xc0>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d003      	beq.n	8006958 <TIM_Base_SetConfig+0x20>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	4a2a      	ldr	r2, [pc, #168]	; (80069fc <TIM_Base_SetConfig+0xc4>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d108      	bne.n	800696a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2270      	movs	r2, #112	; 0x70
 800695c:	4393      	bics	r3, r2
 800695e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	68fa      	ldr	r2, [r7, #12]
 8006966:	4313      	orrs	r3, r2
 8006968:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	4a22      	ldr	r2, [pc, #136]	; (80069f8 <TIM_Base_SetConfig+0xc0>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d00f      	beq.n	8006992 <TIM_Base_SetConfig+0x5a>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	4a21      	ldr	r2, [pc, #132]	; (80069fc <TIM_Base_SetConfig+0xc4>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d00b      	beq.n	8006992 <TIM_Base_SetConfig+0x5a>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	4a20      	ldr	r2, [pc, #128]	; (8006a00 <TIM_Base_SetConfig+0xc8>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d007      	beq.n	8006992 <TIM_Base_SetConfig+0x5a>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	4a1f      	ldr	r2, [pc, #124]	; (8006a04 <TIM_Base_SetConfig+0xcc>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d003      	beq.n	8006992 <TIM_Base_SetConfig+0x5a>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	4a1e      	ldr	r2, [pc, #120]	; (8006a08 <TIM_Base_SetConfig+0xd0>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d108      	bne.n	80069a4 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	4a1d      	ldr	r2, [pc, #116]	; (8006a0c <TIM_Base_SetConfig+0xd4>)
 8006996:	4013      	ands	r3, r2
 8006998:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	68db      	ldr	r3, [r3, #12]
 800699e:	68fa      	ldr	r2, [r7, #12]
 80069a0:	4313      	orrs	r3, r2
 80069a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2280      	movs	r2, #128	; 0x80
 80069a8:	4393      	bics	r3, r2
 80069aa:	001a      	movs	r2, r3
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	695b      	ldr	r3, [r3, #20]
 80069b0:	4313      	orrs	r3, r2
 80069b2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	68fa      	ldr	r2, [r7, #12]
 80069b8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	689a      	ldr	r2, [r3, #8]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	4a0a      	ldr	r2, [pc, #40]	; (80069f8 <TIM_Base_SetConfig+0xc0>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d007      	beq.n	80069e2 <TIM_Base_SetConfig+0xaa>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	4a0b      	ldr	r2, [pc, #44]	; (8006a04 <TIM_Base_SetConfig+0xcc>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d003      	beq.n	80069e2 <TIM_Base_SetConfig+0xaa>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	4a0a      	ldr	r2, [pc, #40]	; (8006a08 <TIM_Base_SetConfig+0xd0>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d103      	bne.n	80069ea <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	691a      	ldr	r2, [r3, #16]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2201      	movs	r2, #1
 80069ee:	615a      	str	r2, [r3, #20]
}
 80069f0:	46c0      	nop			; (mov r8, r8)
 80069f2:	46bd      	mov	sp, r7
 80069f4:	b004      	add	sp, #16
 80069f6:	bd80      	pop	{r7, pc}
 80069f8:	40012c00 	.word	0x40012c00
 80069fc:	40000400 	.word	0x40000400
 8006a00:	40002000 	.word	0x40002000
 8006a04:	40014400 	.word	0x40014400
 8006a08:	40014800 	.word	0x40014800
 8006a0c:	fffffcff 	.word	0xfffffcff

08006a10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b086      	sub	sp, #24
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	60f8      	str	r0, [r7, #12]
 8006a18:	60b9      	str	r1, [r7, #8]
 8006a1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	6a1b      	ldr	r3, [r3, #32]
 8006a20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	6a1b      	ldr	r3, [r3, #32]
 8006a26:	2201      	movs	r2, #1
 8006a28:	4393      	bics	r3, r2
 8006a2a:	001a      	movs	r2, r3
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	699b      	ldr	r3, [r3, #24]
 8006a34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	22f0      	movs	r2, #240	; 0xf0
 8006a3a:	4393      	bics	r3, r2
 8006a3c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	011b      	lsls	r3, r3, #4
 8006a42:	693a      	ldr	r2, [r7, #16]
 8006a44:	4313      	orrs	r3, r2
 8006a46:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	220a      	movs	r2, #10
 8006a4c:	4393      	bics	r3, r2
 8006a4e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a50:	697a      	ldr	r2, [r7, #20]
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	4313      	orrs	r3, r2
 8006a56:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	693a      	ldr	r2, [r7, #16]
 8006a5c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	697a      	ldr	r2, [r7, #20]
 8006a62:	621a      	str	r2, [r3, #32]
}
 8006a64:	46c0      	nop			; (mov r8, r8)
 8006a66:	46bd      	mov	sp, r7
 8006a68:	b006      	add	sp, #24
 8006a6a:	bd80      	pop	{r7, pc}

08006a6c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b086      	sub	sp, #24
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	60f8      	str	r0, [r7, #12]
 8006a74:	60b9      	str	r1, [r7, #8]
 8006a76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	6a1b      	ldr	r3, [r3, #32]
 8006a7c:	2210      	movs	r2, #16
 8006a7e:	4393      	bics	r3, r2
 8006a80:	001a      	movs	r2, r3
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	699b      	ldr	r3, [r3, #24]
 8006a8a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	6a1b      	ldr	r3, [r3, #32]
 8006a90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	4a0d      	ldr	r2, [pc, #52]	; (8006acc <TIM_TI2_ConfigInputStage+0x60>)
 8006a96:	4013      	ands	r3, r2
 8006a98:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	031b      	lsls	r3, r3, #12
 8006a9e:	697a      	ldr	r2, [r7, #20]
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	22a0      	movs	r2, #160	; 0xa0
 8006aa8:	4393      	bics	r3, r2
 8006aaa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	011b      	lsls	r3, r3, #4
 8006ab0:	693a      	ldr	r2, [r7, #16]
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	697a      	ldr	r2, [r7, #20]
 8006aba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	693a      	ldr	r2, [r7, #16]
 8006ac0:	621a      	str	r2, [r3, #32]
}
 8006ac2:	46c0      	nop			; (mov r8, r8)
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	b006      	add	sp, #24
 8006ac8:	bd80      	pop	{r7, pc}
 8006aca:	46c0      	nop			; (mov r8, r8)
 8006acc:	ffff0fff 	.word	0xffff0fff

08006ad0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b084      	sub	sp, #16
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
 8006ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	4a08      	ldr	r2, [pc, #32]	; (8006b04 <TIM_ITRx_SetConfig+0x34>)
 8006ae4:	4013      	ands	r3, r2
 8006ae6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ae8:	683a      	ldr	r2, [r7, #0]
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	4313      	orrs	r3, r2
 8006aee:	2207      	movs	r2, #7
 8006af0:	4313      	orrs	r3, r2
 8006af2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	68fa      	ldr	r2, [r7, #12]
 8006af8:	609a      	str	r2, [r3, #8]
}
 8006afa:	46c0      	nop			; (mov r8, r8)
 8006afc:	46bd      	mov	sp, r7
 8006afe:	b004      	add	sp, #16
 8006b00:	bd80      	pop	{r7, pc}
 8006b02:	46c0      	nop			; (mov r8, r8)
 8006b04:	ffcfff8f 	.word	0xffcfff8f

08006b08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b086      	sub	sp, #24
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	60f8      	str	r0, [r7, #12]
 8006b10:	60b9      	str	r1, [r7, #8]
 8006b12:	607a      	str	r2, [r7, #4]
 8006b14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	689b      	ldr	r3, [r3, #8]
 8006b1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	4a09      	ldr	r2, [pc, #36]	; (8006b44 <TIM_ETR_SetConfig+0x3c>)
 8006b20:	4013      	ands	r3, r2
 8006b22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	021a      	lsls	r2, r3, #8
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	431a      	orrs	r2, r3
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	697a      	ldr	r2, [r7, #20]
 8006b32:	4313      	orrs	r3, r2
 8006b34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	697a      	ldr	r2, [r7, #20]
 8006b3a:	609a      	str	r2, [r3, #8]
}
 8006b3c:	46c0      	nop			; (mov r8, r8)
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	b006      	add	sp, #24
 8006b42:	bd80      	pop	{r7, pc}
 8006b44:	ffff00ff 	.word	0xffff00ff

08006b48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b084      	sub	sp, #16
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	223c      	movs	r2, #60	; 0x3c
 8006b56:	5c9b      	ldrb	r3, [r3, r2]
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d101      	bne.n	8006b60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b5c:	2302      	movs	r3, #2
 8006b5e:	e04a      	b.n	8006bf6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	223c      	movs	r2, #60	; 0x3c
 8006b64:	2101      	movs	r1, #1
 8006b66:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	223d      	movs	r2, #61	; 0x3d
 8006b6c:	2102      	movs	r1, #2
 8006b6e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a1e      	ldr	r2, [pc, #120]	; (8006c00 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d108      	bne.n	8006b9c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	4a1d      	ldr	r2, [pc, #116]	; (8006c04 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8006b8e:	4013      	ands	r3, r2
 8006b90:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	68fa      	ldr	r2, [r7, #12]
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2270      	movs	r2, #112	; 0x70
 8006ba0:	4393      	bics	r3, r2
 8006ba2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	68fa      	ldr	r2, [r7, #12]
 8006baa:	4313      	orrs	r3, r2
 8006bac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	68fa      	ldr	r2, [r7, #12]
 8006bb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a11      	ldr	r2, [pc, #68]	; (8006c00 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d004      	beq.n	8006bca <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a10      	ldr	r2, [pc, #64]	; (8006c08 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d10c      	bne.n	8006be4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	2280      	movs	r2, #128	; 0x80
 8006bce:	4393      	bics	r3, r2
 8006bd0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	689b      	ldr	r3, [r3, #8]
 8006bd6:	68ba      	ldr	r2, [r7, #8]
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	68ba      	ldr	r2, [r7, #8]
 8006be2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	223d      	movs	r2, #61	; 0x3d
 8006be8:	2101      	movs	r1, #1
 8006bea:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	223c      	movs	r2, #60	; 0x3c
 8006bf0:	2100      	movs	r1, #0
 8006bf2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006bf4:	2300      	movs	r3, #0
}
 8006bf6:	0018      	movs	r0, r3
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	b004      	add	sp, #16
 8006bfc:	bd80      	pop	{r7, pc}
 8006bfe:	46c0      	nop			; (mov r8, r8)
 8006c00:	40012c00 	.word	0x40012c00
 8006c04:	ff0fffff 	.word	0xff0fffff
 8006c08:	40000400 	.word	0x40000400

08006c0c <siprintf>:
 8006c0c:	b40e      	push	{r1, r2, r3}
 8006c0e:	b500      	push	{lr}
 8006c10:	490b      	ldr	r1, [pc, #44]	; (8006c40 <siprintf+0x34>)
 8006c12:	b09c      	sub	sp, #112	; 0x70
 8006c14:	ab1d      	add	r3, sp, #116	; 0x74
 8006c16:	9002      	str	r0, [sp, #8]
 8006c18:	9006      	str	r0, [sp, #24]
 8006c1a:	9107      	str	r1, [sp, #28]
 8006c1c:	9104      	str	r1, [sp, #16]
 8006c1e:	4809      	ldr	r0, [pc, #36]	; (8006c44 <siprintf+0x38>)
 8006c20:	4909      	ldr	r1, [pc, #36]	; (8006c48 <siprintf+0x3c>)
 8006c22:	cb04      	ldmia	r3!, {r2}
 8006c24:	9105      	str	r1, [sp, #20]
 8006c26:	6800      	ldr	r0, [r0, #0]
 8006c28:	a902      	add	r1, sp, #8
 8006c2a:	9301      	str	r3, [sp, #4]
 8006c2c:	f000 f9a2 	bl	8006f74 <_svfiprintf_r>
 8006c30:	2200      	movs	r2, #0
 8006c32:	9b02      	ldr	r3, [sp, #8]
 8006c34:	701a      	strb	r2, [r3, #0]
 8006c36:	b01c      	add	sp, #112	; 0x70
 8006c38:	bc08      	pop	{r3}
 8006c3a:	b003      	add	sp, #12
 8006c3c:	4718      	bx	r3
 8006c3e:	46c0      	nop			; (mov r8, r8)
 8006c40:	7fffffff 	.word	0x7fffffff
 8006c44:	20000058 	.word	0x20000058
 8006c48:	ffff0208 	.word	0xffff0208

08006c4c <memset>:
 8006c4c:	0003      	movs	r3, r0
 8006c4e:	1882      	adds	r2, r0, r2
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d100      	bne.n	8006c56 <memset+0xa>
 8006c54:	4770      	bx	lr
 8006c56:	7019      	strb	r1, [r3, #0]
 8006c58:	3301      	adds	r3, #1
 8006c5a:	e7f9      	b.n	8006c50 <memset+0x4>

08006c5c <__errno>:
 8006c5c:	4b01      	ldr	r3, [pc, #4]	; (8006c64 <__errno+0x8>)
 8006c5e:	6818      	ldr	r0, [r3, #0]
 8006c60:	4770      	bx	lr
 8006c62:	46c0      	nop			; (mov r8, r8)
 8006c64:	20000058 	.word	0x20000058

08006c68 <__libc_init_array>:
 8006c68:	b570      	push	{r4, r5, r6, lr}
 8006c6a:	2600      	movs	r6, #0
 8006c6c:	4c0c      	ldr	r4, [pc, #48]	; (8006ca0 <__libc_init_array+0x38>)
 8006c6e:	4d0d      	ldr	r5, [pc, #52]	; (8006ca4 <__libc_init_array+0x3c>)
 8006c70:	1b64      	subs	r4, r4, r5
 8006c72:	10a4      	asrs	r4, r4, #2
 8006c74:	42a6      	cmp	r6, r4
 8006c76:	d109      	bne.n	8006c8c <__libc_init_array+0x24>
 8006c78:	2600      	movs	r6, #0
 8006c7a:	f000 fd7f 	bl	800777c <_init>
 8006c7e:	4c0a      	ldr	r4, [pc, #40]	; (8006ca8 <__libc_init_array+0x40>)
 8006c80:	4d0a      	ldr	r5, [pc, #40]	; (8006cac <__libc_init_array+0x44>)
 8006c82:	1b64      	subs	r4, r4, r5
 8006c84:	10a4      	asrs	r4, r4, #2
 8006c86:	42a6      	cmp	r6, r4
 8006c88:	d105      	bne.n	8006c96 <__libc_init_array+0x2e>
 8006c8a:	bd70      	pop	{r4, r5, r6, pc}
 8006c8c:	00b3      	lsls	r3, r6, #2
 8006c8e:	58eb      	ldr	r3, [r5, r3]
 8006c90:	4798      	blx	r3
 8006c92:	3601      	adds	r6, #1
 8006c94:	e7ee      	b.n	8006c74 <__libc_init_array+0xc>
 8006c96:	00b3      	lsls	r3, r6, #2
 8006c98:	58eb      	ldr	r3, [r5, r3]
 8006c9a:	4798      	blx	r3
 8006c9c:	3601      	adds	r6, #1
 8006c9e:	e7f2      	b.n	8006c86 <__libc_init_array+0x1e>
 8006ca0:	080078f0 	.word	0x080078f0
 8006ca4:	080078f0 	.word	0x080078f0
 8006ca8:	080078f4 	.word	0x080078f4
 8006cac:	080078f0 	.word	0x080078f0

08006cb0 <__retarget_lock_acquire_recursive>:
 8006cb0:	4770      	bx	lr

08006cb2 <__retarget_lock_release_recursive>:
 8006cb2:	4770      	bx	lr

08006cb4 <_free_r>:
 8006cb4:	b570      	push	{r4, r5, r6, lr}
 8006cb6:	0005      	movs	r5, r0
 8006cb8:	2900      	cmp	r1, #0
 8006cba:	d010      	beq.n	8006cde <_free_r+0x2a>
 8006cbc:	1f0c      	subs	r4, r1, #4
 8006cbe:	6823      	ldr	r3, [r4, #0]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	da00      	bge.n	8006cc6 <_free_r+0x12>
 8006cc4:	18e4      	adds	r4, r4, r3
 8006cc6:	0028      	movs	r0, r5
 8006cc8:	f000 f8e2 	bl	8006e90 <__malloc_lock>
 8006ccc:	4a1d      	ldr	r2, [pc, #116]	; (8006d44 <_free_r+0x90>)
 8006cce:	6813      	ldr	r3, [r2, #0]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d105      	bne.n	8006ce0 <_free_r+0x2c>
 8006cd4:	6063      	str	r3, [r4, #4]
 8006cd6:	6014      	str	r4, [r2, #0]
 8006cd8:	0028      	movs	r0, r5
 8006cda:	f000 f8e1 	bl	8006ea0 <__malloc_unlock>
 8006cde:	bd70      	pop	{r4, r5, r6, pc}
 8006ce0:	42a3      	cmp	r3, r4
 8006ce2:	d908      	bls.n	8006cf6 <_free_r+0x42>
 8006ce4:	6820      	ldr	r0, [r4, #0]
 8006ce6:	1821      	adds	r1, r4, r0
 8006ce8:	428b      	cmp	r3, r1
 8006cea:	d1f3      	bne.n	8006cd4 <_free_r+0x20>
 8006cec:	6819      	ldr	r1, [r3, #0]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	1809      	adds	r1, r1, r0
 8006cf2:	6021      	str	r1, [r4, #0]
 8006cf4:	e7ee      	b.n	8006cd4 <_free_r+0x20>
 8006cf6:	001a      	movs	r2, r3
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d001      	beq.n	8006d02 <_free_r+0x4e>
 8006cfe:	42a3      	cmp	r3, r4
 8006d00:	d9f9      	bls.n	8006cf6 <_free_r+0x42>
 8006d02:	6811      	ldr	r1, [r2, #0]
 8006d04:	1850      	adds	r0, r2, r1
 8006d06:	42a0      	cmp	r0, r4
 8006d08:	d10b      	bne.n	8006d22 <_free_r+0x6e>
 8006d0a:	6820      	ldr	r0, [r4, #0]
 8006d0c:	1809      	adds	r1, r1, r0
 8006d0e:	1850      	adds	r0, r2, r1
 8006d10:	6011      	str	r1, [r2, #0]
 8006d12:	4283      	cmp	r3, r0
 8006d14:	d1e0      	bne.n	8006cd8 <_free_r+0x24>
 8006d16:	6818      	ldr	r0, [r3, #0]
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	1841      	adds	r1, r0, r1
 8006d1c:	6011      	str	r1, [r2, #0]
 8006d1e:	6053      	str	r3, [r2, #4]
 8006d20:	e7da      	b.n	8006cd8 <_free_r+0x24>
 8006d22:	42a0      	cmp	r0, r4
 8006d24:	d902      	bls.n	8006d2c <_free_r+0x78>
 8006d26:	230c      	movs	r3, #12
 8006d28:	602b      	str	r3, [r5, #0]
 8006d2a:	e7d5      	b.n	8006cd8 <_free_r+0x24>
 8006d2c:	6820      	ldr	r0, [r4, #0]
 8006d2e:	1821      	adds	r1, r4, r0
 8006d30:	428b      	cmp	r3, r1
 8006d32:	d103      	bne.n	8006d3c <_free_r+0x88>
 8006d34:	6819      	ldr	r1, [r3, #0]
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	1809      	adds	r1, r1, r0
 8006d3a:	6021      	str	r1, [r4, #0]
 8006d3c:	6063      	str	r3, [r4, #4]
 8006d3e:	6054      	str	r4, [r2, #4]
 8006d40:	e7ca      	b.n	8006cd8 <_free_r+0x24>
 8006d42:	46c0      	nop			; (mov r8, r8)
 8006d44:	20000748 	.word	0x20000748

08006d48 <sbrk_aligned>:
 8006d48:	b570      	push	{r4, r5, r6, lr}
 8006d4a:	4e0f      	ldr	r6, [pc, #60]	; (8006d88 <sbrk_aligned+0x40>)
 8006d4c:	000d      	movs	r5, r1
 8006d4e:	6831      	ldr	r1, [r6, #0]
 8006d50:	0004      	movs	r4, r0
 8006d52:	2900      	cmp	r1, #0
 8006d54:	d102      	bne.n	8006d5c <sbrk_aligned+0x14>
 8006d56:	f000 fba1 	bl	800749c <_sbrk_r>
 8006d5a:	6030      	str	r0, [r6, #0]
 8006d5c:	0029      	movs	r1, r5
 8006d5e:	0020      	movs	r0, r4
 8006d60:	f000 fb9c 	bl	800749c <_sbrk_r>
 8006d64:	1c43      	adds	r3, r0, #1
 8006d66:	d00a      	beq.n	8006d7e <sbrk_aligned+0x36>
 8006d68:	2303      	movs	r3, #3
 8006d6a:	1cc5      	adds	r5, r0, #3
 8006d6c:	439d      	bics	r5, r3
 8006d6e:	42a8      	cmp	r0, r5
 8006d70:	d007      	beq.n	8006d82 <sbrk_aligned+0x3a>
 8006d72:	1a29      	subs	r1, r5, r0
 8006d74:	0020      	movs	r0, r4
 8006d76:	f000 fb91 	bl	800749c <_sbrk_r>
 8006d7a:	3001      	adds	r0, #1
 8006d7c:	d101      	bne.n	8006d82 <sbrk_aligned+0x3a>
 8006d7e:	2501      	movs	r5, #1
 8006d80:	426d      	negs	r5, r5
 8006d82:	0028      	movs	r0, r5
 8006d84:	bd70      	pop	{r4, r5, r6, pc}
 8006d86:	46c0      	nop			; (mov r8, r8)
 8006d88:	2000074c 	.word	0x2000074c

08006d8c <_malloc_r>:
 8006d8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d8e:	2203      	movs	r2, #3
 8006d90:	1ccb      	adds	r3, r1, #3
 8006d92:	4393      	bics	r3, r2
 8006d94:	3308      	adds	r3, #8
 8006d96:	0006      	movs	r6, r0
 8006d98:	001f      	movs	r7, r3
 8006d9a:	2b0c      	cmp	r3, #12
 8006d9c:	d238      	bcs.n	8006e10 <_malloc_r+0x84>
 8006d9e:	270c      	movs	r7, #12
 8006da0:	42b9      	cmp	r1, r7
 8006da2:	d837      	bhi.n	8006e14 <_malloc_r+0x88>
 8006da4:	0030      	movs	r0, r6
 8006da6:	f000 f873 	bl	8006e90 <__malloc_lock>
 8006daa:	4b38      	ldr	r3, [pc, #224]	; (8006e8c <_malloc_r+0x100>)
 8006dac:	9300      	str	r3, [sp, #0]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	001c      	movs	r4, r3
 8006db2:	2c00      	cmp	r4, #0
 8006db4:	d133      	bne.n	8006e1e <_malloc_r+0x92>
 8006db6:	0039      	movs	r1, r7
 8006db8:	0030      	movs	r0, r6
 8006dba:	f7ff ffc5 	bl	8006d48 <sbrk_aligned>
 8006dbe:	0004      	movs	r4, r0
 8006dc0:	1c43      	adds	r3, r0, #1
 8006dc2:	d15e      	bne.n	8006e82 <_malloc_r+0xf6>
 8006dc4:	9b00      	ldr	r3, [sp, #0]
 8006dc6:	681c      	ldr	r4, [r3, #0]
 8006dc8:	0025      	movs	r5, r4
 8006dca:	2d00      	cmp	r5, #0
 8006dcc:	d14e      	bne.n	8006e6c <_malloc_r+0xe0>
 8006dce:	2c00      	cmp	r4, #0
 8006dd0:	d051      	beq.n	8006e76 <_malloc_r+0xea>
 8006dd2:	6823      	ldr	r3, [r4, #0]
 8006dd4:	0029      	movs	r1, r5
 8006dd6:	18e3      	adds	r3, r4, r3
 8006dd8:	0030      	movs	r0, r6
 8006dda:	9301      	str	r3, [sp, #4]
 8006ddc:	f000 fb5e 	bl	800749c <_sbrk_r>
 8006de0:	9b01      	ldr	r3, [sp, #4]
 8006de2:	4283      	cmp	r3, r0
 8006de4:	d147      	bne.n	8006e76 <_malloc_r+0xea>
 8006de6:	6823      	ldr	r3, [r4, #0]
 8006de8:	0030      	movs	r0, r6
 8006dea:	1aff      	subs	r7, r7, r3
 8006dec:	0039      	movs	r1, r7
 8006dee:	f7ff ffab 	bl	8006d48 <sbrk_aligned>
 8006df2:	3001      	adds	r0, #1
 8006df4:	d03f      	beq.n	8006e76 <_malloc_r+0xea>
 8006df6:	6823      	ldr	r3, [r4, #0]
 8006df8:	19db      	adds	r3, r3, r7
 8006dfa:	6023      	str	r3, [r4, #0]
 8006dfc:	9b00      	ldr	r3, [sp, #0]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d040      	beq.n	8006e86 <_malloc_r+0xfa>
 8006e04:	685a      	ldr	r2, [r3, #4]
 8006e06:	42a2      	cmp	r2, r4
 8006e08:	d133      	bne.n	8006e72 <_malloc_r+0xe6>
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	605a      	str	r2, [r3, #4]
 8006e0e:	e014      	b.n	8006e3a <_malloc_r+0xae>
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	dac5      	bge.n	8006da0 <_malloc_r+0x14>
 8006e14:	230c      	movs	r3, #12
 8006e16:	2500      	movs	r5, #0
 8006e18:	6033      	str	r3, [r6, #0]
 8006e1a:	0028      	movs	r0, r5
 8006e1c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006e1e:	6821      	ldr	r1, [r4, #0]
 8006e20:	1bc9      	subs	r1, r1, r7
 8006e22:	d420      	bmi.n	8006e66 <_malloc_r+0xda>
 8006e24:	290b      	cmp	r1, #11
 8006e26:	d918      	bls.n	8006e5a <_malloc_r+0xce>
 8006e28:	19e2      	adds	r2, r4, r7
 8006e2a:	6027      	str	r7, [r4, #0]
 8006e2c:	42a3      	cmp	r3, r4
 8006e2e:	d112      	bne.n	8006e56 <_malloc_r+0xca>
 8006e30:	9b00      	ldr	r3, [sp, #0]
 8006e32:	601a      	str	r2, [r3, #0]
 8006e34:	6863      	ldr	r3, [r4, #4]
 8006e36:	6011      	str	r1, [r2, #0]
 8006e38:	6053      	str	r3, [r2, #4]
 8006e3a:	0030      	movs	r0, r6
 8006e3c:	0025      	movs	r5, r4
 8006e3e:	f000 f82f 	bl	8006ea0 <__malloc_unlock>
 8006e42:	2207      	movs	r2, #7
 8006e44:	350b      	adds	r5, #11
 8006e46:	1d23      	adds	r3, r4, #4
 8006e48:	4395      	bics	r5, r2
 8006e4a:	1aea      	subs	r2, r5, r3
 8006e4c:	429d      	cmp	r5, r3
 8006e4e:	d0e4      	beq.n	8006e1a <_malloc_r+0x8e>
 8006e50:	1b5b      	subs	r3, r3, r5
 8006e52:	50a3      	str	r3, [r4, r2]
 8006e54:	e7e1      	b.n	8006e1a <_malloc_r+0x8e>
 8006e56:	605a      	str	r2, [r3, #4]
 8006e58:	e7ec      	b.n	8006e34 <_malloc_r+0xa8>
 8006e5a:	6862      	ldr	r2, [r4, #4]
 8006e5c:	42a3      	cmp	r3, r4
 8006e5e:	d1d5      	bne.n	8006e0c <_malloc_r+0x80>
 8006e60:	9b00      	ldr	r3, [sp, #0]
 8006e62:	601a      	str	r2, [r3, #0]
 8006e64:	e7e9      	b.n	8006e3a <_malloc_r+0xae>
 8006e66:	0023      	movs	r3, r4
 8006e68:	6864      	ldr	r4, [r4, #4]
 8006e6a:	e7a2      	b.n	8006db2 <_malloc_r+0x26>
 8006e6c:	002c      	movs	r4, r5
 8006e6e:	686d      	ldr	r5, [r5, #4]
 8006e70:	e7ab      	b.n	8006dca <_malloc_r+0x3e>
 8006e72:	0013      	movs	r3, r2
 8006e74:	e7c4      	b.n	8006e00 <_malloc_r+0x74>
 8006e76:	230c      	movs	r3, #12
 8006e78:	0030      	movs	r0, r6
 8006e7a:	6033      	str	r3, [r6, #0]
 8006e7c:	f000 f810 	bl	8006ea0 <__malloc_unlock>
 8006e80:	e7cb      	b.n	8006e1a <_malloc_r+0x8e>
 8006e82:	6027      	str	r7, [r4, #0]
 8006e84:	e7d9      	b.n	8006e3a <_malloc_r+0xae>
 8006e86:	605b      	str	r3, [r3, #4]
 8006e88:	deff      	udf	#255	; 0xff
 8006e8a:	46c0      	nop			; (mov r8, r8)
 8006e8c:	20000748 	.word	0x20000748

08006e90 <__malloc_lock>:
 8006e90:	b510      	push	{r4, lr}
 8006e92:	4802      	ldr	r0, [pc, #8]	; (8006e9c <__malloc_lock+0xc>)
 8006e94:	f7ff ff0c 	bl	8006cb0 <__retarget_lock_acquire_recursive>
 8006e98:	bd10      	pop	{r4, pc}
 8006e9a:	46c0      	nop			; (mov r8, r8)
 8006e9c:	20000744 	.word	0x20000744

08006ea0 <__malloc_unlock>:
 8006ea0:	b510      	push	{r4, lr}
 8006ea2:	4802      	ldr	r0, [pc, #8]	; (8006eac <__malloc_unlock+0xc>)
 8006ea4:	f7ff ff05 	bl	8006cb2 <__retarget_lock_release_recursive>
 8006ea8:	bd10      	pop	{r4, pc}
 8006eaa:	46c0      	nop			; (mov r8, r8)
 8006eac:	20000744 	.word	0x20000744

08006eb0 <__ssputs_r>:
 8006eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006eb2:	b085      	sub	sp, #20
 8006eb4:	9301      	str	r3, [sp, #4]
 8006eb6:	9203      	str	r2, [sp, #12]
 8006eb8:	688e      	ldr	r6, [r1, #8]
 8006eba:	9a01      	ldr	r2, [sp, #4]
 8006ebc:	0007      	movs	r7, r0
 8006ebe:	000c      	movs	r4, r1
 8006ec0:	680b      	ldr	r3, [r1, #0]
 8006ec2:	4296      	cmp	r6, r2
 8006ec4:	d831      	bhi.n	8006f2a <__ssputs_r+0x7a>
 8006ec6:	898a      	ldrh	r2, [r1, #12]
 8006ec8:	2190      	movs	r1, #144	; 0x90
 8006eca:	00c9      	lsls	r1, r1, #3
 8006ecc:	420a      	tst	r2, r1
 8006ece:	d029      	beq.n	8006f24 <__ssputs_r+0x74>
 8006ed0:	2003      	movs	r0, #3
 8006ed2:	6921      	ldr	r1, [r4, #16]
 8006ed4:	1a5b      	subs	r3, r3, r1
 8006ed6:	9302      	str	r3, [sp, #8]
 8006ed8:	6963      	ldr	r3, [r4, #20]
 8006eda:	4343      	muls	r3, r0
 8006edc:	0fdd      	lsrs	r5, r3, #31
 8006ede:	18ed      	adds	r5, r5, r3
 8006ee0:	9b01      	ldr	r3, [sp, #4]
 8006ee2:	9802      	ldr	r0, [sp, #8]
 8006ee4:	3301      	adds	r3, #1
 8006ee6:	181b      	adds	r3, r3, r0
 8006ee8:	106d      	asrs	r5, r5, #1
 8006eea:	42ab      	cmp	r3, r5
 8006eec:	d900      	bls.n	8006ef0 <__ssputs_r+0x40>
 8006eee:	001d      	movs	r5, r3
 8006ef0:	0552      	lsls	r2, r2, #21
 8006ef2:	d529      	bpl.n	8006f48 <__ssputs_r+0x98>
 8006ef4:	0029      	movs	r1, r5
 8006ef6:	0038      	movs	r0, r7
 8006ef8:	f7ff ff48 	bl	8006d8c <_malloc_r>
 8006efc:	1e06      	subs	r6, r0, #0
 8006efe:	d02d      	beq.n	8006f5c <__ssputs_r+0xac>
 8006f00:	9a02      	ldr	r2, [sp, #8]
 8006f02:	6921      	ldr	r1, [r4, #16]
 8006f04:	f000 fae7 	bl	80074d6 <memcpy>
 8006f08:	89a2      	ldrh	r2, [r4, #12]
 8006f0a:	4b19      	ldr	r3, [pc, #100]	; (8006f70 <__ssputs_r+0xc0>)
 8006f0c:	401a      	ands	r2, r3
 8006f0e:	2380      	movs	r3, #128	; 0x80
 8006f10:	4313      	orrs	r3, r2
 8006f12:	81a3      	strh	r3, [r4, #12]
 8006f14:	9b02      	ldr	r3, [sp, #8]
 8006f16:	6126      	str	r6, [r4, #16]
 8006f18:	18f6      	adds	r6, r6, r3
 8006f1a:	6026      	str	r6, [r4, #0]
 8006f1c:	6165      	str	r5, [r4, #20]
 8006f1e:	9e01      	ldr	r6, [sp, #4]
 8006f20:	1aed      	subs	r5, r5, r3
 8006f22:	60a5      	str	r5, [r4, #8]
 8006f24:	9b01      	ldr	r3, [sp, #4]
 8006f26:	429e      	cmp	r6, r3
 8006f28:	d900      	bls.n	8006f2c <__ssputs_r+0x7c>
 8006f2a:	9e01      	ldr	r6, [sp, #4]
 8006f2c:	0032      	movs	r2, r6
 8006f2e:	9903      	ldr	r1, [sp, #12]
 8006f30:	6820      	ldr	r0, [r4, #0]
 8006f32:	f000 fa9f 	bl	8007474 <memmove>
 8006f36:	2000      	movs	r0, #0
 8006f38:	68a3      	ldr	r3, [r4, #8]
 8006f3a:	1b9b      	subs	r3, r3, r6
 8006f3c:	60a3      	str	r3, [r4, #8]
 8006f3e:	6823      	ldr	r3, [r4, #0]
 8006f40:	199b      	adds	r3, r3, r6
 8006f42:	6023      	str	r3, [r4, #0]
 8006f44:	b005      	add	sp, #20
 8006f46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f48:	002a      	movs	r2, r5
 8006f4a:	0038      	movs	r0, r7
 8006f4c:	f000 facc 	bl	80074e8 <_realloc_r>
 8006f50:	1e06      	subs	r6, r0, #0
 8006f52:	d1df      	bne.n	8006f14 <__ssputs_r+0x64>
 8006f54:	0038      	movs	r0, r7
 8006f56:	6921      	ldr	r1, [r4, #16]
 8006f58:	f7ff feac 	bl	8006cb4 <_free_r>
 8006f5c:	230c      	movs	r3, #12
 8006f5e:	2001      	movs	r0, #1
 8006f60:	603b      	str	r3, [r7, #0]
 8006f62:	89a2      	ldrh	r2, [r4, #12]
 8006f64:	3334      	adds	r3, #52	; 0x34
 8006f66:	4313      	orrs	r3, r2
 8006f68:	81a3      	strh	r3, [r4, #12]
 8006f6a:	4240      	negs	r0, r0
 8006f6c:	e7ea      	b.n	8006f44 <__ssputs_r+0x94>
 8006f6e:	46c0      	nop			; (mov r8, r8)
 8006f70:	fffffb7f 	.word	0xfffffb7f

08006f74 <_svfiprintf_r>:
 8006f74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f76:	b0a1      	sub	sp, #132	; 0x84
 8006f78:	9003      	str	r0, [sp, #12]
 8006f7a:	001d      	movs	r5, r3
 8006f7c:	898b      	ldrh	r3, [r1, #12]
 8006f7e:	000f      	movs	r7, r1
 8006f80:	0016      	movs	r6, r2
 8006f82:	061b      	lsls	r3, r3, #24
 8006f84:	d511      	bpl.n	8006faa <_svfiprintf_r+0x36>
 8006f86:	690b      	ldr	r3, [r1, #16]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d10e      	bne.n	8006faa <_svfiprintf_r+0x36>
 8006f8c:	2140      	movs	r1, #64	; 0x40
 8006f8e:	f7ff fefd 	bl	8006d8c <_malloc_r>
 8006f92:	6038      	str	r0, [r7, #0]
 8006f94:	6138      	str	r0, [r7, #16]
 8006f96:	2800      	cmp	r0, #0
 8006f98:	d105      	bne.n	8006fa6 <_svfiprintf_r+0x32>
 8006f9a:	230c      	movs	r3, #12
 8006f9c:	9a03      	ldr	r2, [sp, #12]
 8006f9e:	3801      	subs	r0, #1
 8006fa0:	6013      	str	r3, [r2, #0]
 8006fa2:	b021      	add	sp, #132	; 0x84
 8006fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fa6:	2340      	movs	r3, #64	; 0x40
 8006fa8:	617b      	str	r3, [r7, #20]
 8006faa:	2300      	movs	r3, #0
 8006fac:	ac08      	add	r4, sp, #32
 8006fae:	6163      	str	r3, [r4, #20]
 8006fb0:	3320      	adds	r3, #32
 8006fb2:	7663      	strb	r3, [r4, #25]
 8006fb4:	3310      	adds	r3, #16
 8006fb6:	76a3      	strb	r3, [r4, #26]
 8006fb8:	9507      	str	r5, [sp, #28]
 8006fba:	0035      	movs	r5, r6
 8006fbc:	782b      	ldrb	r3, [r5, #0]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d001      	beq.n	8006fc6 <_svfiprintf_r+0x52>
 8006fc2:	2b25      	cmp	r3, #37	; 0x25
 8006fc4:	d148      	bne.n	8007058 <_svfiprintf_r+0xe4>
 8006fc6:	1bab      	subs	r3, r5, r6
 8006fc8:	9305      	str	r3, [sp, #20]
 8006fca:	42b5      	cmp	r5, r6
 8006fcc:	d00b      	beq.n	8006fe6 <_svfiprintf_r+0x72>
 8006fce:	0032      	movs	r2, r6
 8006fd0:	0039      	movs	r1, r7
 8006fd2:	9803      	ldr	r0, [sp, #12]
 8006fd4:	f7ff ff6c 	bl	8006eb0 <__ssputs_r>
 8006fd8:	3001      	adds	r0, #1
 8006fda:	d100      	bne.n	8006fde <_svfiprintf_r+0x6a>
 8006fdc:	e0af      	b.n	800713e <_svfiprintf_r+0x1ca>
 8006fde:	6963      	ldr	r3, [r4, #20]
 8006fe0:	9a05      	ldr	r2, [sp, #20]
 8006fe2:	189b      	adds	r3, r3, r2
 8006fe4:	6163      	str	r3, [r4, #20]
 8006fe6:	782b      	ldrb	r3, [r5, #0]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d100      	bne.n	8006fee <_svfiprintf_r+0x7a>
 8006fec:	e0a7      	b.n	800713e <_svfiprintf_r+0x1ca>
 8006fee:	2201      	movs	r2, #1
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	4252      	negs	r2, r2
 8006ff4:	6062      	str	r2, [r4, #4]
 8006ff6:	a904      	add	r1, sp, #16
 8006ff8:	3254      	adds	r2, #84	; 0x54
 8006ffa:	1852      	adds	r2, r2, r1
 8006ffc:	1c6e      	adds	r6, r5, #1
 8006ffe:	6023      	str	r3, [r4, #0]
 8007000:	60e3      	str	r3, [r4, #12]
 8007002:	60a3      	str	r3, [r4, #8]
 8007004:	7013      	strb	r3, [r2, #0]
 8007006:	65a3      	str	r3, [r4, #88]	; 0x58
 8007008:	4b55      	ldr	r3, [pc, #340]	; (8007160 <_svfiprintf_r+0x1ec>)
 800700a:	2205      	movs	r2, #5
 800700c:	0018      	movs	r0, r3
 800700e:	7831      	ldrb	r1, [r6, #0]
 8007010:	9305      	str	r3, [sp, #20]
 8007012:	f000 fa55 	bl	80074c0 <memchr>
 8007016:	1c75      	adds	r5, r6, #1
 8007018:	2800      	cmp	r0, #0
 800701a:	d11f      	bne.n	800705c <_svfiprintf_r+0xe8>
 800701c:	6822      	ldr	r2, [r4, #0]
 800701e:	06d3      	lsls	r3, r2, #27
 8007020:	d504      	bpl.n	800702c <_svfiprintf_r+0xb8>
 8007022:	2353      	movs	r3, #83	; 0x53
 8007024:	a904      	add	r1, sp, #16
 8007026:	185b      	adds	r3, r3, r1
 8007028:	2120      	movs	r1, #32
 800702a:	7019      	strb	r1, [r3, #0]
 800702c:	0713      	lsls	r3, r2, #28
 800702e:	d504      	bpl.n	800703a <_svfiprintf_r+0xc6>
 8007030:	2353      	movs	r3, #83	; 0x53
 8007032:	a904      	add	r1, sp, #16
 8007034:	185b      	adds	r3, r3, r1
 8007036:	212b      	movs	r1, #43	; 0x2b
 8007038:	7019      	strb	r1, [r3, #0]
 800703a:	7833      	ldrb	r3, [r6, #0]
 800703c:	2b2a      	cmp	r3, #42	; 0x2a
 800703e:	d016      	beq.n	800706e <_svfiprintf_r+0xfa>
 8007040:	0035      	movs	r5, r6
 8007042:	2100      	movs	r1, #0
 8007044:	200a      	movs	r0, #10
 8007046:	68e3      	ldr	r3, [r4, #12]
 8007048:	782a      	ldrb	r2, [r5, #0]
 800704a:	1c6e      	adds	r6, r5, #1
 800704c:	3a30      	subs	r2, #48	; 0x30
 800704e:	2a09      	cmp	r2, #9
 8007050:	d94e      	bls.n	80070f0 <_svfiprintf_r+0x17c>
 8007052:	2900      	cmp	r1, #0
 8007054:	d111      	bne.n	800707a <_svfiprintf_r+0x106>
 8007056:	e017      	b.n	8007088 <_svfiprintf_r+0x114>
 8007058:	3501      	adds	r5, #1
 800705a:	e7af      	b.n	8006fbc <_svfiprintf_r+0x48>
 800705c:	9b05      	ldr	r3, [sp, #20]
 800705e:	6822      	ldr	r2, [r4, #0]
 8007060:	1ac0      	subs	r0, r0, r3
 8007062:	2301      	movs	r3, #1
 8007064:	4083      	lsls	r3, r0
 8007066:	4313      	orrs	r3, r2
 8007068:	002e      	movs	r6, r5
 800706a:	6023      	str	r3, [r4, #0]
 800706c:	e7cc      	b.n	8007008 <_svfiprintf_r+0x94>
 800706e:	9b07      	ldr	r3, [sp, #28]
 8007070:	1d19      	adds	r1, r3, #4
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	9107      	str	r1, [sp, #28]
 8007076:	2b00      	cmp	r3, #0
 8007078:	db01      	blt.n	800707e <_svfiprintf_r+0x10a>
 800707a:	930b      	str	r3, [sp, #44]	; 0x2c
 800707c:	e004      	b.n	8007088 <_svfiprintf_r+0x114>
 800707e:	425b      	negs	r3, r3
 8007080:	60e3      	str	r3, [r4, #12]
 8007082:	2302      	movs	r3, #2
 8007084:	4313      	orrs	r3, r2
 8007086:	6023      	str	r3, [r4, #0]
 8007088:	782b      	ldrb	r3, [r5, #0]
 800708a:	2b2e      	cmp	r3, #46	; 0x2e
 800708c:	d10a      	bne.n	80070a4 <_svfiprintf_r+0x130>
 800708e:	786b      	ldrb	r3, [r5, #1]
 8007090:	2b2a      	cmp	r3, #42	; 0x2a
 8007092:	d135      	bne.n	8007100 <_svfiprintf_r+0x18c>
 8007094:	9b07      	ldr	r3, [sp, #28]
 8007096:	3502      	adds	r5, #2
 8007098:	1d1a      	adds	r2, r3, #4
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	9207      	str	r2, [sp, #28]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	db2b      	blt.n	80070fa <_svfiprintf_r+0x186>
 80070a2:	9309      	str	r3, [sp, #36]	; 0x24
 80070a4:	4e2f      	ldr	r6, [pc, #188]	; (8007164 <_svfiprintf_r+0x1f0>)
 80070a6:	2203      	movs	r2, #3
 80070a8:	0030      	movs	r0, r6
 80070aa:	7829      	ldrb	r1, [r5, #0]
 80070ac:	f000 fa08 	bl	80074c0 <memchr>
 80070b0:	2800      	cmp	r0, #0
 80070b2:	d006      	beq.n	80070c2 <_svfiprintf_r+0x14e>
 80070b4:	2340      	movs	r3, #64	; 0x40
 80070b6:	1b80      	subs	r0, r0, r6
 80070b8:	4083      	lsls	r3, r0
 80070ba:	6822      	ldr	r2, [r4, #0]
 80070bc:	3501      	adds	r5, #1
 80070be:	4313      	orrs	r3, r2
 80070c0:	6023      	str	r3, [r4, #0]
 80070c2:	7829      	ldrb	r1, [r5, #0]
 80070c4:	2206      	movs	r2, #6
 80070c6:	4828      	ldr	r0, [pc, #160]	; (8007168 <_svfiprintf_r+0x1f4>)
 80070c8:	1c6e      	adds	r6, r5, #1
 80070ca:	7621      	strb	r1, [r4, #24]
 80070cc:	f000 f9f8 	bl	80074c0 <memchr>
 80070d0:	2800      	cmp	r0, #0
 80070d2:	d03c      	beq.n	800714e <_svfiprintf_r+0x1da>
 80070d4:	4b25      	ldr	r3, [pc, #148]	; (800716c <_svfiprintf_r+0x1f8>)
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d125      	bne.n	8007126 <_svfiprintf_r+0x1b2>
 80070da:	2207      	movs	r2, #7
 80070dc:	9b07      	ldr	r3, [sp, #28]
 80070de:	3307      	adds	r3, #7
 80070e0:	4393      	bics	r3, r2
 80070e2:	3308      	adds	r3, #8
 80070e4:	9307      	str	r3, [sp, #28]
 80070e6:	6963      	ldr	r3, [r4, #20]
 80070e8:	9a04      	ldr	r2, [sp, #16]
 80070ea:	189b      	adds	r3, r3, r2
 80070ec:	6163      	str	r3, [r4, #20]
 80070ee:	e764      	b.n	8006fba <_svfiprintf_r+0x46>
 80070f0:	4343      	muls	r3, r0
 80070f2:	0035      	movs	r5, r6
 80070f4:	2101      	movs	r1, #1
 80070f6:	189b      	adds	r3, r3, r2
 80070f8:	e7a6      	b.n	8007048 <_svfiprintf_r+0xd4>
 80070fa:	2301      	movs	r3, #1
 80070fc:	425b      	negs	r3, r3
 80070fe:	e7d0      	b.n	80070a2 <_svfiprintf_r+0x12e>
 8007100:	2300      	movs	r3, #0
 8007102:	200a      	movs	r0, #10
 8007104:	001a      	movs	r2, r3
 8007106:	3501      	adds	r5, #1
 8007108:	6063      	str	r3, [r4, #4]
 800710a:	7829      	ldrb	r1, [r5, #0]
 800710c:	1c6e      	adds	r6, r5, #1
 800710e:	3930      	subs	r1, #48	; 0x30
 8007110:	2909      	cmp	r1, #9
 8007112:	d903      	bls.n	800711c <_svfiprintf_r+0x1a8>
 8007114:	2b00      	cmp	r3, #0
 8007116:	d0c5      	beq.n	80070a4 <_svfiprintf_r+0x130>
 8007118:	9209      	str	r2, [sp, #36]	; 0x24
 800711a:	e7c3      	b.n	80070a4 <_svfiprintf_r+0x130>
 800711c:	4342      	muls	r2, r0
 800711e:	0035      	movs	r5, r6
 8007120:	2301      	movs	r3, #1
 8007122:	1852      	adds	r2, r2, r1
 8007124:	e7f1      	b.n	800710a <_svfiprintf_r+0x196>
 8007126:	aa07      	add	r2, sp, #28
 8007128:	9200      	str	r2, [sp, #0]
 800712a:	0021      	movs	r1, r4
 800712c:	003a      	movs	r2, r7
 800712e:	4b10      	ldr	r3, [pc, #64]	; (8007170 <_svfiprintf_r+0x1fc>)
 8007130:	9803      	ldr	r0, [sp, #12]
 8007132:	e000      	b.n	8007136 <_svfiprintf_r+0x1c2>
 8007134:	bf00      	nop
 8007136:	9004      	str	r0, [sp, #16]
 8007138:	9b04      	ldr	r3, [sp, #16]
 800713a:	3301      	adds	r3, #1
 800713c:	d1d3      	bne.n	80070e6 <_svfiprintf_r+0x172>
 800713e:	89bb      	ldrh	r3, [r7, #12]
 8007140:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007142:	065b      	lsls	r3, r3, #25
 8007144:	d400      	bmi.n	8007148 <_svfiprintf_r+0x1d4>
 8007146:	e72c      	b.n	8006fa2 <_svfiprintf_r+0x2e>
 8007148:	2001      	movs	r0, #1
 800714a:	4240      	negs	r0, r0
 800714c:	e729      	b.n	8006fa2 <_svfiprintf_r+0x2e>
 800714e:	aa07      	add	r2, sp, #28
 8007150:	9200      	str	r2, [sp, #0]
 8007152:	0021      	movs	r1, r4
 8007154:	003a      	movs	r2, r7
 8007156:	4b06      	ldr	r3, [pc, #24]	; (8007170 <_svfiprintf_r+0x1fc>)
 8007158:	9803      	ldr	r0, [sp, #12]
 800715a:	f000 f87b 	bl	8007254 <_printf_i>
 800715e:	e7ea      	b.n	8007136 <_svfiprintf_r+0x1c2>
 8007160:	080078bc 	.word	0x080078bc
 8007164:	080078c2 	.word	0x080078c2
 8007168:	080078c6 	.word	0x080078c6
 800716c:	00000000 	.word	0x00000000
 8007170:	08006eb1 	.word	0x08006eb1

08007174 <_printf_common>:
 8007174:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007176:	0016      	movs	r6, r2
 8007178:	9301      	str	r3, [sp, #4]
 800717a:	688a      	ldr	r2, [r1, #8]
 800717c:	690b      	ldr	r3, [r1, #16]
 800717e:	000c      	movs	r4, r1
 8007180:	9000      	str	r0, [sp, #0]
 8007182:	4293      	cmp	r3, r2
 8007184:	da00      	bge.n	8007188 <_printf_common+0x14>
 8007186:	0013      	movs	r3, r2
 8007188:	0022      	movs	r2, r4
 800718a:	6033      	str	r3, [r6, #0]
 800718c:	3243      	adds	r2, #67	; 0x43
 800718e:	7812      	ldrb	r2, [r2, #0]
 8007190:	2a00      	cmp	r2, #0
 8007192:	d001      	beq.n	8007198 <_printf_common+0x24>
 8007194:	3301      	adds	r3, #1
 8007196:	6033      	str	r3, [r6, #0]
 8007198:	6823      	ldr	r3, [r4, #0]
 800719a:	069b      	lsls	r3, r3, #26
 800719c:	d502      	bpl.n	80071a4 <_printf_common+0x30>
 800719e:	6833      	ldr	r3, [r6, #0]
 80071a0:	3302      	adds	r3, #2
 80071a2:	6033      	str	r3, [r6, #0]
 80071a4:	6822      	ldr	r2, [r4, #0]
 80071a6:	2306      	movs	r3, #6
 80071a8:	0015      	movs	r5, r2
 80071aa:	401d      	ands	r5, r3
 80071ac:	421a      	tst	r2, r3
 80071ae:	d027      	beq.n	8007200 <_printf_common+0x8c>
 80071b0:	0023      	movs	r3, r4
 80071b2:	3343      	adds	r3, #67	; 0x43
 80071b4:	781b      	ldrb	r3, [r3, #0]
 80071b6:	1e5a      	subs	r2, r3, #1
 80071b8:	4193      	sbcs	r3, r2
 80071ba:	6822      	ldr	r2, [r4, #0]
 80071bc:	0692      	lsls	r2, r2, #26
 80071be:	d430      	bmi.n	8007222 <_printf_common+0xae>
 80071c0:	0022      	movs	r2, r4
 80071c2:	9901      	ldr	r1, [sp, #4]
 80071c4:	9800      	ldr	r0, [sp, #0]
 80071c6:	9d08      	ldr	r5, [sp, #32]
 80071c8:	3243      	adds	r2, #67	; 0x43
 80071ca:	47a8      	blx	r5
 80071cc:	3001      	adds	r0, #1
 80071ce:	d025      	beq.n	800721c <_printf_common+0xa8>
 80071d0:	2206      	movs	r2, #6
 80071d2:	6823      	ldr	r3, [r4, #0]
 80071d4:	2500      	movs	r5, #0
 80071d6:	4013      	ands	r3, r2
 80071d8:	2b04      	cmp	r3, #4
 80071da:	d105      	bne.n	80071e8 <_printf_common+0x74>
 80071dc:	6833      	ldr	r3, [r6, #0]
 80071de:	68e5      	ldr	r5, [r4, #12]
 80071e0:	1aed      	subs	r5, r5, r3
 80071e2:	43eb      	mvns	r3, r5
 80071e4:	17db      	asrs	r3, r3, #31
 80071e6:	401d      	ands	r5, r3
 80071e8:	68a3      	ldr	r3, [r4, #8]
 80071ea:	6922      	ldr	r2, [r4, #16]
 80071ec:	4293      	cmp	r3, r2
 80071ee:	dd01      	ble.n	80071f4 <_printf_common+0x80>
 80071f0:	1a9b      	subs	r3, r3, r2
 80071f2:	18ed      	adds	r5, r5, r3
 80071f4:	2600      	movs	r6, #0
 80071f6:	42b5      	cmp	r5, r6
 80071f8:	d120      	bne.n	800723c <_printf_common+0xc8>
 80071fa:	2000      	movs	r0, #0
 80071fc:	e010      	b.n	8007220 <_printf_common+0xac>
 80071fe:	3501      	adds	r5, #1
 8007200:	68e3      	ldr	r3, [r4, #12]
 8007202:	6832      	ldr	r2, [r6, #0]
 8007204:	1a9b      	subs	r3, r3, r2
 8007206:	42ab      	cmp	r3, r5
 8007208:	ddd2      	ble.n	80071b0 <_printf_common+0x3c>
 800720a:	0022      	movs	r2, r4
 800720c:	2301      	movs	r3, #1
 800720e:	9901      	ldr	r1, [sp, #4]
 8007210:	9800      	ldr	r0, [sp, #0]
 8007212:	9f08      	ldr	r7, [sp, #32]
 8007214:	3219      	adds	r2, #25
 8007216:	47b8      	blx	r7
 8007218:	3001      	adds	r0, #1
 800721a:	d1f0      	bne.n	80071fe <_printf_common+0x8a>
 800721c:	2001      	movs	r0, #1
 800721e:	4240      	negs	r0, r0
 8007220:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007222:	2030      	movs	r0, #48	; 0x30
 8007224:	18e1      	adds	r1, r4, r3
 8007226:	3143      	adds	r1, #67	; 0x43
 8007228:	7008      	strb	r0, [r1, #0]
 800722a:	0021      	movs	r1, r4
 800722c:	1c5a      	adds	r2, r3, #1
 800722e:	3145      	adds	r1, #69	; 0x45
 8007230:	7809      	ldrb	r1, [r1, #0]
 8007232:	18a2      	adds	r2, r4, r2
 8007234:	3243      	adds	r2, #67	; 0x43
 8007236:	3302      	adds	r3, #2
 8007238:	7011      	strb	r1, [r2, #0]
 800723a:	e7c1      	b.n	80071c0 <_printf_common+0x4c>
 800723c:	0022      	movs	r2, r4
 800723e:	2301      	movs	r3, #1
 8007240:	9901      	ldr	r1, [sp, #4]
 8007242:	9800      	ldr	r0, [sp, #0]
 8007244:	9f08      	ldr	r7, [sp, #32]
 8007246:	321a      	adds	r2, #26
 8007248:	47b8      	blx	r7
 800724a:	3001      	adds	r0, #1
 800724c:	d0e6      	beq.n	800721c <_printf_common+0xa8>
 800724e:	3601      	adds	r6, #1
 8007250:	e7d1      	b.n	80071f6 <_printf_common+0x82>
	...

08007254 <_printf_i>:
 8007254:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007256:	b08b      	sub	sp, #44	; 0x2c
 8007258:	9206      	str	r2, [sp, #24]
 800725a:	000a      	movs	r2, r1
 800725c:	3243      	adds	r2, #67	; 0x43
 800725e:	9307      	str	r3, [sp, #28]
 8007260:	9005      	str	r0, [sp, #20]
 8007262:	9204      	str	r2, [sp, #16]
 8007264:	7e0a      	ldrb	r2, [r1, #24]
 8007266:	000c      	movs	r4, r1
 8007268:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800726a:	2a78      	cmp	r2, #120	; 0x78
 800726c:	d809      	bhi.n	8007282 <_printf_i+0x2e>
 800726e:	2a62      	cmp	r2, #98	; 0x62
 8007270:	d80b      	bhi.n	800728a <_printf_i+0x36>
 8007272:	2a00      	cmp	r2, #0
 8007274:	d100      	bne.n	8007278 <_printf_i+0x24>
 8007276:	e0be      	b.n	80073f6 <_printf_i+0x1a2>
 8007278:	497c      	ldr	r1, [pc, #496]	; (800746c <_printf_i+0x218>)
 800727a:	9103      	str	r1, [sp, #12]
 800727c:	2a58      	cmp	r2, #88	; 0x58
 800727e:	d100      	bne.n	8007282 <_printf_i+0x2e>
 8007280:	e093      	b.n	80073aa <_printf_i+0x156>
 8007282:	0026      	movs	r6, r4
 8007284:	3642      	adds	r6, #66	; 0x42
 8007286:	7032      	strb	r2, [r6, #0]
 8007288:	e022      	b.n	80072d0 <_printf_i+0x7c>
 800728a:	0010      	movs	r0, r2
 800728c:	3863      	subs	r0, #99	; 0x63
 800728e:	2815      	cmp	r0, #21
 8007290:	d8f7      	bhi.n	8007282 <_printf_i+0x2e>
 8007292:	f7f8 ff35 	bl	8000100 <__gnu_thumb1_case_shi>
 8007296:	0016      	.short	0x0016
 8007298:	fff6001f 	.word	0xfff6001f
 800729c:	fff6fff6 	.word	0xfff6fff6
 80072a0:	001ffff6 	.word	0x001ffff6
 80072a4:	fff6fff6 	.word	0xfff6fff6
 80072a8:	fff6fff6 	.word	0xfff6fff6
 80072ac:	003600a3 	.word	0x003600a3
 80072b0:	fff60083 	.word	0xfff60083
 80072b4:	00b4fff6 	.word	0x00b4fff6
 80072b8:	0036fff6 	.word	0x0036fff6
 80072bc:	fff6fff6 	.word	0xfff6fff6
 80072c0:	0087      	.short	0x0087
 80072c2:	0026      	movs	r6, r4
 80072c4:	681a      	ldr	r2, [r3, #0]
 80072c6:	3642      	adds	r6, #66	; 0x42
 80072c8:	1d11      	adds	r1, r2, #4
 80072ca:	6019      	str	r1, [r3, #0]
 80072cc:	6813      	ldr	r3, [r2, #0]
 80072ce:	7033      	strb	r3, [r6, #0]
 80072d0:	2301      	movs	r3, #1
 80072d2:	e0a2      	b.n	800741a <_printf_i+0x1c6>
 80072d4:	6818      	ldr	r0, [r3, #0]
 80072d6:	6809      	ldr	r1, [r1, #0]
 80072d8:	1d02      	adds	r2, r0, #4
 80072da:	060d      	lsls	r5, r1, #24
 80072dc:	d50b      	bpl.n	80072f6 <_printf_i+0xa2>
 80072de:	6805      	ldr	r5, [r0, #0]
 80072e0:	601a      	str	r2, [r3, #0]
 80072e2:	2d00      	cmp	r5, #0
 80072e4:	da03      	bge.n	80072ee <_printf_i+0x9a>
 80072e6:	232d      	movs	r3, #45	; 0x2d
 80072e8:	9a04      	ldr	r2, [sp, #16]
 80072ea:	426d      	negs	r5, r5
 80072ec:	7013      	strb	r3, [r2, #0]
 80072ee:	4b5f      	ldr	r3, [pc, #380]	; (800746c <_printf_i+0x218>)
 80072f0:	270a      	movs	r7, #10
 80072f2:	9303      	str	r3, [sp, #12]
 80072f4:	e01b      	b.n	800732e <_printf_i+0xda>
 80072f6:	6805      	ldr	r5, [r0, #0]
 80072f8:	601a      	str	r2, [r3, #0]
 80072fa:	0649      	lsls	r1, r1, #25
 80072fc:	d5f1      	bpl.n	80072e2 <_printf_i+0x8e>
 80072fe:	b22d      	sxth	r5, r5
 8007300:	e7ef      	b.n	80072e2 <_printf_i+0x8e>
 8007302:	680d      	ldr	r5, [r1, #0]
 8007304:	6819      	ldr	r1, [r3, #0]
 8007306:	1d08      	adds	r0, r1, #4
 8007308:	6018      	str	r0, [r3, #0]
 800730a:	062e      	lsls	r6, r5, #24
 800730c:	d501      	bpl.n	8007312 <_printf_i+0xbe>
 800730e:	680d      	ldr	r5, [r1, #0]
 8007310:	e003      	b.n	800731a <_printf_i+0xc6>
 8007312:	066d      	lsls	r5, r5, #25
 8007314:	d5fb      	bpl.n	800730e <_printf_i+0xba>
 8007316:	680d      	ldr	r5, [r1, #0]
 8007318:	b2ad      	uxth	r5, r5
 800731a:	4b54      	ldr	r3, [pc, #336]	; (800746c <_printf_i+0x218>)
 800731c:	2708      	movs	r7, #8
 800731e:	9303      	str	r3, [sp, #12]
 8007320:	2a6f      	cmp	r2, #111	; 0x6f
 8007322:	d000      	beq.n	8007326 <_printf_i+0xd2>
 8007324:	3702      	adds	r7, #2
 8007326:	0023      	movs	r3, r4
 8007328:	2200      	movs	r2, #0
 800732a:	3343      	adds	r3, #67	; 0x43
 800732c:	701a      	strb	r2, [r3, #0]
 800732e:	6863      	ldr	r3, [r4, #4]
 8007330:	60a3      	str	r3, [r4, #8]
 8007332:	2b00      	cmp	r3, #0
 8007334:	db03      	blt.n	800733e <_printf_i+0xea>
 8007336:	2104      	movs	r1, #4
 8007338:	6822      	ldr	r2, [r4, #0]
 800733a:	438a      	bics	r2, r1
 800733c:	6022      	str	r2, [r4, #0]
 800733e:	2d00      	cmp	r5, #0
 8007340:	d102      	bne.n	8007348 <_printf_i+0xf4>
 8007342:	9e04      	ldr	r6, [sp, #16]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d00c      	beq.n	8007362 <_printf_i+0x10e>
 8007348:	9e04      	ldr	r6, [sp, #16]
 800734a:	0028      	movs	r0, r5
 800734c:	0039      	movs	r1, r7
 800734e:	f7f8 ff67 	bl	8000220 <__aeabi_uidivmod>
 8007352:	9b03      	ldr	r3, [sp, #12]
 8007354:	3e01      	subs	r6, #1
 8007356:	5c5b      	ldrb	r3, [r3, r1]
 8007358:	7033      	strb	r3, [r6, #0]
 800735a:	002b      	movs	r3, r5
 800735c:	0005      	movs	r5, r0
 800735e:	429f      	cmp	r7, r3
 8007360:	d9f3      	bls.n	800734a <_printf_i+0xf6>
 8007362:	2f08      	cmp	r7, #8
 8007364:	d109      	bne.n	800737a <_printf_i+0x126>
 8007366:	6823      	ldr	r3, [r4, #0]
 8007368:	07db      	lsls	r3, r3, #31
 800736a:	d506      	bpl.n	800737a <_printf_i+0x126>
 800736c:	6862      	ldr	r2, [r4, #4]
 800736e:	6923      	ldr	r3, [r4, #16]
 8007370:	429a      	cmp	r2, r3
 8007372:	dc02      	bgt.n	800737a <_printf_i+0x126>
 8007374:	2330      	movs	r3, #48	; 0x30
 8007376:	3e01      	subs	r6, #1
 8007378:	7033      	strb	r3, [r6, #0]
 800737a:	9b04      	ldr	r3, [sp, #16]
 800737c:	1b9b      	subs	r3, r3, r6
 800737e:	6123      	str	r3, [r4, #16]
 8007380:	9b07      	ldr	r3, [sp, #28]
 8007382:	0021      	movs	r1, r4
 8007384:	9300      	str	r3, [sp, #0]
 8007386:	9805      	ldr	r0, [sp, #20]
 8007388:	9b06      	ldr	r3, [sp, #24]
 800738a:	aa09      	add	r2, sp, #36	; 0x24
 800738c:	f7ff fef2 	bl	8007174 <_printf_common>
 8007390:	3001      	adds	r0, #1
 8007392:	d147      	bne.n	8007424 <_printf_i+0x1d0>
 8007394:	2001      	movs	r0, #1
 8007396:	4240      	negs	r0, r0
 8007398:	b00b      	add	sp, #44	; 0x2c
 800739a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800739c:	2220      	movs	r2, #32
 800739e:	6809      	ldr	r1, [r1, #0]
 80073a0:	430a      	orrs	r2, r1
 80073a2:	6022      	str	r2, [r4, #0]
 80073a4:	2278      	movs	r2, #120	; 0x78
 80073a6:	4932      	ldr	r1, [pc, #200]	; (8007470 <_printf_i+0x21c>)
 80073a8:	9103      	str	r1, [sp, #12]
 80073aa:	0021      	movs	r1, r4
 80073ac:	3145      	adds	r1, #69	; 0x45
 80073ae:	700a      	strb	r2, [r1, #0]
 80073b0:	6819      	ldr	r1, [r3, #0]
 80073b2:	6822      	ldr	r2, [r4, #0]
 80073b4:	c920      	ldmia	r1!, {r5}
 80073b6:	0610      	lsls	r0, r2, #24
 80073b8:	d402      	bmi.n	80073c0 <_printf_i+0x16c>
 80073ba:	0650      	lsls	r0, r2, #25
 80073bc:	d500      	bpl.n	80073c0 <_printf_i+0x16c>
 80073be:	b2ad      	uxth	r5, r5
 80073c0:	6019      	str	r1, [r3, #0]
 80073c2:	07d3      	lsls	r3, r2, #31
 80073c4:	d502      	bpl.n	80073cc <_printf_i+0x178>
 80073c6:	2320      	movs	r3, #32
 80073c8:	4313      	orrs	r3, r2
 80073ca:	6023      	str	r3, [r4, #0]
 80073cc:	2710      	movs	r7, #16
 80073ce:	2d00      	cmp	r5, #0
 80073d0:	d1a9      	bne.n	8007326 <_printf_i+0xd2>
 80073d2:	2220      	movs	r2, #32
 80073d4:	6823      	ldr	r3, [r4, #0]
 80073d6:	4393      	bics	r3, r2
 80073d8:	6023      	str	r3, [r4, #0]
 80073da:	e7a4      	b.n	8007326 <_printf_i+0xd2>
 80073dc:	681a      	ldr	r2, [r3, #0]
 80073de:	680d      	ldr	r5, [r1, #0]
 80073e0:	1d10      	adds	r0, r2, #4
 80073e2:	6949      	ldr	r1, [r1, #20]
 80073e4:	6018      	str	r0, [r3, #0]
 80073e6:	6813      	ldr	r3, [r2, #0]
 80073e8:	062e      	lsls	r6, r5, #24
 80073ea:	d501      	bpl.n	80073f0 <_printf_i+0x19c>
 80073ec:	6019      	str	r1, [r3, #0]
 80073ee:	e002      	b.n	80073f6 <_printf_i+0x1a2>
 80073f0:	066d      	lsls	r5, r5, #25
 80073f2:	d5fb      	bpl.n	80073ec <_printf_i+0x198>
 80073f4:	8019      	strh	r1, [r3, #0]
 80073f6:	2300      	movs	r3, #0
 80073f8:	9e04      	ldr	r6, [sp, #16]
 80073fa:	6123      	str	r3, [r4, #16]
 80073fc:	e7c0      	b.n	8007380 <_printf_i+0x12c>
 80073fe:	681a      	ldr	r2, [r3, #0]
 8007400:	1d11      	adds	r1, r2, #4
 8007402:	6019      	str	r1, [r3, #0]
 8007404:	6816      	ldr	r6, [r2, #0]
 8007406:	2100      	movs	r1, #0
 8007408:	0030      	movs	r0, r6
 800740a:	6862      	ldr	r2, [r4, #4]
 800740c:	f000 f858 	bl	80074c0 <memchr>
 8007410:	2800      	cmp	r0, #0
 8007412:	d001      	beq.n	8007418 <_printf_i+0x1c4>
 8007414:	1b80      	subs	r0, r0, r6
 8007416:	6060      	str	r0, [r4, #4]
 8007418:	6863      	ldr	r3, [r4, #4]
 800741a:	6123      	str	r3, [r4, #16]
 800741c:	2300      	movs	r3, #0
 800741e:	9a04      	ldr	r2, [sp, #16]
 8007420:	7013      	strb	r3, [r2, #0]
 8007422:	e7ad      	b.n	8007380 <_printf_i+0x12c>
 8007424:	0032      	movs	r2, r6
 8007426:	6923      	ldr	r3, [r4, #16]
 8007428:	9906      	ldr	r1, [sp, #24]
 800742a:	9805      	ldr	r0, [sp, #20]
 800742c:	9d07      	ldr	r5, [sp, #28]
 800742e:	47a8      	blx	r5
 8007430:	3001      	adds	r0, #1
 8007432:	d0af      	beq.n	8007394 <_printf_i+0x140>
 8007434:	6823      	ldr	r3, [r4, #0]
 8007436:	079b      	lsls	r3, r3, #30
 8007438:	d415      	bmi.n	8007466 <_printf_i+0x212>
 800743a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800743c:	68e0      	ldr	r0, [r4, #12]
 800743e:	4298      	cmp	r0, r3
 8007440:	daaa      	bge.n	8007398 <_printf_i+0x144>
 8007442:	0018      	movs	r0, r3
 8007444:	e7a8      	b.n	8007398 <_printf_i+0x144>
 8007446:	0022      	movs	r2, r4
 8007448:	2301      	movs	r3, #1
 800744a:	9906      	ldr	r1, [sp, #24]
 800744c:	9805      	ldr	r0, [sp, #20]
 800744e:	9e07      	ldr	r6, [sp, #28]
 8007450:	3219      	adds	r2, #25
 8007452:	47b0      	blx	r6
 8007454:	3001      	adds	r0, #1
 8007456:	d09d      	beq.n	8007394 <_printf_i+0x140>
 8007458:	3501      	adds	r5, #1
 800745a:	68e3      	ldr	r3, [r4, #12]
 800745c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800745e:	1a9b      	subs	r3, r3, r2
 8007460:	42ab      	cmp	r3, r5
 8007462:	dcf0      	bgt.n	8007446 <_printf_i+0x1f2>
 8007464:	e7e9      	b.n	800743a <_printf_i+0x1e6>
 8007466:	2500      	movs	r5, #0
 8007468:	e7f7      	b.n	800745a <_printf_i+0x206>
 800746a:	46c0      	nop			; (mov r8, r8)
 800746c:	080078cd 	.word	0x080078cd
 8007470:	080078de 	.word	0x080078de

08007474 <memmove>:
 8007474:	b510      	push	{r4, lr}
 8007476:	4288      	cmp	r0, r1
 8007478:	d902      	bls.n	8007480 <memmove+0xc>
 800747a:	188b      	adds	r3, r1, r2
 800747c:	4298      	cmp	r0, r3
 800747e:	d303      	bcc.n	8007488 <memmove+0x14>
 8007480:	2300      	movs	r3, #0
 8007482:	e007      	b.n	8007494 <memmove+0x20>
 8007484:	5c8b      	ldrb	r3, [r1, r2]
 8007486:	5483      	strb	r3, [r0, r2]
 8007488:	3a01      	subs	r2, #1
 800748a:	d2fb      	bcs.n	8007484 <memmove+0x10>
 800748c:	bd10      	pop	{r4, pc}
 800748e:	5ccc      	ldrb	r4, [r1, r3]
 8007490:	54c4      	strb	r4, [r0, r3]
 8007492:	3301      	adds	r3, #1
 8007494:	429a      	cmp	r2, r3
 8007496:	d1fa      	bne.n	800748e <memmove+0x1a>
 8007498:	e7f8      	b.n	800748c <memmove+0x18>
	...

0800749c <_sbrk_r>:
 800749c:	2300      	movs	r3, #0
 800749e:	b570      	push	{r4, r5, r6, lr}
 80074a0:	4d06      	ldr	r5, [pc, #24]	; (80074bc <_sbrk_r+0x20>)
 80074a2:	0004      	movs	r4, r0
 80074a4:	0008      	movs	r0, r1
 80074a6:	602b      	str	r3, [r5, #0]
 80074a8:	f7fc fba2 	bl	8003bf0 <_sbrk>
 80074ac:	1c43      	adds	r3, r0, #1
 80074ae:	d103      	bne.n	80074b8 <_sbrk_r+0x1c>
 80074b0:	682b      	ldr	r3, [r5, #0]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d000      	beq.n	80074b8 <_sbrk_r+0x1c>
 80074b6:	6023      	str	r3, [r4, #0]
 80074b8:	bd70      	pop	{r4, r5, r6, pc}
 80074ba:	46c0      	nop			; (mov r8, r8)
 80074bc:	20000740 	.word	0x20000740

080074c0 <memchr>:
 80074c0:	b2c9      	uxtb	r1, r1
 80074c2:	1882      	adds	r2, r0, r2
 80074c4:	4290      	cmp	r0, r2
 80074c6:	d101      	bne.n	80074cc <memchr+0xc>
 80074c8:	2000      	movs	r0, #0
 80074ca:	4770      	bx	lr
 80074cc:	7803      	ldrb	r3, [r0, #0]
 80074ce:	428b      	cmp	r3, r1
 80074d0:	d0fb      	beq.n	80074ca <memchr+0xa>
 80074d2:	3001      	adds	r0, #1
 80074d4:	e7f6      	b.n	80074c4 <memchr+0x4>

080074d6 <memcpy>:
 80074d6:	2300      	movs	r3, #0
 80074d8:	b510      	push	{r4, lr}
 80074da:	429a      	cmp	r2, r3
 80074dc:	d100      	bne.n	80074e0 <memcpy+0xa>
 80074de:	bd10      	pop	{r4, pc}
 80074e0:	5ccc      	ldrb	r4, [r1, r3]
 80074e2:	54c4      	strb	r4, [r0, r3]
 80074e4:	3301      	adds	r3, #1
 80074e6:	e7f8      	b.n	80074da <memcpy+0x4>

080074e8 <_realloc_r>:
 80074e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80074ea:	0007      	movs	r7, r0
 80074ec:	000e      	movs	r6, r1
 80074ee:	0014      	movs	r4, r2
 80074f0:	2900      	cmp	r1, #0
 80074f2:	d105      	bne.n	8007500 <_realloc_r+0x18>
 80074f4:	0011      	movs	r1, r2
 80074f6:	f7ff fc49 	bl	8006d8c <_malloc_r>
 80074fa:	0005      	movs	r5, r0
 80074fc:	0028      	movs	r0, r5
 80074fe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007500:	2a00      	cmp	r2, #0
 8007502:	d103      	bne.n	800750c <_realloc_r+0x24>
 8007504:	f7ff fbd6 	bl	8006cb4 <_free_r>
 8007508:	0025      	movs	r5, r4
 800750a:	e7f7      	b.n	80074fc <_realloc_r+0x14>
 800750c:	f000 f81b 	bl	8007546 <_malloc_usable_size_r>
 8007510:	9001      	str	r0, [sp, #4]
 8007512:	4284      	cmp	r4, r0
 8007514:	d803      	bhi.n	800751e <_realloc_r+0x36>
 8007516:	0035      	movs	r5, r6
 8007518:	0843      	lsrs	r3, r0, #1
 800751a:	42a3      	cmp	r3, r4
 800751c:	d3ee      	bcc.n	80074fc <_realloc_r+0x14>
 800751e:	0021      	movs	r1, r4
 8007520:	0038      	movs	r0, r7
 8007522:	f7ff fc33 	bl	8006d8c <_malloc_r>
 8007526:	1e05      	subs	r5, r0, #0
 8007528:	d0e8      	beq.n	80074fc <_realloc_r+0x14>
 800752a:	9b01      	ldr	r3, [sp, #4]
 800752c:	0022      	movs	r2, r4
 800752e:	429c      	cmp	r4, r3
 8007530:	d900      	bls.n	8007534 <_realloc_r+0x4c>
 8007532:	001a      	movs	r2, r3
 8007534:	0031      	movs	r1, r6
 8007536:	0028      	movs	r0, r5
 8007538:	f7ff ffcd 	bl	80074d6 <memcpy>
 800753c:	0031      	movs	r1, r6
 800753e:	0038      	movs	r0, r7
 8007540:	f7ff fbb8 	bl	8006cb4 <_free_r>
 8007544:	e7da      	b.n	80074fc <_realloc_r+0x14>

08007546 <_malloc_usable_size_r>:
 8007546:	1f0b      	subs	r3, r1, #4
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	1f18      	subs	r0, r3, #4
 800754c:	2b00      	cmp	r3, #0
 800754e:	da01      	bge.n	8007554 <_malloc_usable_size_r+0xe>
 8007550:	580b      	ldr	r3, [r1, r0]
 8007552:	18c0      	adds	r0, r0, r3
 8007554:	4770      	bx	lr

08007556 <sqrt>:
 8007556:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007558:	0004      	movs	r4, r0
 800755a:	000d      	movs	r5, r1
 800755c:	f000 f822 	bl	80075a4 <__ieee754_sqrt>
 8007560:	0022      	movs	r2, r4
 8007562:	0006      	movs	r6, r0
 8007564:	000f      	movs	r7, r1
 8007566:	002b      	movs	r3, r5
 8007568:	0020      	movs	r0, r4
 800756a:	0029      	movs	r1, r5
 800756c:	f7fb f9fe 	bl	800296c <__aeabi_dcmpun>
 8007570:	2800      	cmp	r0, #0
 8007572:	d113      	bne.n	800759c <sqrt+0x46>
 8007574:	2200      	movs	r2, #0
 8007576:	2300      	movs	r3, #0
 8007578:	0020      	movs	r0, r4
 800757a:	0029      	movs	r1, r5
 800757c:	f7f8 fe6c 	bl	8000258 <__aeabi_dcmplt>
 8007580:	2800      	cmp	r0, #0
 8007582:	d00b      	beq.n	800759c <sqrt+0x46>
 8007584:	f7ff fb6a 	bl	8006c5c <__errno>
 8007588:	2321      	movs	r3, #33	; 0x21
 800758a:	2200      	movs	r2, #0
 800758c:	6003      	str	r3, [r0, #0]
 800758e:	2300      	movs	r3, #0
 8007590:	0010      	movs	r0, r2
 8007592:	0019      	movs	r1, r3
 8007594:	f7f9 ffac 	bl	80014f0 <__aeabi_ddiv>
 8007598:	0006      	movs	r6, r0
 800759a:	000f      	movs	r7, r1
 800759c:	0030      	movs	r0, r6
 800759e:	0039      	movs	r1, r7
 80075a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080075a4 <__ieee754_sqrt>:
 80075a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075a6:	000a      	movs	r2, r1
 80075a8:	000c      	movs	r4, r1
 80075aa:	496f      	ldr	r1, [pc, #444]	; (8007768 <__ieee754_sqrt+0x1c4>)
 80075ac:	0005      	movs	r5, r0
 80075ae:	0003      	movs	r3, r0
 80075b0:	0008      	movs	r0, r1
 80075b2:	b087      	sub	sp, #28
 80075b4:	4020      	ands	r0, r4
 80075b6:	4288      	cmp	r0, r1
 80075b8:	d111      	bne.n	80075de <__ieee754_sqrt+0x3a>
 80075ba:	002a      	movs	r2, r5
 80075bc:	0023      	movs	r3, r4
 80075be:	0028      	movs	r0, r5
 80075c0:	0021      	movs	r1, r4
 80075c2:	f7fa fb8f 	bl	8001ce4 <__aeabi_dmul>
 80075c6:	0002      	movs	r2, r0
 80075c8:	000b      	movs	r3, r1
 80075ca:	0028      	movs	r0, r5
 80075cc:	0021      	movs	r1, r4
 80075ce:	f7f9 fc2f 	bl	8000e30 <__aeabi_dadd>
 80075d2:	0005      	movs	r5, r0
 80075d4:	000c      	movs	r4, r1
 80075d6:	0028      	movs	r0, r5
 80075d8:	0021      	movs	r1, r4
 80075da:	b007      	add	sp, #28
 80075dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075de:	2c00      	cmp	r4, #0
 80075e0:	dc12      	bgt.n	8007608 <__ieee754_sqrt+0x64>
 80075e2:	0061      	lsls	r1, r4, #1
 80075e4:	0849      	lsrs	r1, r1, #1
 80075e6:	4329      	orrs	r1, r5
 80075e8:	d0f5      	beq.n	80075d6 <__ieee754_sqrt+0x32>
 80075ea:	2100      	movs	r1, #0
 80075ec:	428c      	cmp	r4, r1
 80075ee:	d100      	bne.n	80075f2 <__ieee754_sqrt+0x4e>
 80075f0:	e09f      	b.n	8007732 <__ieee754_sqrt+0x18e>
 80075f2:	002a      	movs	r2, r5
 80075f4:	0023      	movs	r3, r4
 80075f6:	0028      	movs	r0, r5
 80075f8:	0021      	movs	r1, r4
 80075fa:	f7fa fe35 	bl	8002268 <__aeabi_dsub>
 80075fe:	0002      	movs	r2, r0
 8007600:	000b      	movs	r3, r1
 8007602:	f7f9 ff75 	bl	80014f0 <__aeabi_ddiv>
 8007606:	e7e4      	b.n	80075d2 <__ieee754_sqrt+0x2e>
 8007608:	1521      	asrs	r1, r4, #20
 800760a:	d100      	bne.n	800760e <__ieee754_sqrt+0x6a>
 800760c:	e091      	b.n	8007732 <__ieee754_sqrt+0x18e>
 800760e:	4857      	ldr	r0, [pc, #348]	; (800776c <__ieee754_sqrt+0x1c8>)
 8007610:	0312      	lsls	r2, r2, #12
 8007612:	180c      	adds	r4, r1, r0
 8007614:	2080      	movs	r0, #128	; 0x80
 8007616:	0b12      	lsrs	r2, r2, #12
 8007618:	0340      	lsls	r0, r0, #13
 800761a:	4310      	orrs	r0, r2
 800761c:	07c9      	lsls	r1, r1, #31
 800761e:	d403      	bmi.n	8007628 <__ieee754_sqrt+0x84>
 8007620:	0fda      	lsrs	r2, r3, #31
 8007622:	0040      	lsls	r0, r0, #1
 8007624:	1810      	adds	r0, r2, r0
 8007626:	005b      	lsls	r3, r3, #1
 8007628:	2500      	movs	r5, #0
 800762a:	1062      	asrs	r2, r4, #1
 800762c:	0040      	lsls	r0, r0, #1
 800762e:	2480      	movs	r4, #128	; 0x80
 8007630:	9205      	str	r2, [sp, #20]
 8007632:	0fda      	lsrs	r2, r3, #31
 8007634:	1812      	adds	r2, r2, r0
 8007636:	0029      	movs	r1, r5
 8007638:	2016      	movs	r0, #22
 800763a:	005b      	lsls	r3, r3, #1
 800763c:	03a4      	lsls	r4, r4, #14
 800763e:	190e      	adds	r6, r1, r4
 8007640:	4296      	cmp	r6, r2
 8007642:	dc02      	bgt.n	800764a <__ieee754_sqrt+0xa6>
 8007644:	1931      	adds	r1, r6, r4
 8007646:	1b92      	subs	r2, r2, r6
 8007648:	192d      	adds	r5, r5, r4
 800764a:	0fde      	lsrs	r6, r3, #31
 800764c:	0052      	lsls	r2, r2, #1
 800764e:	3801      	subs	r0, #1
 8007650:	18b2      	adds	r2, r6, r2
 8007652:	005b      	lsls	r3, r3, #1
 8007654:	0864      	lsrs	r4, r4, #1
 8007656:	2800      	cmp	r0, #0
 8007658:	d1f1      	bne.n	800763e <__ieee754_sqrt+0x9a>
 800765a:	2620      	movs	r6, #32
 800765c:	2780      	movs	r7, #128	; 0x80
 800765e:	0004      	movs	r4, r0
 8007660:	9604      	str	r6, [sp, #16]
 8007662:	063f      	lsls	r7, r7, #24
 8007664:	183e      	adds	r6, r7, r0
 8007666:	46b4      	mov	ip, r6
 8007668:	428a      	cmp	r2, r1
 800766a:	dc02      	bgt.n	8007672 <__ieee754_sqrt+0xce>
 800766c:	d114      	bne.n	8007698 <__ieee754_sqrt+0xf4>
 800766e:	429e      	cmp	r6, r3
 8007670:	d812      	bhi.n	8007698 <__ieee754_sqrt+0xf4>
 8007672:	4660      	mov	r0, ip
 8007674:	4666      	mov	r6, ip
 8007676:	19c0      	adds	r0, r0, r7
 8007678:	9100      	str	r1, [sp, #0]
 800767a:	2e00      	cmp	r6, #0
 800767c:	da03      	bge.n	8007686 <__ieee754_sqrt+0xe2>
 800767e:	43c6      	mvns	r6, r0
 8007680:	0ff6      	lsrs	r6, r6, #31
 8007682:	198e      	adds	r6, r1, r6
 8007684:	9600      	str	r6, [sp, #0]
 8007686:	1a52      	subs	r2, r2, r1
 8007688:	4563      	cmp	r3, ip
 800768a:	4189      	sbcs	r1, r1
 800768c:	4249      	negs	r1, r1
 800768e:	1a52      	subs	r2, r2, r1
 8007690:	4661      	mov	r1, ip
 8007692:	1a5b      	subs	r3, r3, r1
 8007694:	9900      	ldr	r1, [sp, #0]
 8007696:	19e4      	adds	r4, r4, r7
 8007698:	0fde      	lsrs	r6, r3, #31
 800769a:	0052      	lsls	r2, r2, #1
 800769c:	18b2      	adds	r2, r6, r2
 800769e:	9e04      	ldr	r6, [sp, #16]
 80076a0:	005b      	lsls	r3, r3, #1
 80076a2:	3e01      	subs	r6, #1
 80076a4:	087f      	lsrs	r7, r7, #1
 80076a6:	9604      	str	r6, [sp, #16]
 80076a8:	2e00      	cmp	r6, #0
 80076aa:	d1db      	bne.n	8007664 <__ieee754_sqrt+0xc0>
 80076ac:	431a      	orrs	r2, r3
 80076ae:	d01f      	beq.n	80076f0 <__ieee754_sqrt+0x14c>
 80076b0:	4e2f      	ldr	r6, [pc, #188]	; (8007770 <__ieee754_sqrt+0x1cc>)
 80076b2:	4f30      	ldr	r7, [pc, #192]	; (8007774 <__ieee754_sqrt+0x1d0>)
 80076b4:	6830      	ldr	r0, [r6, #0]
 80076b6:	6871      	ldr	r1, [r6, #4]
 80076b8:	683a      	ldr	r2, [r7, #0]
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	9200      	str	r2, [sp, #0]
 80076be:	9301      	str	r3, [sp, #4]
 80076c0:	6832      	ldr	r2, [r6, #0]
 80076c2:	6873      	ldr	r3, [r6, #4]
 80076c4:	9202      	str	r2, [sp, #8]
 80076c6:	9303      	str	r3, [sp, #12]
 80076c8:	9a00      	ldr	r2, [sp, #0]
 80076ca:	9b01      	ldr	r3, [sp, #4]
 80076cc:	f7fa fdcc 	bl	8002268 <__aeabi_dsub>
 80076d0:	0002      	movs	r2, r0
 80076d2:	000b      	movs	r3, r1
 80076d4:	9802      	ldr	r0, [sp, #8]
 80076d6:	9903      	ldr	r1, [sp, #12]
 80076d8:	f7f8 fdc8 	bl	800026c <__aeabi_dcmple>
 80076dc:	2800      	cmp	r0, #0
 80076de:	d007      	beq.n	80076f0 <__ieee754_sqrt+0x14c>
 80076e0:	6830      	ldr	r0, [r6, #0]
 80076e2:	6871      	ldr	r1, [r6, #4]
 80076e4:	683a      	ldr	r2, [r7, #0]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	1c67      	adds	r7, r4, #1
 80076ea:	d127      	bne.n	800773c <__ieee754_sqrt+0x198>
 80076ec:	9c04      	ldr	r4, [sp, #16]
 80076ee:	3501      	adds	r5, #1
 80076f0:	4b21      	ldr	r3, [pc, #132]	; (8007778 <__ieee754_sqrt+0x1d4>)
 80076f2:	1069      	asrs	r1, r5, #1
 80076f4:	18c9      	adds	r1, r1, r3
 80076f6:	0864      	lsrs	r4, r4, #1
 80076f8:	07ed      	lsls	r5, r5, #31
 80076fa:	d502      	bpl.n	8007702 <__ieee754_sqrt+0x15e>
 80076fc:	2380      	movs	r3, #128	; 0x80
 80076fe:	061b      	lsls	r3, r3, #24
 8007700:	431c      	orrs	r4, r3
 8007702:	9b05      	ldr	r3, [sp, #20]
 8007704:	0025      	movs	r5, r4
 8007706:	0518      	lsls	r0, r3, #20
 8007708:	1843      	adds	r3, r0, r1
 800770a:	001c      	movs	r4, r3
 800770c:	e763      	b.n	80075d6 <__ieee754_sqrt+0x32>
 800770e:	0ada      	lsrs	r2, r3, #11
 8007710:	3815      	subs	r0, #21
 8007712:	055b      	lsls	r3, r3, #21
 8007714:	2a00      	cmp	r2, #0
 8007716:	d0fa      	beq.n	800770e <__ieee754_sqrt+0x16a>
 8007718:	2480      	movs	r4, #128	; 0x80
 800771a:	0364      	lsls	r4, r4, #13
 800771c:	4222      	tst	r2, r4
 800771e:	d00a      	beq.n	8007736 <__ieee754_sqrt+0x192>
 8007720:	2420      	movs	r4, #32
 8007722:	001e      	movs	r6, r3
 8007724:	1a64      	subs	r4, r4, r1
 8007726:	40e6      	lsrs	r6, r4
 8007728:	1e4d      	subs	r5, r1, #1
 800772a:	408b      	lsls	r3, r1
 800772c:	4332      	orrs	r2, r6
 800772e:	1b41      	subs	r1, r0, r5
 8007730:	e76d      	b.n	800760e <__ieee754_sqrt+0x6a>
 8007732:	2000      	movs	r0, #0
 8007734:	e7ee      	b.n	8007714 <__ieee754_sqrt+0x170>
 8007736:	0052      	lsls	r2, r2, #1
 8007738:	3101      	adds	r1, #1
 800773a:	e7ef      	b.n	800771c <__ieee754_sqrt+0x178>
 800773c:	f7f9 fb78 	bl	8000e30 <__aeabi_dadd>
 8007740:	6877      	ldr	r7, [r6, #4]
 8007742:	6836      	ldr	r6, [r6, #0]
 8007744:	0002      	movs	r2, r0
 8007746:	000b      	movs	r3, r1
 8007748:	0030      	movs	r0, r6
 800774a:	0039      	movs	r1, r7
 800774c:	f7f8 fd84 	bl	8000258 <__aeabi_dcmplt>
 8007750:	2800      	cmp	r0, #0
 8007752:	d004      	beq.n	800775e <__ieee754_sqrt+0x1ba>
 8007754:	3402      	adds	r4, #2
 8007756:	4263      	negs	r3, r4
 8007758:	4163      	adcs	r3, r4
 800775a:	18ed      	adds	r5, r5, r3
 800775c:	e7c8      	b.n	80076f0 <__ieee754_sqrt+0x14c>
 800775e:	2301      	movs	r3, #1
 8007760:	3401      	adds	r4, #1
 8007762:	439c      	bics	r4, r3
 8007764:	e7c4      	b.n	80076f0 <__ieee754_sqrt+0x14c>
 8007766:	46c0      	nop			; (mov r8, r8)
 8007768:	7ff00000 	.word	0x7ff00000
 800776c:	fffffc01 	.word	0xfffffc01
 8007770:	20000060 	.word	0x20000060
 8007774:	20000068 	.word	0x20000068
 8007778:	3fe00000 	.word	0x3fe00000

0800777c <_init>:
 800777c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800777e:	46c0      	nop			; (mov r8, r8)
 8007780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007782:	bc08      	pop	{r3}
 8007784:	469e      	mov	lr, r3
 8007786:	4770      	bx	lr

08007788 <_fini>:
 8007788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800778a:	46c0      	nop			; (mov r8, r8)
 800778c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800778e:	bc08      	pop	{r3}
 8007790:	469e      	mov	lr, r3
 8007792:	4770      	bx	lr
